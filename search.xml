<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/10/28/linux-chang-yong-ming-ling/"/>
      <url>/2021/10/28/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>/bin 常用指令</li><li>/boot 启动linux时的核心文件</li><li>/data </li><li>/dev 外部设备</li><li>/etc 系统配置文件 </li><li>==/home== 用户主目录</li><li>/lib 动态链接库</li><li>/lost+found 突然关机时，存放文件</li><li>/media U盘，光驱文件</li><li>/opt 安装额外软件</li><li>/root 管理员目录</li><li>==/usr== 用户的程序和文件</li><li>/temp 临时文件</li><li>/sys 文件系统</li><li>==/var== 经常修改的文件</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>Tab</strong> 如果当前文件可见则tab可补全文件名</p><p><strong>y</strong> 确定</p><pre><code class="linux">cd .. 返回上一级目录 相对路径cd / 转到根目录        绝对路径cd ~ 回到当前用户目录 管理员是root目录</code></pre><pre><code>ls 查看当前目录文件ls -a 查看所有(包括隐藏)目录ls -l 查看文件附带属性和子目录ls -al 结合使用隐藏文件和属性</code></pre><pre><code>pwd 显示当前clear 清屏</code></pre><pre><code>mkdir 创建文件夹 ,因为带有/ 所以不是目录名，不能连续创建mkdir -p 创建路径</code></pre><pre><code>rmdir/rm 删除文件夹rmdir -p 删除路径</code></pre><pre><code>cp src tgt 复制rm -f 强制删除rm -i 询问是否删除rm -r 删除路径中的文件，路径还存在rm 也可以删除路径中的文件rm -rf / 删除所有文件</code></pre><pre><code>mv 移动文件/目录mv src tgt c</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/27/spring-ioc-gai-lan/"/>
      <url>/2021/10/27/spring-ioc-gai-lan/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IOC概览"><a href="#Spring-IOC概览" class="headerlink" title="Spring IOC概览"></a>Spring IOC概览</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/26/view-source-https-www.cnblogs.com-davidwang456-p-3801642/"/>
      <url>/2021/10/26/view-source-https-www.cnblogs.com-davidwang456-p-3801642/</url>
      
        <content type="html"><![CDATA[<div class="line-gutter-backdrop"></div><form autocomplete="off"><label class="line-wrap-control">换行<input type="checkbox" aria-label="换行"></label></form><table><tbody><tr><td class="line-number" value="1"></td><td class="line-content"><span class="html-doctype">&lt;!DOCTYPE html&gt;</span></td></tr><tr><td class="line-number" value="2"></td><td class="line-content"><span class="html-tag">&lt;html <span class="html-attribute-name">lang</span>="<span class="html-attribute-value">zh-cn</span>"&gt;</span></td></tr><tr><td class="line-number" value="3"></td><td class="line-content"><span class="html-tag">&lt;head&gt;</span></td></tr><tr><td class="line-number" value="4"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">charset</span>="<span class="html-attribute-value">utf-8</span>" /&gt;</span></td></tr><tr><td class="line-number" value="5"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">name</span>="<span class="html-attribute-value">viewport</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">width=device-width, initial-scale=1.0</span>" /&gt;</span></td></tr><tr><td class="line-number" value="6"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">name</span>="<span class="html-attribute-value">referrer</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">never</span>" /&gt;</span></td></tr><tr><td class="line-number" value="7"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">name</span>="<span class="html-attribute-value">description</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">在信息安全性领域，授权是世界的的中心，因为它是控制个体（即人、进程和计算机）对系统资源的访问权限的过程。直到最近，在 Java 安全体系结构中相关的问题都是“这段运行中的代码的访问权限是什么？” 随着</span>" /&gt;</span></td></tr><tr><td class="line-number" value="8"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">property</span>="<span class="html-attribute-value">og:description</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">在信息安全性领域，授权是世界的的中心，因为它是控制个体（即人、进程和计算机）对系统资源的访问权限的过程。直到最近，在 Java 安全体系结构中相关的问题都是“这段运行中的代码的访问权限是什么？” 随着</span>" /&gt;</span></td></tr><tr><td class="line-number" value="9"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">http-equiv</span>="<span class="html-attribute-value">Cache-Control</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">no-transform</span>" /&gt;</span></td></tr><tr><td class="line-number" value="10"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">http-equiv</span>="<span class="html-attribute-value">Cache-Control</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">no-siteapp</span>" /&gt;</span></td></tr><tr><td class="line-number" value="11"></td><td class="line-content">    <span class="html-tag">&lt;meta <span class="html-attribute-name">http-equiv</span>="<span class="html-attribute-value">X-UA-Compatible</span>" <span class="html-attribute-name">content</span>="<span class="html-attribute-value">IE=edge</span>" /&gt;</span></td></tr><tr><td class="line-number" value="12"></td><td class="line-content">    <span class="html-tag">&lt;title&gt;</span>Java 授权内幕--转载 - 一天不进步，就是退步 - 博客园<span class="html-tag">&lt;/title&gt;</span></td></tr><tr><td class="line-number" value="13"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">id</span>="<span class="html-attribute-value">favicon</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">shortcut icon</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://common.cnblogs.com/favicon.svg" rel="noreferrer noopener">//common.cnblogs.com/favicon.svg</a>" <span class="html-attribute-name">type</span>="<span class="html-attribute-value">image/svg+xml</span>" /&gt;</span></td></tr><tr><td class="line-number" value="14"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="15"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">stylesheet</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/css/blog-common.min.css?v=MynSBPsTXNkDVLGPQR89Q2oVwJD1SYW2wiVnCO3DuWg" rel="noreferrer noopener">/css/blog-common.min.css?v=MynSBPsTXNkDVLGPQR89Q2oVwJD1SYW2wiVnCO3DuWg</a>" /&gt;</span></td></tr><tr><td class="line-number" value="16"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">id</span>="<span class="html-attribute-value">MainCss</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">stylesheet</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/skins/arrow/bundle-arrow.min.css?v=mlGXZ0foCVpRHAZFkO5xbLxnPI8xpEbXQu-D6HO6Fow" rel="noreferrer noopener">/skins/arrow/bundle-arrow.min.css?v=mlGXZ0foCVpRHAZFkO5xbLxnPI8xpEbXQu-D6HO6Fow</a>" /&gt;</span></td></tr><tr><td class="line-number" value="17"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">type</span>="<span class="html-attribute-value">text/css</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">stylesheet</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/css/hljs/cnblogs.css?v=2spjdq1Snjw5rAm9auWVRax8Gb7nftS4ORu-8fQ7JGM" rel="noreferrer noopener">/css/hljs/cnblogs.css?v=2spjdq1Snjw5rAm9auWVRax8Gb7nftS4ORu-8fQ7JGM</a>" /&gt;</span></td></tr><tr><td class="line-number" value="18"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="19"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">id</span>="<span class="html-attribute-value">mobile-style</span>" <span class="html-attribute-name">media</span>="<span class="html-attribute-value">only screen and (max-width: 767px)</span>" <span class="html-attribute-name">type</span>="<span class="html-attribute-value">text/css</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">stylesheet</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/skins/arrow/bundle-arrow-mobile.min.css?v=FW28G4Yh76LbsojjqPQEI60g887rop2Gdl-AmDe2ON4" rel="noreferrer noopener">/skins/arrow/bundle-arrow-mobile.min.css?v=FW28G4Yh76LbsojjqPQEI60g887rop2Gdl-AmDe2ON4</a>" /&gt;</span></td></tr><tr><td class="line-number" value="20"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="21"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">type</span>="<span class="html-attribute-value">application/rss+xml</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">alternate</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/davidwang456/rss" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/rss</a>" /&gt;</span></td></tr><tr><td class="line-number" value="22"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">type</span>="<span class="html-attribute-value">application/rsd+xml</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">EditURI</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/davidwang456/rsd.xml" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/rsd.xml</a>" /&gt;</span></td></tr><tr><td class="line-number" value="23"></td><td class="line-content">    <span class="html-tag">&lt;link <span class="html-attribute-name">type</span>="<span class="html-attribute-value">application/wlwmanifest+xml</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">wlwmanifest</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/davidwang456/wlwmanifest.xml" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/wlwmanifest.xml</a>" /&gt;</span></td></tr><tr><td class="line-number" value="24"></td><td class="line-content">    <span class="html-tag">&lt;script&gt;</span></td></tr><tr><td class="line-number" value="25"></td><td class="line-content">        var currentBlogId = 138600;</td></tr><tr><td class="line-number" value="26"></td><td class="line-content">        var currentBlogApp = 'davidwang456';</td></tr><tr><td class="line-number" value="27"></td><td class="line-content">        var cb_enable_mathjax = false;</td></tr><tr><td class="line-number" value="28"></td><td class="line-content">        var isLogined = true;</td></tr><tr><td class="line-number" value="29"></td><td class="line-content">        var isBlogOwner = false;</td></tr><tr><td class="line-number" value="30"></td><td class="line-content">        var skinName = 'arrow';</td></tr><tr><td class="line-number" value="31"></td><td class="line-content">        var visitorUserId = '73cd724e-17be-4b4a-a660-08d822f07921';</td></tr><tr><td class="line-number" value="32"></td><td class="line-content">        var hasCustomScript = true;</td></tr><tr><td class="line-number" value="33"></td><td class="line-content">        try {</td></tr><tr><td class="line-number" value="34"></td><td class="line-content">            if (hasCustomScript &amp;&amp; document.referrer &amp;&amp; document.referrer.indexOf('baidu.com') &gt;= 0) {</td></tr><tr><td class="line-number" value="35"></td><td class="line-content">                Object.defineProperty(document, 'referrer', { value: '' });</td></tr><tr><td class="line-number" value="36"></td><td class="line-content">                Object.defineProperty(Document.prototype, 'referrer', { get: function(){ return ''; } });</td></tr><tr><td class="line-number" value="37"></td><td class="line-content">            }</td></tr><tr><td class="line-number" value="38"></td><td class="line-content">        } catch(error) { }</td></tr><tr><td class="line-number" value="39"></td><td class="line-content">    <span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="40"></td><td class="line-content">        <span class="html-tag">&lt;script&gt;</span></td></tr><tr><td class="line-number" value="41"></td><td class="line-content">            var currentPostDateAdded = '2014-06-21 11:18';</td></tr><tr><td class="line-number" value="42"></td><td class="line-content">        <span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="43"></td><td class="line-content">    <span class="html-tag">&lt;script <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js" rel="noreferrer noopener">https://common.cnblogs.com/scripts/jquery-2.2.0.min.js</a>"&gt;</span><span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="44"></td><td class="line-content">    <span class="html-tag">&lt;script <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/js/blog-common.min.js?v=V-zVMSdi6fYxja7HtOp6qIiJd_zqHctHxlOKSi6Vq4c" rel="noreferrer noopener">/js/blog-common.min.js?v=V-zVMSdi6fYxja7HtOp6qIiJd_zqHctHxlOKSi6Vq4c</a>"&gt;</span><span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="45"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="46"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="47"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="48"></td><td class="line-content">    <span class="html-tag">&lt;script <span class="html-attribute-name">type</span>="<span class="html-attribute-value">text/javascript</span>"&gt;</span></td></tr><tr><td class="line-number" value="49"></td><td class="line-content">        window.codeHighlightEngine = 1</td></tr><tr><td class="line-number" value="50"></td><td class="line-content">        window.enableCodeLineNumber = false</td></tr><tr><td class="line-number" value="51"></td><td class="line-content">    <span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="52"></td><td class="line-content"><span class="html-tag">&lt;/head&gt;</span></td></tr><tr><td class="line-number" value="53"></td><td class="line-content"><span class="html-tag">&lt;body <span class="html-attribute-name">class</span>="<span class="html-attribute-value">skin-arrow has-navbar has-bannerbar</span>"&gt;</span></td></tr><tr><td class="line-number" value="54"></td><td class="line-content">    <span class="html-tag">&lt;a <span class="html-attribute-name">name</span>="<span class="html-attribute-value">top</span>"&gt;</span><span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="55"></td><td class="line-content">        <span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://img2020.cnblogs.com/blog/35695/202110/35695-20211008160613875-1434480564.jpg" rel="noreferrer noopener">https://img2020.cnblogs.com/blog/35695/202110/35695-20211008160613875-1434480564.jpg</a>" <span class="html-attribute-name">style</span>="<span class="html-attribute-value">display:none</span>" <span class="html-attribute-name">onload</span>="<span class="html-attribute-value">impressC0()</span>" /&gt;</span></td></tr><tr><td class="line-number" value="56"></td><td class="line-content">        <span class="html-tag">&lt;a <span class="html-attribute-name">target</span>="<span class="html-attribute-value">_blank</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://c.gridsumdissector.com/r/?gid=gad_545_fieh18b6&amp;ck=46&amp;adk=567&amp;autorefresh=__AUTOREFRESH__" rel="noreferrer noopener">https://c.gridsumdissector.com/r/?gid=gad_545_fieh18b6&amp;ck=46&amp;adk=567&amp;autorefresh=__AUTOREFRESH__</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">clickBanner(494);ga('send', 'event', 'banner', 'click', 'C0-pangle')</span>"&gt;</span></td></tr><tr><td class="line-number" value="57"></td><td class="line-content">            <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">bannerbar aliyun forpc</span>" <span class="html-attribute-name">style</span>="<span class="html-attribute-value">background-size: contain; background-image: url(https://img2020.cnblogs.com/blog/35695/202110/35695-20211008160613875-1434480564.jpg)</span>"&gt;</span></td></tr><tr><td class="line-number" value="58"></td><td class="line-content">            <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="59"></td><td class="line-content">        <span class="html-tag">&lt;/a&gt;</span>     </td></tr><tr><td class="line-number" value="60"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">top_nav</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar forpc</span>"&gt;</span></td></tr><tr><td class="line-number" value="61"></td><td class="line-content">        <span class="html-tag">&lt;nav <span class="html-attribute-name">id</span>="<span class="html-attribute-value">nav_main</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-main</span>"&gt;</span></td></tr><tr><td class="line-number" value="62"></td><td class="line-content">            <span class="html-tag">&lt;ul <span class="html-attribute-name">id</span>="<span class="html-attribute-value">nav_left</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-list navbar-left</span>"&gt;</span></td></tr><tr><td class="line-number" value="63"></td><td class="line-content">                <span class="html-tag">&lt;li <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-branding</span>"&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/" rel="noreferrer noopener">https://www.cnblogs.com/</a>" <span class="html-attribute-name">title</span>="<span class="html-attribute-value">开发者的网上家园</span>"&gt;</span><span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" rel="noreferrer noopener">/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">博客园Logo</span>" /&gt;</span><span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="64"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/" rel="noreferrer noopener">/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')</span>"&gt;</span>首页<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="65"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://news.cnblogs.com/" rel="noreferrer noopener">https://news.cnblogs.com/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-news')</span>"&gt;</span>新闻<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="66"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://q.cnblogs.com/" rel="noreferrer noopener">https://q.cnblogs.com/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-q')</span>"&gt;</span>博问<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="67"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">nav_brandzone</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://brands.cnblogs.com/" rel="noreferrer noopener">https://brands.cnblogs.com/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')</span>"&gt;</span>专区<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="68"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://ing.cnblogs.com/" rel="noreferrer noopener">https://ing.cnblogs.com/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')</span>"&gt;</span>闪存<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="69"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://edu.cnblogs.com/" rel="noreferrer noopener">https://edu.cnblogs.com/</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')</span>"&gt;</span>班级<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="70"></td><td class="line-content">            <span class="html-tag">&lt;/ul&gt;</span></td></tr><tr><td class="line-number" value="71"></td><td class="line-content">            <span class="html-tag">&lt;ul <span class="html-attribute-name">id</span>="<span class="html-attribute-value">nav_right</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-list navbar-right</span>"&gt;</span></td></tr><tr><td class="line-number" value="72"></td><td class="line-content">                <span class="html-tag">&lt;li&gt;</span></td></tr><tr><td class="line-number" value="73"></td><td class="line-content">                    <span class="html-tag">&lt;form <span class="html-attribute-name">id</span>="<span class="html-attribute-value">zzk_search</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-search</span>" <span class="html-attribute-name">action</span>="<span class="html-attribute-value">https://zzk.cnblogs.com/s</span>" <span class="html-attribute-name">method</span>="<span class="html-attribute-value">get</span>"&gt;</span></td></tr><tr><td class="line-number" value="74"></td><td class="line-content">                        <span class="html-tag">&lt;input <span class="html-attribute-name">name</span>="<span class="html-attribute-value">w</span>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">zzk_search_input</span>" <span class="html-attribute-name">placeholder</span>="<span class="html-attribute-value">代码改变世界</span>" <span class="html-attribute-name">type</span>="<span class="html-attribute-value">text</span>" <span class="html-attribute-name">tabindex</span>="<span class="html-attribute-value">3</span>" /&gt;</span></td></tr><tr><td class="line-number" value="75"></td><td class="line-content">                        <span class="html-tag">&lt;button <span class="html-attribute-name">type</span>="<span class="html-attribute-value">submit</span>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">zzk_search_button</span>"&gt;</span></td></tr><tr><td class="line-number" value="76"></td><td class="line-content">                            <span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/aggsite/search.svg" rel="noreferrer noopener">/images/aggsite/search.svg</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">搜索</span>" /&gt;</span></td></tr><tr><td class="line-number" value="77"></td><td class="line-content">                        <span class="html-tag">&lt;/button&gt;</span></td></tr><tr><td class="line-number" value="78"></td><td class="line-content">                    <span class="html-tag">&lt;/form&gt;</span></td></tr><tr><td class="line-number" value="79"></td><td class="line-content">                <span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="80"></td><td class="line-content">                <span class="html-tag">&lt;li <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navbar_login_status</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-list</span>"&gt;</span></td></tr><tr><td class="line-number" value="81"></td><td class="line-content">                    <span class="html-tag">&lt;a <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-user-info navbar-blog</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" rel="noreferrer noopener">https://i.cnblogs.com/EditPosts.aspx?opt=1</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">写随笔</span>" <span class="html-attribute-name">title</span>="<span class="html-attribute-value">写随笔</span>"&gt;</span></td></tr><tr><td class="line-number" value="82"></td><td class="line-content">                        <span class="html-tag">&lt;img <span class="html-attribute-name">id</span>="<span class="html-attribute-value">new_post_icon</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-icon</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/aggsite/newpost.svg" rel="noreferrer noopener">/images/aggsite/newpost.svg</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">写随笔</span>" /&gt;</span></td></tr><tr><td class="line-number" value="83"></td><td class="line-content">                    <span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="84"></td><td class="line-content">                    <span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navblog-myblog-icon</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-user-info navbar-blog</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" rel="noreferrer noopener">https://passport.cnblogs.com/GetBlogApplyStatus.aspx</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">我的博客</span>" <span class="html-attribute-name">title</span>="<span class="html-attribute-value">我的博客</span>"&gt;</span></td></tr><tr><td class="line-number" value="85"></td><td class="line-content">                        <span class="html-tag">&lt;img <span class="html-attribute-name">id</span>="<span class="html-attribute-value">myblog_icon</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-icon</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/aggsite/myblog.svg" rel="noreferrer noopener">/images/aggsite/myblog.svg</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">我的博客</span>" /&gt;</span></td></tr><tr><td class="line-number" value="86"></td><td class="line-content">                    <span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="87"></td><td class="line-content">                    <span class="html-tag">&lt;a <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-user-info navbar-message navbar-icon-wrapper</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://msg.cnblogs.com/" rel="noreferrer noopener">https://msg.cnblogs.com/</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">短消息</span>" <span class="html-attribute-name">title</span>="<span class="html-attribute-value">短消息</span>"&gt;</span></td></tr><tr><td class="line-number" value="88"></td><td class="line-content">                        <span class="html-tag">&lt;img <span class="html-attribute-name">id</span>="<span class="html-attribute-value">msg_icon</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-icon</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" rel="noreferrer noopener">/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">短消息</span>" /&gt;</span></td></tr><tr><td class="line-number" value="89"></td><td class="line-content">                        <span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">msg_count</span>" <span class="html-attribute-name">style</span>="<span class="html-attribute-value">display: none</span>"&gt;</span><span class="html-tag">&lt;/span&gt;</span></td></tr><tr><td class="line-number" value="90"></td><td class="line-content">                    <span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="91"></td><td class="line-content">                    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">user_info</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-user-info dropdown</span>"&gt;</span></td></tr><tr><td class="line-number" value="92"></td><td class="line-content">                        <span class="html-tag">&lt;a <span class="html-attribute-name">class</span>="<span class="html-attribute-value">dropdown-button</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://home.cnblogs.com/" rel="noreferrer noopener">https://home.cnblogs.com/</a>"&gt;</span></td></tr><tr><td class="line-number" value="93"></td><td class="line-content">                            <span class="html-tag">&lt;img <span class="html-attribute-name">id</span>="<span class="html-attribute-value">user_icon</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-avatar</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/aggsite/avatar-default.svg" rel="noreferrer noopener">/images/aggsite/avatar-default.svg</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">用户头像</span>" /&gt;</span></td></tr><tr><td class="line-number" value="94"></td><td class="line-content">                        <span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="95"></td><td class="line-content">                        <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">dropdown-menu</span>"&gt;</span></td></tr><tr><td class="line-number" value="96"></td><td class="line-content">                            <span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navblog-myblog-text</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" rel="noreferrer noopener">https://passport.cnblogs.com/GetBlogApplyStatus.aspx</a>"&gt;</span>我的博客<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="97"></td><td class="line-content">                            <span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://home.cnblogs.com/" rel="noreferrer noopener">https://home.cnblogs.com/</a>"&gt;</span>我的园子<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="98"></td><td class="line-content">                            <span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://account.cnblogs.com/settings/account" rel="noreferrer noopener">https://account.cnblogs.com/settings/account</a>"&gt;</span>账号设置<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="99"></td><td class="line-content">                            <span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0)</a>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navbar_lite_mode_toggle</span>" <span class="html-attribute-name">title</span>="<span class="html-attribute-value">简洁模式会使用简洁款皮肤显示所有博客</span>"&gt;</span></td></tr><tr><td class="line-number" value="100"></td><td class="line-content">    简洁模式 <span class="html-tag">&lt;img <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navbar_lite_mode_on</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/lite-mode-check.svg" rel="noreferrer noopener">/images/lite-mode-check.svg</a>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">hide</span>" /&gt;</span><span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">navbar_lite_mode_spinner</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">hide</span>"&gt;</span>...<span class="html-tag">&lt;/span&gt;</span></td></tr><tr><td class="line-number" value="101"></td><td class="line-content"><span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="102"></td><td class="line-content">                            <span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0)</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">account.logout();</span>"&gt;</span>退出登录<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="103"></td><td class="line-content">                        <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="104"></td><td class="line-content">                    <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="105"></td><td class="line-content">                    <span class="html-tag">&lt;a <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-anonymous</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://account.cnblogs.com/signup/" rel="noreferrer noopener">https://account.cnblogs.com/signup/</a>"&gt;</span>注册<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="106"></td><td class="line-content">                    <span class="html-tag">&lt;a <span class="html-attribute-name">class</span>="<span class="html-attribute-value">navbar-anonymous</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0);</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">account.login()</span>"&gt;</span>登录<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="107"></td><td class="line-content">                <span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="108"></td><td class="line-content">            <span class="html-tag">&lt;/ul&gt;</span></td></tr><tr><td class="line-number" value="109"></td><td class="line-content">        <span class="html-tag">&lt;/nav&gt;</span></td></tr><tr><td class="line-number" value="110"></td><td class="line-content">    <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="111"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="112"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="113"></td><td class="line-content">    <span class="html-comment">&lt;!--done--&gt;</span></td></tr><tr><td class="line-number" value="114"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">header</span>"&gt;</span></td></tr><tr><td class="line-number" value="115"></td><td class="line-content"></td></tr><tr><td class="line-number" value="116"></td><td class="line-content"><span class="html-comment">&lt;!--done--&gt;</span></td></tr><tr><td class="line-number" value="117"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">header</span>"&gt;</span></td></tr><tr><td class="line-number" value="118"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">headerText</span>"&gt;</span></td></tr><tr><td class="line-number" value="119"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">Header1_HeaderTitle</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">headermaintitle HeaderMainTitle</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/</a>"&gt;</span>一天不进步，就是退步!<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="120"></td><td class="line-content"><span class="html-tag">&lt;br&gt;</span></td></tr><tr><td class="line-number" value="121"></td><td class="line-content">Java小白踩坑录：笑谈Java开发必经的趟坑史https://www.imooc.com/read/66</td></tr><tr><td class="line-number" value="122"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="123"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="124"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="125"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="126"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="127"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">mylinks</span>"&gt;</span></td></tr><tr><td class="line-number" value="128"></td><td class="line-content"><span class="html-comment">&lt;!--done--&gt;</span></td></tr><tr><td class="line-number" value="129"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_sitehome</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/" rel="noreferrer noopener">https://www.cnblogs.com/</a>"&gt;</span></td></tr><tr><td class="line-number" value="130"></td><td class="line-content">博客园<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="131"></td><td class="line-content">&amp;nbsp;&amp;nbsp;&amp;nbsp;</td></tr><tr><td class="line-number" value="132"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="133"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_myhome</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/</a>"&gt;</span></td></tr><tr><td class="line-number" value="134"></td><td class="line-content">首页<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="135"></td><td class="line-content">&amp;nbsp;&amp;nbsp;&amp;nbsp;</td></tr><tr><td class="line-number" value="136"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="137"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="138"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_newpost</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" rel="noreferrer noopener">https://i.cnblogs.com/EditPosts.aspx?opt=1</a>"&gt;</span></td></tr><tr><td class="line-number" value="139"></td><td class="line-content">新随笔<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="140"></td><td class="line-content">&amp;nbsp;&amp;nbsp;&amp;nbsp;</td></tr><tr><td class="line-number" value="141"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="142"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_contact</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://msg.cnblogs.com/send/%E4%B8%80%E5%A4%A9%E4%B8%8D%E8%BF%9B%E6%AD%A5%EF%BC%8C%E5%B0%B1%E6%98%AF%E9%80%80%E6%AD%A5" rel="noreferrer noopener">https://msg.cnblogs.com/send/%E4%B8%80%E5%A4%A9%E4%B8%8D%E8%BF%9B%E6%AD%A5%EF%BC%8C%E5%B0%B1%E6%98%AF%E9%80%80%E6%AD%A5</a>"&gt;</span></td></tr><tr><td class="line-number" value="143"></td><td class="line-content">联系<span class="html-tag">&lt;/a&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</td></tr><tr><td class="line-number" value="144"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="145"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_rss</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0)</a>" <span class="html-attribute-name">data-rss</span>="<span class="html-attribute-value">https://www.cnblogs.com/davidwang456/rss/</span>"&gt;</span></td></tr><tr><td class="line-number" value="146"></td><td class="line-content">订阅<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="147"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_rss_image</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/rss/" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/rss/</a>"&gt;</span></td></tr><tr><td class="line-number" value="148"></td><td class="line-content">    <span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/skins/arrow/images/xml.gif" rel="noreferrer noopener">/skins/arrow/images/xml.gif</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">订阅</span>" /&gt;</span></td></tr><tr><td class="line-number" value="149"></td><td class="line-content"><span class="html-tag">&lt;/a&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</td></tr><tr><td class="line-number" value="150"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="151"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_nav_admin</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">menu</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://i.cnblogs.com/" rel="noreferrer noopener">https://i.cnblogs.com/</a>"&gt;</span></td></tr><tr><td class="line-number" value="152"></td><td class="line-content">管理<span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="153"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="154"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="155"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="156"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">mytopmenu</span>"&gt;</span></td></tr><tr><td class="line-number" value="157"></td><td class="line-content"></td></tr><tr><td class="line-number" value="158"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_stats_place_holder</span>"&gt;</span><span class="html-tag">&lt;script&gt;</span>loadBlogStats();<span class="html-tag">&lt;/script&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="159"></td><td class="line-content"></td></tr><tr><td class="line-number" value="160"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="161"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">leftcontent</span>"&gt;</span></td></tr><tr><td class="line-number" value="162"></td><td class="line-content"></td></tr><tr><td class="line-number" value="163"></td><td class="line-content"><span class="html-tag">&lt;DIV <span class="html-attribute-name">id</span>="<span class="html-attribute-value">leftcontentcontainer</span>"&gt;</span></td></tr><tr><td class="line-number" value="164"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog-calendar</span>" <span class="html-attribute-name">style</span>="<span class="html-attribute-value">display:none</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span><span class="html-tag">&lt;script&gt;</span>loadBlogDefaultCalendar();<span class="html-tag">&lt;/script&gt;</span><span class="html-tag">&lt;br&gt;</span></td></tr><tr><td class="line-number" value="165"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">sidebar_news</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">newsItem</span>"&gt;</span></td></tr><tr><td class="line-number" value="166"></td><td class="line-content">            <span class="html-tag">&lt;script&gt;</span>loadBlogNews();<span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="167"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="168"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">sidebar_c3</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="169"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog-sidecolumn</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="170"></td><td class="line-content">                    <span class="html-tag">&lt;script&gt;</span>loadBlogSideColumn();<span class="html-tag">&lt;/script&gt;</span><span class="html-tag">&lt;/DIV&gt;</span></td></tr><tr><td class="line-number" value="171"></td><td class="line-content"></td></tr><tr><td class="line-number" value="172"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="173"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">centercontent</span>"&gt;</span></td></tr><tr><td class="line-number" value="174"></td><td class="line-content"><span class="html-comment">&lt;!--done--&gt;</span></td></tr><tr><td class="line-number" value="175"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">post_detail</span>"&gt;</span></td></tr><tr><td class="line-number" value="176"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">post</span>"&gt;</span></td></tr><tr><td class="line-number" value="177"></td><td class="line-content">        <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">postTitle</span>"&gt;</span></td></tr><tr><td class="line-number" value="178"></td><td class="line-content">            <span class="html-tag">&lt;h1&gt;</span></td></tr><tr><td class="line-number" value="179"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">id</span>="<span class="html-attribute-value">cb_post_title_url</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">postTitle2 vertical-middle</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/p/3801642.html" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/p/3801642.html</a>"&gt;</span></td></tr><tr><td class="line-number" value="180"></td><td class="line-content">    <span class="html-tag">&lt;span&gt;</span>Java 授权内幕--转载<span class="html-tag">&lt;/span&gt;</span></td></tr><tr><td class="line-number" value="181"></td><td class="line-content">    </td></tr><tr><td class="line-number" value="182"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="183"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="184"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="185"></td><td class="line-content"><span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="186"></td><td class="line-content"><span class="html-tag">&lt;/h1&gt;</span></td></tr><tr><td class="line-number" value="187"></td><td class="line-content">        <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="188"></td><td class="line-content">        <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">cnblogs_post_body</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">blogpost-body blogpost-body-html</span>"&gt;</span></td></tr><tr><td class="line-number" value="189"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在信息安全性领域，授权是世界的的中心，因为它是控制个体（即人、进程和计算机）对系统资源的访问权限的过程。直到最近，在 Java 安全体系结构中相关的问题都是“这段运行中的代码的访问权限是什么？” 随着 Java 认证和授权服务（Java Authentication and Authorization Service，JAAS）的引入，这种情况改变了。JAAS 首先是作为 JDK 版本 1.3 的平台扩展，之后作为 JDK 1.4 及以后版本的核心部分。在 JAAS 中，相关问题变成了“运行这段代码的认证用户的访问权限是什么？”<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="190"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在本文中，将同时介绍老的以代码为中心的 Java 授权体系结构和新的以用户为中心的体系结构。我将首先对 Java 2 平台安全体系结构作一概述，重点放在这个体系结构如何利用两个基本概念 -- 安全策略和保护域 -- 来定义、组织和聚集静态和/或动态访问权限。然后详细分析 Java 2 平台安全体系结构的运行时访问检查功能的底层机制，包括堆栈检查和确定是否授予权限的遍历（traversal）机制。在了解了以代码为中心的授权模型是如何工作的后，我将转向 Java 授权和认证服务（JAAS）的以用户为中心的授权模型。在这里，我将重点放到基于 subject 的访问控制这一概念上，并展示在 JAAS 中，它是如何在原来 Java 2 平台安全体系结构的堆栈检查机制之上实现的。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="191"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>注意，本文假定读者熟悉 Java 平台（J2SE SDK 1.4）上的应用程序编程，以及企业应用程序安全性的基本概念。与 Java 平台的以代码为中心和以用户为中心的授权体系结构的所有概念都只作为介绍。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="192"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAKD2WB</span>"&gt;</span>以代码为中心的授权<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="193"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>Java 平台传统上是用来运行移动代码的，如 applet。为了保护系统资源不被这些从网络上下载到用户浏览器中的任意代码片段所破坏，applets 被限制到一个沙箱中，它们在这里以有限的一组权限运行 。另一方面，对于本地 Java 应用程序，很少会（如果会的话）安装将提供类似沙箱环境的安全管理器。因此，本地应用程序通常受到信任可以访问所有系统资源。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="194"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>JDK 1.x 模型和 Java 2 平台 SDK 版本 1.2 的新安全结构之间的最大区别是引入了新的、可配置的安全策略，这样就可以实现细化的和可管理的访问控制。所有代码（不管是本地还是下载的，不管是签名或者没有签名的）都可以受到定义良好的安全策略的约束，它为不同的代码授予（可能是重叠的）权限。同时，随着在 JVM 中引入了多进程能力（请参阅&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources</a>"&gt;</span>参考资料<span class="html-tag">&lt;/a&gt;</span>），出现了对基于用户的访问控制的要求。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="195"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>Java 2 平台安全体系结构背后的基本原理可以总结如下：一个系统级的&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>安全策略<span class="html-tag">&lt;/em&gt;</span>定义了按&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>保护域<span class="html-tag">&lt;/em&gt;</span>组织的执行代码的&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>访问权限<span class="html-tag">&lt;/em&gt;</span>(按照应用程序的需要）。安全策略用于访问控制检查，这是由 JVM 在运行时执行的。在本次导游中，我将逐一详细阐述这些概念。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="196"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="197"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDA4D2WB</span>"&gt;</span>访问权限作为类型化（typed）对象<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="198"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>在 Java 2 平台安全体系结构中，所有访问权限都是类型化的并且有层次结构，其根是抽象类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>java.security.Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。通常一个<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;包含一个目标（“由这个权限控制的操作将对谁执行？”）和一个操作（“如果这个权限允许的话，对这个目标将执行什么操作？”）。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="199"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在允许一段运行的代码对特定的“目标”执行特定的“操作”这一上下文中，一个重要的概念是代码不一定被授予与所需要完全一样的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>。相反，只要可以从实际授予这段代码的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中推断出或者隐含了所需要的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;就可以。例如，如果一段运行代码授予了读目录 /x 中所有文件的权限，那么它就不需要对目标文件 /x/in.xtx 执行&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>读<span class="html-tag">&lt;/em&gt;</span>操作的显式权限，因为前一个权限隐含了后者。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="200"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>显然，某个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是否隐含另一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的定义将取决于这两个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是如何定义的。至少，这两个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;必须为同一类型。不过，不能指望运行时进行进一步的判断，并且必须将这种隐含推断逻辑指派给所涉及的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类。运行时通过调用一个恰当地取名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的方法来查询&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的隐含推断逻辑。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="201"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAXF2WB</span>"&gt;</span>聚集的权限<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="202"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>新安全体系结构也引入了&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>聚集（aggregation<span class="html-tag">&lt;/em&gt;</span>）的概念。在 Java 2 平台上，可以聚集同一类型的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的多个实例。一组这种类型称为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。例如，一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可能包含两个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>java.io.FilePermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例，表示读取两个不同文件的特权。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="203"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>这样的类型化对象干净地封装了创建和维护一个集合并遍历这一集合的功能。不用在每次要检查权限时对每一个对象分别调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法，Java 运行时只是调用由&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象提供的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法并等待其响应。可以为所创建的每一个自定义&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象定义一种新的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类型。当然，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的具体实现取决于给定&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的特性。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="204"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDASH2WB</span>"&gt;</span>Permissions 对象<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="205"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>除了对特定的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类型有多个实例，任何给定的一段运行代码都将得到不同类型的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。 Java 2 平台安全体系结构为此以<span class="html-tag">&lt;code&gt;</span>Permissions<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的形式提供了一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象。一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permissions<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象是单个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例的&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>集合<span class="html-tag">&lt;/em&gt;</span>的&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>集合<span class="html-tag">&lt;/em&gt;</span>。<span class="html-tag">&lt;code&gt;</span>Permissions<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类还提供了一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。不过，要记住为了让一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;隐含另一个，它们必须是同一类型的。因此，调用<span class="html-tag">&lt;code&gt;</span>Permissions<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法会使后者首先在其内部集合中定位正确的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例（那个包含一组正确类型的<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的实例），然后调用由此获得的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法，并向它传递要检查的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="206"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="207"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDACKTPC</span>"&gt;</span>安全策略和保护域<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="208"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>适用于一个系统的安全策略实质上是一个良好定义的“仓库”，它存储了授予这个系统中不同实体的访问权限的断言。根据&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>保护域（protection domain<span class="html-tag">&lt;/em&gt;</span>）的经典定义（请参阅&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources</a>"&gt;</span>参考资料<span class="html-tag">&lt;/a&gt;</span>），域是由系统中当前获得授权的一个实体可以直接访问的一组对象所界定的（按照这个定义，实际上可以将 JDK 版本 1.1 中的 Java 沙箱想像为一个具有固定边界的保护域）。在此基础上构建的 Java 2 平台安全策略设计为根据<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;授权访问权限，而不是向单个的一段运行代码授权这种权限。因此，每一个类或者对象“属于”一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，安全策略对这个保护域授予了某种访问权限。重申&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的观点，一个特定的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;封装了一组类（例如，所有从特定位置上装载、并用特定密钥签名的所有类），它们的实例将会授予同样的一组权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="209"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>这种间接性（即，权限不是直接授予类和对象）背后的理由是可扩展性 -- 它应当可以改变和/或细化构成&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的定义，而不会影响权限的授予。（确实，JAAS&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>之前的 ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;只由“属于”它的代码描述，而 JAAS&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>后的 ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;还由运行代码的、经过认证的用户描述。由于每一位用户都分配到了设置了他或者她的权限的特定&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，进行用户认证可以使给定的一段代码根据当前认证用户而用不同的一组权限运行。我将在讨论 JAAS 授权体系结构时，对所有这些内容给予更详细的描述。）<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="210"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDARLTPC</span>"&gt;</span>保护域和代码源<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="211"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>显然，一定要能惟一地标识一段运行代码以保证它的访问权限没有冲突。运行代码的惟一标识属性共有两项：代码的来源（代码装载到内存所用的 URL）和代码的 signer 实体（由对应于运行代码的数字签名的一组公共密钥指定）。这两种特性的组合在 Java 2 平台安全体系结构中编写为给定运行代码的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。现在可以提供&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的更严格定义了：&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;及其访问权限。换一种说法，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;表示授予特定&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的所有权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="212"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>Java 运行时通过名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>java.security.Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的类（的具体扩展）设置&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;与授予它的权限之间的映射。这个类的默认扩展是<span class="html-tag">&lt;code&gt;</span>sun.security.provider.PolicyFile<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。正如其名字所表明的，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>sun.security.provider.PolicyFile<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;从一个文件中获得&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（由位置 URL 和 signer 标识别名）与授予它的权限之间的映射。可以通过环境变量&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>java.security.policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;将这个文件的位置作为输入提供给 JVM。&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类提供了一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getPermissions()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的方法，可以调用它以获得授予特定&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的一组权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="213"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAWNTPC</span>"&gt;</span>SecureClassLoader<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="214"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>一个类与&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>其 ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;之间的映射是在类第一次装载时设置的，并在类被垃圾收集之前不会改变。一个类通常是由一个名为<span class="html-tag">&lt;code&gt;</span>SecureClassLoader<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的特殊类装载的。&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecureClassLoader<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;首先从相应 URL 处装载字节，如果需要还会验证包围文档文件的数字签名。然后它调用上述&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getPermissions()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法获得授予类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的一个填充了静态绑定权限的异类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。然后<span class="html-tag">&lt;code&gt;</span>SecureClassLoader<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;创建新的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，传递&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;及其相关的权限作为其构造函数的参数（当然，这假定对于给定<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;还不存在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。如果用一个现有的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;装载类，那么就会重复使用它已经建立的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）<span class="html-tag">&lt;code&gt;</span>。<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;最后，用装载的类字节向 JVM 定义一个类，并在关联的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中维护一个引用指针。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="215"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>默认情况下，会创建一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，并作为“特殊”情况处理，即属于这个域的代码被认为是受信任的并可以获得特殊的权限。这称为&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>系统域<span class="html-tag">&lt;/em&gt;</span>并包括由&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>系统（应用程序）装载器、扩展装载器<span class="html-tag">&lt;/em&gt;</span>和&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>bootstrap 装载器<span class="html-tag">&lt;/em&gt;</span>装载的类。(有关 Java 类装载器的更多信息请参阅&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources</a>"&gt;</span>参考资料<span class="html-tag">&lt;/a&gt;</span>。）<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="216"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAKQTPC</span>"&gt;</span>动态权限<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="217"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>直到 Java 平台 1.3，都只能用（上面描述的）以&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和相关权限为参数的构造函数创建&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。这意味着授予特定<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的权限必须在构建时就已经知道，并且没有动态刷新所授予的一组权限的灵活性。然而在 Java 2 平台 SDK 1.4 中，<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可以同时封装（通过其构造函数传递的）静态权限和动态权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="218"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>动态权限是在权限检查时由生效的策略所授予的、并由&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;隐式地处理。对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>implies()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法时（实质上是对权限进行检查时），它调用安装的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getPolicyNoCheck()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。因而&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类提供了刷新所授予的一组权限并向调用<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;返回这个刷新的权限的可能。这保证了针对在构造时提供的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PermissionCollection<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和在那一瞬间绑定的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的组合进行权限检查。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="219"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="220"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAHSTPC</span>"&gt;</span>运行时访问检查<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="221"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>由一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的类负责实施系统安全策略。在默认情况下不安装安全管理器，必须通过一个在启动时传递给 JVM 的、名为<span class="html-tag">&lt;code&gt;</span>java.security.manager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的环境变量显式地指定。任何应用程序都可找到安装的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并调用它相应的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>check&amp;lt;XXX&amp;gt;<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。如果所要求的权限在给定运行时上下文中是授予的，那么调用将无声地返回。如果权限没有授予，那么将抛出一个<span class="html-tag">&lt;code&gt;</span>java.security.AccessControlException<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="222"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在 Java 1.1 的时代，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;通过其内部逻辑负责管理所有权限本身。因此，任何需要自定义逻辑进行访问决定的应用程序都必须实现并安装一个自定义的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。Java 2 平台安全体系结构通过引入一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的新类使这一切变得简单了，并更具有可扩展性。这个类的目的与&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是一样的，即它负责做出访问决定。当然，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>为了向后兼容性保留了 SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类，但是其更新的实现委派给了底层的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SecurityManager<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类进行的所有&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>check&amp;lt;XXX&amp;gt;<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法调用都解释为相应的<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象，并将它作为输入参数传递给&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="223"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAQUTPC</span>"&gt;</span>Java 程序中的执行线程<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="224"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>在 Java 程序的执行过程中，可能需要在不同的时间访问“受保护的”资源。当我谈到执行 Java 程序时，我的意思是在特定类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中（因而在特定的方法中，如&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>main()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）中启动、通过类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;到&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;、并“结束”于&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的执行线程。下面是一个 Java 程序执行的典型控制流程：<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="225"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>调用类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>main()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法 -&amp;gt;&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>main()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;C2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法 -&amp;gt;&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;C2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;3<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;C3<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法 -&amp;gt; ... -&amp;gt; 类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Cn-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法调用类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Cn<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="226"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>假定方法&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Cn<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;必须访问一个受保护的资源以完成其功能，它调用系统中生效的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;以确认是否可以继续请求的对特定“受保护的”资源的访问。如果&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;同意放行，那么就执行所要求的操作，控制返回给调用者（&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Cn-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法），它又将控制返回给其调用者（&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n-2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Cn-2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法），如此继续。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="227"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在 JVM 中，线程的控制流表示为&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>帧堆栈（stack of frame）<span class="html-tag">&lt;/em&gt;</span>。每个帧基本上维护有关特定&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>m&amp;nbsp;Ck<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法、它的类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;k<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;以及这个方法调用的变量/参数的信息。图 1 显示了一个典型的调用堆栈。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="228"></td><td class="line-content"><span class="html-tag">&lt;h5 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">fig1</span>"&gt;</span>图 1. 典型调用堆栈的屏幕快照<span class="html-tag">&lt;/h5&gt;</span></td></tr><tr><td class="line-number" value="229"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span></td></tr><tr><td class="line-number" value="230"></td><td class="line-content"><span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/Figure1.gif" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/Figure1.gif</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">表示为帧堆栈的控制流</span>" <span class="html-attribute-name">width</span>="<span class="html-attribute-value">298</span>"&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="231"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>上面堆栈中的每个类属于一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，它由其&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;惟一地标识。一般来说，这样遍历的一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;将包含<span class="html-tag">&lt;em&gt;</span>&amp;lt;=n<span class="html-tag">&lt;/em&gt;</span>个元素。（您可能还记得，一组中的每一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;都有相关的一组权限&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>-- P&amp;nbsp;i<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;.）像图 1 显示的这样一个调用堆栈快照将编写为（codified）为一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并由&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象提供的本机方法调用返回。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="232"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="233"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAX0TPC</span>"&gt;</span>访问检查内幕<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="234"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>最后得到的一组适用权限的算法是要计算所有权限的交集。换句话说，某一权限，只有与这个特定瞬间、这个线程的执行堆栈上出现的所有类<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;i<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相应的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>关联<span class="html-tag">&lt;/em&gt;</span>时，这个权限才适用于给定的执行线程。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="235"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>这种算法的正确性是很显然的。通过计算与调用堆栈上所有&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;s 相关联的权限集的交集，它保证了不会因为两个类中间的一个（系统/应用程序）调用另一个，而使系统类（通常与更大的 -- 如果不是全部的 -- 一组权限相关联）“泄露”权限给应用程序类（通常与更少的一组权限相关联）。基本上，属于能力更低的域的类不能通过调用属于能力更高的域的类而变得更强大，而属于能力更高的域中的类会在调用能力更低的类时损失其能力。有关这种算法的形式证明请参阅&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources</a>"&gt;</span>参考资料<span class="html-tag">&lt;/a&gt;</span>。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="236"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAY1TPC</span>"&gt;</span>访问控制方法<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="237"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>确定权限集的交集的算法是在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法中间接实现的。本质上，调用这个方法所发生的事情是对那一瞬间调用堆栈和一组相互交叠的权限进行快照。所请求的权限必须包含在交集结果中或者是它所隐含的。如果这种检查判断为&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>true<span class="html-tag">&lt;/em&gt;</span>，那么<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法就安静地返回，如果不是，那么就抛出一个异常。（显然，&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#fig1" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#fig1</a>"&gt;</span>图 1<span class="html-tag">&lt;/a&gt;</span>中描述的调用堆栈中最后一帧实际上是对<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的调用。）<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="238"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>注意，直到现在我还没有提到图 1 中描述的调用堆栈的线程起源。这个线程&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可能是由另一个线程&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;在其调用堆栈中的某一点上创建的，只要 JVM 为在系统中执行的每一个线程维护单独的调用堆栈。可以直观地假定，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;将继承&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用堆栈（不过只是&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;已经运行的那部分）以保证继承的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的权限集也与&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;自己的调用堆栈的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;取交集。这将保证子线程（这里是&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;2<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）不会偷偷地得到它的父线程（在这里是&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>T&amp;nbsp;1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）所拒绝的某个权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="239"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAL4TPC</span>"&gt;</span>跨域调用问题<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="240"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>如果属于能力更低的域的类调用属于能力更高的域中的类，就有可能出现奇怪的现象。能力更高的域（类），例如&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;拥有可以访问所需要的“受保护的” 资源的权限，如果它是由没有相关权限的、能力更低的域（类）&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n-1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;所调用的，它就不能访问这些资源了。如果&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;一定要访问受保护的资源才能工作怎么办？不应当有这样一种机制吗：在确定有效的权限集，让&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;n<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可以告诉安全系统忽略其调用者（及调用者的调用者，并上推到调用堆栈最上层的类）的权限？<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="241"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>现在，Java 2 平台安全体系结构提供了一种机制，提供的就是这种功能。&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类有一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的方法（实际上提供了这个方法的许多变种，但是基本思路是相同的），它用特殊的旗标标记调用堆栈中有关的帧。在这个执行线程中调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法时，只有在这个堆栈帧&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>中和它下面<span class="html-tag">&lt;/em&gt;</span>出现的类的权限集才会取交集。调用类和它的上级（即所有在它&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>上面<span class="html-tag">&lt;/em&gt;</span>的堆栈帧）的权限集都&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>不<span class="html-tag">&lt;/em&gt;</span>包括在交集计算中。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="242"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>不难看出为什么要包括在调用堆栈以下发生的所有类的权限集：需要考虑属于能力更高的域的类调用属于更能力更低的域的类的情况。更明确地说，需要防止能力更高的域 (&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;k<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;) 将其额外的能力传递给能力更低的域 (&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>C&amp;nbsp;k+1<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;)。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="243"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的所有变种都以一个类型为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的对象作为输入。这个对象必须有一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的方法，在调用堆栈中的当前帧特别做了如上所述的标记时，由运行时执行这个方法。因此，任何时候如果有一些代码，希望在执行时让它的权限&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>临时性<span class="html-tag">&lt;/em&gt;</span>地授予给调用堆栈帧前面的代码时，必须将代码包装为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的形式并用这个对象作为输入调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="244"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">dw-sidebar ibm-inset</span>"&gt;</span></td></tr><tr><td class="line-number" value="245"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAGBUPC</span>"&gt;</span>积极访问检查与懒惰访问检查<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="246"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>访问检查算法一直被描述为计算调用堆栈上所有<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;s 的权限集的交集。可以用积极（eager ）方式或者懒惰（lazy）方式计算这种交集。有关这两种方法的细节，请参阅所附的&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/sidefile.html" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/sidefile.html</a>"&gt;</span>Eager versus lazy access checks sidefile<span class="html-tag">&lt;/a&gt;</span>。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="247"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="248"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="249"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAVBUPC</span>"&gt;</span>调用堆栈优化<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="250"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>在&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#fig1" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#fig1</a>"&gt;</span>图 1<span class="html-tag">&lt;/a&gt;</span>中看到的调用堆栈快照（或者&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）是在对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>进行&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用时获得的。在内部，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;在确定这个调用堆栈时进行一些优化，以使访问检查循环尽可能地快。这些优化包括：<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="251"></td><td class="line-content"><span class="html-tag">&lt;ul <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-bullet-list</span>"&gt;</span></td></tr><tr><td class="line-number" value="252"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>返回的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;只到达（并包括）通过调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;特别标记的第一个堆栈帧。从前面对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用的讨论中显然可以看出这样做的原因。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="253"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>返回的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;s 不包括系统域。系统域定义为具有所有权限，所以不需要检查是否“隐含”了所需要的权限（它总是隐含的）。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="254"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>返回的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;都是惟一的（即如果多个堆栈帧对应于同一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，那么只会返回一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="255"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="256"></td><td class="line-content"><span class="html-tag">&lt;/ul&gt;</span></td></tr><tr><td class="line-number" value="257"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>如果搜索完当前&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并且没有抛出&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlException<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，那么将对这个线程在创建时从其父线程“继承”的<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;进行同样的搜索（&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;被继承，即一个孙子线程将继承它的所有上级的调用堆栈）。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="258"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDANEUPC</span>"&gt;</span>doPrivileged() 方法的变种<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="259"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>在前面看到调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法是用一个特殊旗标标识调用堆栈的当前帧，指明控制流中所有前面的帧都不进行访问检查。还看到调用堆栈快照（或者&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）是在对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;进行&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用时获得的。不过，这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;不一定就是应当用来确定是否授予所请求的权限的那一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>。<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;例如，请求可能是由客户机发起并发送给服务器进行处理。服务器通常代表客户机执行请求实施代码。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="260"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>因为服务器的一部分用于完成请求，如果它调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，那么返回的调用堆栈将是服务器的。显然，不希望（只） 使用服务器的<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;给客户机授权。（当然，希望保证服务器代码本身对试图访问的资源有相应的权限，不过更重要的是保证客户机对服务器代表它访问的资源有相应的权限）。服务器运行时通常是已经授予了权限，因此，真正希望使用的是在客户端向服务器发送请求时存在的客户端调用堆栈。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="261"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类提供了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的另一个变种，它以&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的实例作为输入。假定客户机设法获得了其<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的一个副本（&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类提供了实现这个目的的方法）并将它传递给服务器，服务器可以通过调用以从客户端获得的上述&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;作为输入的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，将请求的完成代码作为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;执行。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="262"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在这种情况下，权限检查的算法（假定在过程某处，在对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法调用后，调用了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;时）通过执行上述的循环推进，直到在堆栈中遇到了特别标记的帧，这时，调用作为输入传递的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。这个调用实质上会执行同一个算法，但是是对于在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中封装的调用堆栈（属于客户机）执行。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="263"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="264"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDASHUPC</span>"&gt;</span>为何要使用以用户为中心的授权？<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="265"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>Java 2 平台安全体系结构的以代码为中心的授权基于这样的假设，即必须保护用户不受外界影响。为了保证恶意 Java 程序（由世界上恶意破坏者编写的）不会损坏用户的系统，所有移动代码都视为不受信任的，并且那怕进行最无害的操作也要求具有特殊的访问权限。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="266"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>相反，JAAS 的以用户为中心的认证模型是以保护世界不受用户影响的思路开发的。随着越来越多的移动和企业网络的出现，&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>信任<span class="html-tag">&lt;/em&gt;</span>概念有了不同的定义。在现实生活中，如果我信任某人 X 多于信任任何某人 Y，我将允许 X 有比 Y 更多的自由度。与此类似，如果一个 Java 应用程序将由多位用户使用（其中一些人实际上可能是恶意破坏者），那么最好将访问权限扩展为以&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>每个用户<span class="html-tag">&lt;/em&gt;</span>为基础。在这种新模型下，根据每位用户受信任的程度，对他或者她授权使用应用程序的某一范围的功能。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="267"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在下面一节中，我将重点介绍 Java 认证和授权服务（Java Authentication and Authorization Service）的以用户为中心的授权模型。虽然 JAAS 代表了 Java 平台安全体系结构的价值的翻天覆地的变化（即它从基于代码的模型转移到以用户为基础的模型），但是您会看到它的许多组件是熟悉的，尽管它们已经更新过以满足新的要求。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="268"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="269"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDACIUPC</span>"&gt;</span>JAAS 授权体系结构<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="270"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>JAAS 最初是作为 JDK 的一个扩展引入的，在版本 1.4 时成为了核心 JDK 的一部分。既然 JAAS 的目的是为了以每位用户为基础控制任何一段代码所能做的事情，因此需要首先能够准确和惟一地标识用户，换句话说，必须能够对他们进行认证。虽然在这里我不会在 JAAS 的“认证”方面花很多时间（有关这个主题的更多参考请参阅&amp;nbsp;<span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources" rel="noreferrer noopener">http://www.ibm.com/developerworks/cn/java/j-javaauth/#resources</a>"&gt;</span>参考资料<span class="html-tag">&lt;/a&gt;</span>），但是我将重点介绍它的一个核心组件：&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="271"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>就像以前一直说的，JAAS 是一种用以用户为中心进行授权的方式。在 JAAS 下，相关的问题不再是（像在 Java 2 平台安全体系结构中那样）“哪些是这段代码可以做的？”，而变为“这个认证用户的访问权限是什么？”因此，在本文的其余部分我将着重介绍 JAAS 中&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的作用，并深入讨论基于 subject 的访问控制。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="272"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="273"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAXIUPC</span>"&gt;</span>基于 subject 的访问控制<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="274"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span><span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类用于表示在给定系统中认证的用户（即填充的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是 JAAS 认证过程的结果）。在内部，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;包含一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象（和其他有关用户的信息），其中每个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象表示同一个用户的不同“身份”。例如，一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可能是我在一个终端系统上的用户 ID，而另一个可能是我在同一系统上所属于的“组”。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="275"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>在前面我介绍过&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>生效的 Policy<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是如何在系统中设置&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（以及由相关的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;标识的、“属于”它的类）和授予它的权限之间的映射的。JAAS 通过要求用一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;进一步描述&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（超越了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）而强化了这种概念。当系统&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Policy<span class="html-tag">&lt;/code&gt;</span>设置了这样的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（即除了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，还用一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;s 描述）和授予它的权限之间的映射后，如果要用<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的权限检查是否应当授予用户某个请求的权限，那么在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中包含的、与运行这段代码的认证用户相对应的<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象必须匹配在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中包含的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="276"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>既然 Java 2 平台已经有了干净的、高效的、使用调用堆栈（通过&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）的授权实现，那么保持它就容易得多了，只要提供一种机制将运行这段代码的用户的身份（如由用户的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;所提供的）“注入”到在权限检查瞬间调用堆栈中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="277"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>为此，JAAS&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类提供了两个静态方法，称为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。 这些方法期待的输入是认证的用户的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例和<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的一个实例（它的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法应当包含需要访问受保护的资源的业务逻辑）。基本思路是应用程序应当首先认证用户，对认证的用户建立了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;后，这个用户可能希望执行的每一个操作都包装为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;、并由应用程序作为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（就像方法自己的名字所表明的 --&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;！）执行。这两个方法之间有细微但是重要的区别，我们将在稍后介绍。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="278"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>为了能够将操作作为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;执行，必须在调用堆&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>栈中将 Subject<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>引入（或者注入）<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。这是在一个名为&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>DomainCombiner<span class="html-tag">&lt;/code&gt;</span>的专用接口的帮助下实现的，我将在开始&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的内幕之前介绍这个接口。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="279"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAEOUPC</span>"&gt;</span>DomainCombiner<span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="280"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>如前所述，对于一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;(一个调用堆栈），在 JAAS 中将&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;注入堆栈中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是通过实现<span class="html-tag">&lt;code&gt;</span>DomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;接口（一个特定的实现是&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）所处理的。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="281"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>注入是在将&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;作为构造函数参数传递以构建&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;时执行的。（作为参数传递给&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用的<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;被封装到&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象中，这种封装是在创建后者时，将&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;作为构造函数参数传递而完成的。）不过，真正的工作是在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>combine()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法中完成的。您将在稍后看到在这个方法中所发生的过程。<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="282"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="283"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDA3PUPC</span>"&gt;</span>Subject.doAs() 方法<span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="284"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;br&gt;</span>应用程序可能期待在认证用户之后调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法（即，当&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对用户是可用的时）。在内部，这个调用会产生下列活动：<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="285"></td><td class="line-content"><span class="html-tag">&lt;ol <span class="html-attribute-name">type</span>="<span class="html-attribute-value">1</span>"&gt;</span></td></tr><tr><td class="line-number" value="286"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>通过调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getContext()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法获得当前执行线程的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。注意，这个调用堆栈当然将会按前面描述的过程优化。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="287"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>创建封装了认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;is。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="288"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>用第 1 步的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和第 2 步的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;创建&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="289"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法，将第 2 步创建的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>（下面称为“ privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;”） 作为参数传递给它。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="290"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>运行时在内部保存 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并执行&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;对象的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。如前所述，在要访问受保护的资源时，需要调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="291"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>在内部，这个调用让&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;寻求当前调用堆栈（即&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）。运行时将返回包含第 4 步介绍的 privileged<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="292"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span><span class="html-tag">&lt;code&gt;</span>如前所述，在检查&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的帧的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomains<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是否允许所要求的权限之前，必须优化它。作为这个优化过程的一部分，要求封装在 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;em&gt;</span>结合<span class="html-tag">&lt;/em&gt;</span>当前在调用堆栈上的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomains<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和在 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中出现的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomains<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。结合过程如下：<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;ol <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alpha-list</span>" <span class="html-attribute-name">type</span>="<span class="html-attribute-value">a</span>"&gt;</span></td></tr><tr><td class="line-number" value="293"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>首先，优化 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;以删除所有&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>系统<span class="html-tag">&lt;/em&gt;</span>和重复的域。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="294"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>然后，优化当前调用堆栈上的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;以删除系统域以及已经出现在 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的域。这时，得到的两组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;就都没有系统域并且只包含不相同的域。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="295"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>对于从第 b 步得到的每一个&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>优化的<span class="html-tag">&lt;/em&gt;</span><span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，创建一个新的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，它复制了原来的属性如&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>CodeSource<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，而且还包含一组与在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中包含的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相关的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="296"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span>将优化的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;(从第 a 步得到的）附加到新创建的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;上（从第 c 步得到的）。用这些结合的<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;创建一个新的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControllerContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并返回它。<span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="297"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="298"></td><td class="line-content"><span class="html-tag">&lt;/ol&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="299"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>现在有了一个优化的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（其中这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;与当前调用堆栈中的每一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相关联），可以安全地调用它的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="300"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>checkPermission()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的调用使得运行时在如前所述的循环中遍历包含在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，并检查每一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;是否隐含所要求的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。这里值得注意的一个事实是检查的一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;将包括当前调用堆栈的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（已经与在认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中包含的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相关联）和 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（在调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法之前的调用堆栈），它还没有与包含在认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;相关联。所请求的<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;必须由所有这些&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;隐含。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="301"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="302"></td><td class="line-content"><span class="html-tag">&lt;/ol&gt;</span></td></tr><tr><td class="line-number" value="303"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的另一个效果是：可以通过&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法达到的任何代码都可以使用认证用户的身份（即<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;)。得到&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的方法如下：<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="304"></td><td class="line-content"><span class="html-tag">&lt;ol&gt;</span></td></tr><tr><td class="line-number" value="305"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>通过调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getContext()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法得到当前&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的句柄。在内部，这个方法以上面第 7 步同样的方式返回一个优化的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="306"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的 static&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getSubject()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法，将上面获得的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;作为输入参数传递。在内部，在进入下一步之前，它检查调用者是否有&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getSubject()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>javax.security.auth.AuthPermission。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="307"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>在内部，这个调用提取包含在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，从提取的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中提取出<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;并返回它。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="308"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="309"></td><td class="line-content"><span class="html-tag">&lt;/ol&gt;</span></td></tr><tr><td class="line-number" value="310"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>这样返回的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;表明了认证用户的身份，可以用于登录和/或数据级的授权等。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="311"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="312"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDA03UPC</span>"&gt;</span><span class="html-tag">&lt;code&gt;</span>Subject.doAsPrivileged() 方法<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="313"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span><span class="html-tag">&lt;br&gt;</span>像在&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法中看到的那样，在调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;之前，请求的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;必须由出现在调用堆栈中的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;s 所隐含。由于现在已经熟悉的原因，可能不总是希望是这种情况。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="314"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>正如在讨论&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法（这个方法以一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;为参数用于权限检查）的变种时提到的，<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;可能实际上表示一些服务器代表客户机执行的一些操作（更准确地说是作为客户机，即好像假定服务器具有它代表其执行操作的客户机的身份）。在这种情况下，在调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;之前调用堆栈的快照将包含服务器的内部代码的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，而让这些&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>必须隐含一个任意请求的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;显然没有意义。然而，所希望的是以下两种情况之一：<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="315"></td><td class="line-content"><span class="html-tag">&lt;ul <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-bullet-list</span>"&gt;</span></td></tr><tr><td class="line-number" value="316"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>第 I 种情况： 应当用在客户端调用堆栈上的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomains<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（当客户机向服务器发送请求的瞬间的快照）检查请求的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Permission<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（以及与用户身份相关联的服务器端调用堆&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>栈<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="317"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>第 II 种情况：应当只用与用户身份相关联的服务器端调用堆栈&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;进行权限检查。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="318"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="319"></td><td class="line-content"><span class="html-tag">&lt;/ul&gt;</span></td></tr><tr><td class="line-number" value="320"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>这个工具是通过&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类的 static&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法提供的。这个方法以一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;作为输入参数（就像&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法），不过，它还有一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;参数。这样，客户机可以安排取它自己的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;快照并发送给服务器，这样就可以将它传递&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>给 doAsPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用。这样可以处理上面第 I 种情况。否则，可以传递 null 代替<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，这样可以处理上述第 II 种情况。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="321"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>在内部，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法的步骤如下：<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="322"></td><td class="line-content"><span class="html-tag">&lt;ol&gt;</span></td></tr><tr><td class="line-number" value="323"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>创建一个中间的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，它指向传递的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（如果它是非 null 的），或者为 null 时指向一个新创建的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（有一个空的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;列表）。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="324"></td><td class="line-content"><span class="html-tag">&lt;li&gt;</span><span class="html-tag">&lt;code&gt;</span>从第 2 到 9 步之间的所有步骤都与以前一样。应当已经很清楚了，达到第 9 步时，最终将用于权限检查的这些&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;将是已经注入认证用户的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;列表的服务器调用堆栈的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;加上客户调用堆栈的（未改变的）&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的组合，或者是已经注入认证的用户的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;列表的服务器端调用堆栈上的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。这就是您要实现的。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/li&gt;</span></td></tr><tr><td class="line-number" value="325"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="326"></td><td class="line-content"><span class="html-tag">&lt;/ol&gt;</span></td></tr><tr><td class="line-number" value="327"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="328"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDAMDVPC</span>"&gt;</span><span class="html-tag">&lt;code&gt;</span>授权模型的矛盾<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="329"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span><span class="html-tag">&lt;br&gt;</span>我在这篇导游中讨论了 Java 授权内幕的大量基础内容。介绍了原来 Java 2 平台安全体系结构的基于代码的授权模型和在 JAAS 中引入的基于用户的授权框架。在本导游的最后一程，将介绍 JAAS 认证模型中的一个矛盾，并且我将描述一个解决它的实际方法。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="330"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDASDVPC</span>"&gt;</span><span class="html-tag">&lt;code&gt;</span>嗨，我的 Subject 到哪里去了？<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="331"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span><span class="html-tag">&lt;br&gt;</span>假设应用程序认证了用户并为她设置了一个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。用户请求某个功能，于是应用程序调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法并传递认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和结合了所需要功能的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。传递的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;为 null，保证只对调用堆栈中调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAsPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;之后的<span class="html-tag">&lt;code&gt;</span>ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;进行权限检查。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="332"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>考虑执行&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;实例的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>run()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法。可以从前面看到，在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中的一段代码应当可以请求并得到认证的<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。现在假定在这个方法中的控制流中某个地方，调用了&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法（特别是只接受<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>实例的<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）和在这个（嵌入的）&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用中执行的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;也需要提到认证用户的身份。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="333"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>与以前一样，第一步是通过调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getContext()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法得到当前&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的句柄。如在前面讨论<span class="html-tag">&lt;code&gt;</span>Subject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法时所说，与当前调用堆栈一同返回的还有一个&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>privileged<span class="html-tag">&lt;/em&gt;</span><span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（包含封装了认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;)，所以优化过程可以实际上将一组&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Principal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;从&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;注入到最后一&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>组 ProtectionDomain<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;列表中。不过，因为对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessController<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法进行了新的调用，分配了一个新的&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>privileged 元素<span class="html-tag">&lt;/em&gt;</span>，和用这个元素更新的当前执行线程作为最高层的 privileged 元素。因为没有向&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doPrivileged<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;调用传递&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，所以这个 privileged 元素没有任何 privileged&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;与之相关联，这与前面提到的情况不一样。对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的调用返回直到这个最高 privileged 元素的调用堆栈，因此，有关认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;信息在这个执行期间是不可用的。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="334"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>当然，一旦&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>inner<span class="html-tag">&lt;/em&gt;</span><span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;执行完，这个 privileged 元素就弹出堆栈，而对&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>getContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的所有调用都会再返回包含 privileged<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>AccessControlContext<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;（它又包含封装了认证&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectDomainCombiner<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;）。因此，当从<span class="html-tag">&lt;code&gt;</span>Subject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法中调用的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;完成后，将可以再次获得&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>认证的<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="335"></td><td class="line-content"><span class="html-tag">&lt;h3 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDATJVPC</span>"&gt;</span><span class="html-tag">&lt;code&gt;</span>实用解决<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/h3&gt;</span></td></tr><tr><td class="line-number" value="336"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>方法&amp;nbsp;<span class="html-tag">&lt;br&gt;</span>一种解决这个问题的方法是创建一个自定义&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectHolder<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类，它包装了一个 static&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ThreadLocal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;以存储当前&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;。&amp;nbsp;<span class="html-tag">&lt;em&gt;</span>认证的<span class="html-tag">&lt;/em&gt;</span><span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>可以在认证之后和调用&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法之前存储在这个&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectHolder<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中。这之后，所有执行的代码（直接或者间接，不管是否包装在另一个<span class="html-tag">&lt;code&gt;</span>PrivilegedAction<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;中）都将可以得到认证的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，只要让&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>SubjectHolder<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;返回&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>ThreadLocal<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;变量的内容。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="337"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>WebSphere 应用服务器提供了一个这种解决方法的例子。该应用服务器提供了一个帮助器类&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>WSSubject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;，它有 static&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;和<span class="html-tag">&lt;code&gt;</span>doAsPrivileged()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法，它们具有相同的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;类签名。在调用相应的&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>Subject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法之前，&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>WSSubject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法基本上将用户凭据与当前执行线程（可以用于 Enterprise JavaBean （EJB）调用）相关联。在离开&amp;nbsp;<span class="html-tag">&lt;code&gt;</span>WSSubject.doAs()<span class="html-tag">&lt;/code&gt;</span>&amp;nbsp;方法时，恢复原来的凭据并与执行线程相关联。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="338"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ibm-alternate-rule</span>"&gt;</span>&amp;nbsp;<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="339"></td><td class="line-content"><span class="html-tag">&lt;h2 <span class="html-attribute-name">id</span>="<span class="html-attribute-value">IDACMVPC</span>"&gt;</span><span class="html-tag">&lt;code&gt;</span>结束语<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/h2&gt;</span></td></tr><tr><td class="line-number" value="340"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span><span class="html-tag">&lt;br&gt;</span>本文深入分析了 Java 2 平台安全体系结构和 JAAS 的 Java 授权。完成本文（或者游览）后，应当可以对每一种授权框架的基础概念及它们的底层机制有全面的了解。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="341"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;code&gt;</span>Java 2 平台安全体系结构和 JAAS 共同构成了当前的 Java 授权模型。我介绍了 JAAS 授权模型中的一个矛盾之处，并描述了一种解决它的实用方法，并提供了它的现实世界实现的一个例子。<span class="html-tag">&lt;/code&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="342"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>转自：http://www.ibm.com/developerworks/cn/java/j-javaauth/<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="343"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="344"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">MySignature</span>"&gt;</span></td></tr><tr><td class="line-number" value="345"></td><td class="line-content">    <span class="html-tag">&lt;div&gt;</span></td></tr><tr><td class="line-number" value="346"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span><span class="html-tag">&lt;img <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://www.cnblogs.com/images/cnblogs_com/davidwang456/1372532/t_%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" rel="noreferrer noopener">https://www.cnblogs.com/images/cnblogs_com/davidwang456/1372532/t_%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg</a>" <span class="html-attribute-name">alt</span>="<span class="html-attribute-value">架构师日常笔记</span>"&gt;</span><span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="347"></td><td class="line-content"><span class="html-tag">&lt;p&gt;</span>微信公众号: 架构师日常笔记  欢迎关注！<span class="html-tag">&lt;/p&gt;</span></td></tr><tr><td class="line-number" value="348"></td><td class="line-content">    　<span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="349"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="350"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">clear</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="351"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_post_info_block</span>"&gt;</span></td></tr><tr><td class="line-number" value="352"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog_post_info</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="353"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">clear</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="354"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">post_next_prev</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="355"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="356"></td><td class="line-content">        <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">postDesc</span>"&gt;</span>posted on </td></tr><tr><td class="line-number" value="357"></td><td class="line-content"><span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">post-date</span>"&gt;</span>2014-06-21 23:18<span class="html-tag">&lt;/span&gt;</span>&amp;nbsp;</td></tr><tr><td class="line-number" value="358"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/" rel="noreferrer noopener">https://www.cnblogs.com/davidwang456/</a>"&gt;</span>一天不进步，就是退步<span class="html-tag">&lt;/a&gt;</span>&amp;nbsp;</td></tr><tr><td class="line-number" value="359"></td><td class="line-content">阅读(<span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">post_view_count</span>"&gt;</span>558<span class="html-tag">&lt;/span&gt;</span>)&amp;nbsp;</td></tr><tr><td class="line-number" value="360"></td><td class="line-content">评论(<span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">post_comment_count</span>"&gt;</span>1<span class="html-tag">&lt;/span&gt;</span>)&amp;nbsp;</td></tr><tr><td class="line-number" value="361"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://i.cnblogs.com/EditPosts.aspx?postid=3801642" rel="noreferrer noopener">https://i.cnblogs.com/EditPosts.aspx?postid=3801642</a>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">nofollow</span>"&gt;</span>编辑<span class="html-tag">&lt;/a&gt;</span>&amp;nbsp;</td></tr><tr><td class="line-number" value="362"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0)</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">AddToWz(3801642);return false;</span>"&gt;</span>收藏<span class="html-tag">&lt;/a&gt;</span>&amp;nbsp;</td></tr><tr><td class="line-number" value="363"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0)</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">reportManager.report({ currentUserId: '73cd724e-17be-4b4a-a660-08d822f07921', targetType: 'blogPost', targetId: '3801642', targetLink: 'https://www.cnblogs.com/davidwang456/p/3801642.html', title: 'Java 授权内幕--转载' })</span>"&gt;</span>举报<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="364"></td><td class="line-content">    <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="365"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="366"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="367"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="368"></td><td class="line-content"><span class="html-tag">&lt;script <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js" rel="noreferrer noopener">https://common.cnblogs.com/highlight/10.3.1/highlight.min.js</a>" <span class="html-attribute-name">async</span> <span class="html-attribute-name">onload</span>="<span class="html-attribute-value">markdown_highlight()</span>"&gt;</span><span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="369"></td><td class="line-content"><span class="html-tag">&lt;script&gt;</span></td></tr><tr><td class="line-number" value="370"></td><td class="line-content">    var allowComments = true, cb_blogId = 138600, cb_blogApp = 'davidwang456', cb_blogUserGuid = '3183fc7e-1f56-e211-aa8f-842b2b196315';</td></tr><tr><td class="line-number" value="371"></td><td class="line-content">    var cb_entryId = 3801642, cb_entryCreatedDate = '2014-06-21 23:18', cb_postType = 1;</td></tr><tr><td class="line-number" value="372"></td><td class="line-content">    updatePostStats(</td></tr><tr><td class="line-number" value="373"></td><td class="line-content">        [cb_entryId],</td></tr><tr><td class="line-number" value="374"></td><td class="line-content">        function(id, count) { $("#post_view_count").text(count) },</td></tr><tr><td class="line-number" value="375"></td><td class="line-content">        function(id, count) { $("#post_comment_count").text(count) })</td></tr><tr><td class="line-number" value="376"></td><td class="line-content">    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");</td></tr><tr><td class="line-number" value="377"></td><td class="line-content"><span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="378"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="379"></td><td class="line-content"><span class="html-tag">&lt;a <span class="html-attribute-name">name</span>="<span class="html-attribute-value">!comments</span>"&gt;</span><span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="380"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">blog-comments-placeholder</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="381"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">comment_form</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">commentform</span>"&gt;</span></td></tr><tr><td class="line-number" value="382"></td><td class="line-content">    <span class="html-tag">&lt;a <span class="html-attribute-name">name</span>="<span class="html-attribute-value">commentform</span>"&gt;</span><span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="383"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">divCommentShow</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="384"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">comment_nav</span>"&gt;</span><span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">span_refresh_tips</span>"&gt;</span><span class="html-tag">&lt;/span&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="about:blank" rel="noreferrer noopener">javascript:void(0);</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">return RefreshCommentList();</span>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">lnk_RefreshComments</span>" <span class="html-attribute-name">runat</span>="<span class="html-attribute-value">server</span>" <span class="html-attribute-name">clientidmode</span>="<span class="html-attribute-value">Static</span>"&gt;</span>刷新评论<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/p/3801642.html#" rel="noreferrer noopener">#</a>" <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">return RefreshPage();</span>"&gt;</span>刷新页面<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://www.cnblogs.com/davidwang456/p/3801642.html#top" rel="noreferrer noopener">#top</a>"&gt;</span>返回顶部<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="385"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">comment_form_container</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="386"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">ad_text_commentbox</span>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">ad_text_under_commentbox</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="387"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">ad_t2</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="388"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">opt_under_post</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="389"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">cnblogs_c1</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">under-post-card</span>"&gt;</span></td></tr><tr><td class="line-number" value="390"></td><td class="line-content">             <span class="html-tag">&lt;a <span class="html-attribute-name">onclick</span>="<span class="html-attribute-value">ga('send', 'event', 'banner', 'click', 'Pangle-C1')</span>" <span class="html-attribute-name">target</span>="<span class="html-attribute-value">_blank</span>" <span class="html-attribute-name">rel</span>="<span class="html-attribute-value">nofollow</span>" <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="https://c.gridsumdissector.com/r/?gid=gad_545_mzyfo0un&amp;ck=46&amp;adk=566&amp;autorefresh=__AUTOREFRESH__" rel="noreferrer noopener">https://c.gridsumdissector.com/r/?gid=gad_545_mzyfo0un&amp;ck=46&amp;adk=566&amp;autorefresh=__AUTOREFRESH__</a>"&gt;</span></td></tr><tr><td class="line-number" value="391"></td><td class="line-content">                <span class="html-tag">&lt;img <span class="html-attribute-name">style</span>="<span class="html-attribute-value">width: 300px; height: 250px;</span>" <span class="html-attribute-name">src</span>="<a class="html-attribute-value html-resource-link" target="_blank" href="https://img2020.cnblogs.com/blog/35695/202110/35695-20211008160624813-1694591598.jpg" rel="noreferrer noopener">https://img2020.cnblogs.com/blog/35695/202110/35695-20211008160624813-1694591598.jpg</a>" <span class="html-attribute-name">alt</span>="" <span class="html-attribute-name">onload</span>="<span class="html-attribute-value">impressC1()</span>" /&gt;</span></td></tr><tr><td class="line-number" value="392"></td><td class="line-content">             <span class="html-tag">&lt;/a&gt;</span></td></tr><tr><td class="line-number" value="393"></td><td class="line-content">    <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="394"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">under_post_card1</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="395"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">under_post_card2</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="396"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">HistoryToday</span>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">under-post-card</span>"&gt;</span><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="397"></td><td class="line-content">    <span class="html-tag">&lt;script <span class="html-attribute-name">type</span>="<span class="html-attribute-value">text/javascript</span>"&gt;</span></td></tr><tr><td class="line-number" value="398"></td><td class="line-content">       var commentManager = new blogCommentManager();</td></tr><tr><td class="line-number" value="399"></td><td class="line-content">       commentManager.renderComments(0);</td></tr><tr><td class="line-number" value="400"></td><td class="line-content">       fixPostBody();</td></tr><tr><td class="line-number" value="401"></td><td class="line-content">setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();</td></tr><tr><td class="line-number" value="402"></td><td class="line-content">       deliverC1C2();</td></tr><tr><td class="line-number" value="403"></td><td class="line-content">       loadNewsAndKb();</td></tr><tr><td class="line-number" value="404"></td><td class="line-content">LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);</td></tr><tr><td class="line-number" value="405"></td><td class="line-content">       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);</td></tr><tr><td class="line-number" value="406"></td><td class="line-content">       loadOptUnderPost();</td></tr><tr><td class="line-number" value="407"></td><td class="line-content">       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);</td></tr><tr><td class="line-number" value="408"></td><td class="line-content">    <span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="409"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="410"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="411"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="412"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="413"></td><td class="line-content"><span class="html-comment">&lt;!--done--&gt;</span></td></tr><tr><td class="line-number" value="414"></td><td class="line-content"><span class="html-tag">&lt;div <span class="html-attribute-name">class</span>="<span class="html-attribute-value">footer</span>"&gt;</span></td></tr><tr><td class="line-number" value="415"></td><td class="line-content">Copyright &amp;copy; 2021 一天不进步，就是退步</td></tr><tr><td class="line-number" value="416"></td><td class="line-content"><span class="html-tag">&lt;br /&gt;</span><span class="html-tag">&lt;span <span class="html-attribute-name">id</span>="<span class="html-attribute-value">poweredby</span>"&gt;</span>Powered by .NET 6 on Kubernetes<span class="html-tag">&lt;/span&gt;</span></td></tr><tr><td class="line-number" value="417"></td><td class="line-content"> Powered by: <span class="html-tag">&lt;a <span class="html-attribute-name">href</span>="<a class="html-attribute-value html-external-link" target="_blank" href="http://www.cnblogs.com/" rel="noreferrer noopener">http://www.cnblogs.com</a>" <span class="html-attribute-name">class</span>="<span class="html-attribute-value">footerlink</span>"&gt;</span>博客园<span class="html-tag">&lt;/a&gt;</span><span class="html-tag">&lt;br&gt;</span></td></tr><tr><td class="line-number" value="418"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="419"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="420"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="421"></td><td class="line-content"><span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="422"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="423"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="424"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="425"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="426"></td><td class="line-content">    <span class="html-tag">&lt;div <span class="html-attribute-name">id</span>="<span class="html-attribute-value">page_end_html</span>"&gt;</span></td></tr><tr><td class="line-number" value="427"></td><td class="line-content">        <span class="html-tag">&lt;script&gt;</span></td></tr><tr><td class="line-number" value="428"></td><td class="line-content">var _hmt = _hmt || [];</td></tr><tr><td class="line-number" value="429"></td><td class="line-content">(function() {</td></tr><tr><td class="line-number" value="430"></td><td class="line-content">  var hm = document.createElement("script");</td></tr><tr><td class="line-number" value="431"></td><td class="line-content">  hm.src = "//hm.baidu.com/hm.js?4e17ff51730e4ef6af191fd287efc2d2";</td></tr><tr><td class="line-number" value="432"></td><td class="line-content">  var s = document.getElementsByTagName("script")[0]; </td></tr><tr><td class="line-number" value="433"></td><td class="line-content">  s.parentNode.insertBefore(hm, s);</td></tr><tr><td class="line-number" value="434"></td><td class="line-content">})();</td></tr><tr><td class="line-number" value="435"></td><td class="line-content"><span class="html-tag">&lt;/script&gt;</span></td></tr><tr><td class="line-number" value="436"></td><td class="line-content">    <span class="html-tag">&lt;/div&gt;</span></td></tr><tr><td class="line-number" value="437"></td><td class="line-content"><br></td></tr><tr><td class="line-number" value="438"></td><td class="line-content">    <span class="html-tag">&lt;input <span class="html-attribute-name">type</span>="<span class="html-attribute-value">hidden</span>" <span class="html-attribute-name">id</span>="<span class="html-attribute-value">antiforgery_token</span>" <span class="html-attribute-name">value</span>="<span class="html-attribute-value">CfDJ8FO3GXnjClZGrNGr2Ic8Z1oG7SuH7cz9weQQSFqgrejnegCC35lcI8e-LdL3PbSt2gyp7NPLhxC1FzHvqFPf3GqajJ7A6RUNQ7Hfxq7lZw3YLi4n_A8s8gxHWzjB814MtTht_zxrzqIV8RsHj3BflHZqtCWy8A-Z42FKsjpkBeqLbXoWuw5kwuqTKePM-s9n2A</span>" /&gt;</span></td></tr><tr><td class="line-number" value="439"></td><td class="line-content"><span class="html-tag">&lt;/body&gt;</span></td></tr><tr><td class="line-number" value="440"></td><td class="line-content"><span class="html-tag">&lt;/html&gt;</span></td></tr><tr><td class="line-number" value="441"></td><td class="line-content"><span class="html-end-of-file"></span></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录学习博客</title>
      <link href="/2021/10/26/string-yuan-ma-mu-lu/"/>
      <url>/2021/10/26/string-yuan-ma-mu-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>这里采用两中编码方式<strong>UTF-16</strong>，<strong>ISO-8859-1(Latin1)</strong><br>UTF-16: 使用两个byte表示一个字符，而ISO-8859-1使用一个byte表示一个字符。<br>在String源码中</p><ul><li>@stable 如果一个字段的所有组成变量最多更改一次值，则该字段可以被注释为稳定的。HotSpot VM 依赖此注释将非空（相应的，非零）组件值提升为常量，从而根据此类值（例如常量折叠）实现代码的高级优化。</li><li>value 表示将字符串编码后的值，@Stable private final byte[]</li><li>coder 编码方式UTF-16,or 而ISO</li><li>COMPAT_STRINGS 是否是压缩的，由于ISO使用单字节编码，所以coer == ISO,COMPAT_STRINGS = true.反之亦然。<strong>默认为true</strong></li><li><em>在Java中char -&gt; byte以ASCII码形式转变</em>*</li></ul><h3 id="大端序与小端序"><a href="#大端序与小端序" class="headerlink" title="大端序与小端序"></a>大端序与小端序</h3><p><strong>Big-endian（大端序）</strong><br>数据的高位字节存放在地址的低端 低位字节存放在地址高端。<br><strong>Little-endian（小端序）</strong><br>数据的高位字节存放在地址的高端 低位字节存放在地址低端</p><ol><li><a href="indexOf_String.md">indexOf</a></li><li>[constructor]</li></ol>]]></content>
      
      
      <categories>
          
          <category> -String -Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SimpleAliasRegistry</title>
      <link href="/2021/10/26/simplealiasregistry/"/>
      <url>/2021/10/26/simplealiasregistry/</url>
      
        <content type="html"><![CDATA[<h1 id="SimpleAliasRegistrt整体概览"><a href="#SimpleAliasRegistrt整体概览" class="headerlink" title="SimpleAliasRegistrt整体概览"></a>SimpleAliasRegistrt整体概览</h1><p>首先时断言(链接)确保参数有效，使用ConcurrentHashMap保证并发安全。<br>注册别名都在同步块(P579 of Core Java Colume I - Fundamentals)中进行，<br>aliasMap&lt;alias,reggisteredName&gt;, 应用保存别名，注册名的Map<br>alias：代表别名 name：注册名 reggisteredName：已经在注册中的name<br><strong>注册规则</strong> </p><ul><li>1、如果想要注册的别名和注册名相同，相同的话没有意义，在aliasMap中删除</li><li>2、重复注册什么也不做，return ；</li><li>3、如果对同一个注册名另起别名，且允许则输出日志，进行到checkForAliasCircle检测是否循环<pre><code>  如果不允许另起别名，抛出异常  这里是否允许覆盖别名，protected 可以被子类更改</code></pre></li><li>4、checkForAliasCircle对注册别名前最终检查，<br></li></ul><pre><code>protected void checkForAliasCircle(String name, String alias){    if(hasAlias(alias,name)) // 参数互换    {        throw new IllegalStateException(...);        }    }// 判断给出的name是否与 key：alias所有能够链接到的【所有链式】// value:registeredName存在相等      public boolean hasAlias(String name, String alias){    String registeredName = this.aliasMap.get(alias);    return ObjectUtils.nullSafeEquals(registeredName,name)            || (registeredName != null &amp;&amp; hasAlias(name,registeredName));}</code></pre><p>举个例子，如果aliasMap = {‘1’,’2’,’2’,’3’}<br>alias -&gt; registeredName<br>1 -&gt; 2 -&gt; 3,如果存在 3 -&gt; 2, 2 -&gt; 1, 3 -&gt;1，其中任意一个则构成循环<br>3 -&gt; 2, 2 -&gt; 1, 3 -&gt;1代表 如果存在 3 -&gt; 2 -&gt; 1 中任意一条链<br>checkForAliasCircle调用hasAlias(alias,name)，表示反向<br>hasAlias表示任意一条链， 合起来就是测试是否构成循环</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> com.springboot.core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NestedRuntimeException</title>
      <link href="/2021/10/26/nestedruntimeexception/"/>
      <url>/2021/10/26/nestedruntimeexception/</url>
      
        <content type="html"><![CDATA[<h2 id="contains函数"><a href="#contains函数" class="headerlink" title="contains函数"></a>contains函数</h2><p>异常类东西不多，其中contains函数有一些东西<br>此函数检测此次异常及其原因中是否含有exType类型</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>函数主要依赖instancof进行检测<br><strong>instanceof</strong>的注解很详细：<br>如果指定的对象参数为非null，并且可以强制转换为此类对象表示的引用类型，而不引发ClassCastException，则该方法将返回true。否则返回false。  </p><h3 id="if-cause-this"><a href="#if-cause-this" class="headerlink" title="if(cause == this)"></a><strong>if(cause == this)</strong></h3><p>最开始我也很疑惑，F12看源码   private Throwable cause = this; 表示默认值是this<br>If this field is equal to this throwable itself,<br>it indicates that the cause of this throwable has not yet been initialized.<br>cause == this 表示未知原因，这很好理解<strong>由于原因还没有赋值，所以现在还不知道什么原因。</strong></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code>public boolean contains(@Nullable Class&lt;?&gt; exType)    {        if(exType == null)            return false;        // exType是否是本次异常的 类及其子类        if(exType.isInstance(this))            return true;        // 返回 Throwable 类的 cause成员        Throwable cause = getCause();        /**         * cause 还没有被赋值，表示位未知异常，         *  If this field is equal to this throwable itself,         *  it indicates that the cause of this throwable has not yet been         *  initialized.        */        if(cause == this)            return false;        // 查看原因中是否含有需要查找的有异常，因为需要使用contains，所以强制转换        if(cause instanceof NestedRuntimeException)            return ((NestedRuntimeException) cause).contains(exType);        else // 如果cause不能强制转换NestedRuntimeException        {            while(cause != null) // 直到没有原因的原因            {                if(exType.isInstance(cause))                    return true;                // 如果原因是自己，跳出无限循环，false自己not contains(exType)                if(cause.getCause() == cause)                    break; // 跳出while return false                cause = cause.getCause();            }            /**             * 如果 cause == null 跳到这里             * cause == Throwable.this 表示未知             */            return false;        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> com.springboot.beans.core </tag>
            
            <tag> cause </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/26/model/"/>
      <url>/2021/10/26/model/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-syntax-guide"><a href="#Markdown-syntax-guide" class="headerlink" title="Markdown syntax guide"></a>Markdown syntax guide</h1><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><h1 id="This-is-a-Heading-h1"><a href="#This-is-a-Heading-h1" class="headerlink" title="This is a Heading h1"></a>This is a Heading h1</h1><h2 id="This-is-a-Heading-h2"><a href="#This-is-a-Heading-h2" class="headerlink" title="This is a Heading h2"></a>This is a Heading h2</h2><h6 id="This-is-a-Heading-h6"><a href="#This-is-a-Heading-h6" class="headerlink" title="This is a Heading h6"></a>This is a Heading h6</h6><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>在一行的末尾添加两个或多个空格<br>，然后按回车键,即可创建一个换行 (<br>)。</p><h3 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h3><ul><li>Item 1</li><li>Item 2</li><li>Item 2a</li><li>Item 2b</li></ul><h3 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h3><ol><li>Item 1</li><li>Item 2</li><li>Item 3</li><li>Item 3a</li><li>Item 3b</li></ol><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><img src="/image/sample.png" alt="This is a alt text." title="This is a sample image."></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>You may be using <a href="https://markdownlivepreview.com/">Markdown Live Preview</a>.</p><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote><p>Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.</p><blockquote><p>Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.</p></blockquote></blockquote><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><table><thead><tr><th>Left columns</th><th align="center">Right columns</th></tr></thead><tbody><tr><td>left foo</td><td align="center">right foo</td></tr><tr><td>left bar</td><td align="center">right bar</td></tr><tr><td>left baz</td><td align="center">right baz</td></tr></tbody></table><h2 id="Blocks-of-code"><a href="#Blocks-of-code" class="headerlink" title="Blocks of code"></a>Blocks of code</h2><pre><code>let message = 'Hello world';alert(message);</code></pre><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p>This web site is using <code>markedjs/marked</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>indexOf(寻找相匹配字符串中第一个下标)</title>
      <link href="/2021/10/26/indexof-string/"/>
      <url>/2021/10/26/indexof-string/</url>
      
        <content type="html"><![CDATA[<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>value:原字符串</li><li>str:寻找的字符串<br>例如在value中寻找str第一个出现的位置。</li><li>@HotSpotIntrinsicCandidate ：表示可能被VM优化。<br>修改用<code>@HotSpotIntrinsicCandidate</code>注释的方法时，必须更新 HotSpot VM 实现中相应的内部代码以匹配注释方法的语义</li></ul><h3 id="indexOf-Nullable-String-str"><a href="#indexOf-Nullable-String-str" class="headerlink" title="indexOf(@Nullable String str)"></a><strong>indexOf(@Nullable String str)</strong></h3><p><strong>思路 :</strong><br>首先判断<a href="String%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95.md#%E7%BC%96%E7%A0%81">编码方式</a>  是否相同，如果相同，使用各自的编码方式<a href="#stringlatin1indexofbyte-value-byte-str"><code>StringLatin1.indexOf</code></a>,<code>StringUTF16.indexOf</code> 进行寻找下标。<br>如果不同则非为两种情况</p><ol><li>原字符串(value)是ISO，寻找的字符串(str)是UTF-16 -&gt; 这种情况不能寻找，<code>retrun -1</code>  </li></ol><p><strong>因为：</strong><br>2. value is UTF-16,str is ISO -&gt; 这种情况下indexOfLatin1函数寻找。</p><h4 id="StringLatin1-indexOf-byte-value-byte-str"><a href="#StringLatin1-indexOf-byte-value-byte-str" class="headerlink" title="StringLatin1.indexOf(byte[] value, byte[] str)"></a>StringLatin1.indexOf(byte[] value, byte[] str)</h4><p>首先排除不可比较情况：value不存在(return -1)，str不存在(return 0)任意匹配。<br>将实际比较委托给<code>indexOf(byte[] value, int valueCount,byte[] str, int strCount,int fromIndex)</code>注意参数不同。<br><strong>函数思路：</strong><br>首先在原始字符串value中通过<code>while</code>找出str中第一个字符<code>str[0]</code>位置<code>i</code>，从<code>i</code>开始比对剩余字符，<br>如果能够完整匹配，返回下标,否则找出下一个相符合的<code>i</code>,至到可能出现的最大位置<code>valueCount - strCount</code>。</p><h5 id="StringLatin1-indexOf代码"><a href="#StringLatin1-indexOf代码" class="headerlink" title="StringLatin1.indexOf代码"></a>StringLatin1.indexOf代码</h5><pre><code>public static int indexOf(byte[] value, byte[] str)    {        if(str.length == 0)        {            return 0;        }        if(value.length == 0)        {            return -1;        }        return indexOf(value, value.length, str,str.length, 0);    }//  实际寻找下标函数private static int indexOf(byte[] value, int valueCount,                               byte[] str, int strCount,                               int fromIndex)    {        byte first = str[0];        int max = valueCount - strCount; // 遍历到最大可能出现的位置        for(int i = fromIndex; i &lt;= max; i++) // 每次的起始比对位置        {            // value[i]保存的是第一个char对应的ASCII            if(value[i] != first)            {                // 寻找第一个相等的字符(注意不是字符串)，巧妙                while(++i &lt;= max &amp;&amp; value[i] != first);            }            if(i &lt;= max) // 尝试比对字符串            {                int j = i +1; // 找到的第一个字符的下一个字符，对应的字节编码位置                int end = j + strCount -1; // 指向找到的字符串的下一个字节                for(int k = 1; j &lt; end &amp;&amp; value[j] == str[k]; j++, k++); // 直到不是所要找的字节(j == end)                if(j == end) // 如果j != end 表示只是部分匹配，不是完整匹配                {                    return i; // 由于找出第一个匹配的下标，所以直接return                }            }        }        return -1;    }</code></pre><h3 id="StringUTF16-indexOfUnsafe"><a href="#StringUTF16-indexOfUnsafe" class="headerlink" title="StringUTF16.indexOfUnsafe"></a>StringUTF16.indexOfUnsafe</h3><p>与<a href="#stringlatin1indexofbyte-value-byte-str">StringLatin1.indexOf</a>思路相同，不同在于获取字符，由于是双字节编码。<br>会有不同<a href="String%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95.md">端序</a>,由端序不同，不同位置*pow(2,8)获取对应的ASCII。</p><h4 id="getChar代码"><a href="#getChar代码" class="headerlink" title="getChar代码"></a>getChar代码</h4><pre><code>static char getChar(byte[] value, int index)    {        assert index &gt;= 0 &amp;&amp; index &lt; length(value) :                "Trusted caller missed bounds check";        index &lt;&lt;= 1; // *2-&gt;变成字节形式        /**         * 如果高位在前，低维在后，则不变。如果相反，则高低位互换         * 高位*pow(2*0) + 低位 * pow(2*8) = ASCII -&gt;char         */        return (char) (((value[index++] &amp; 0xff) &lt;&lt; HI_BYTE_SHIFT)                        | ((value[index] &amp; 0xff) &lt;&lt; LO_BYTE_SHIFT));    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> -Java -String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java.lang.String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/26/hello-world/"/>
      <url>/2021/10/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GenerateBeanName</title>
      <link href="/2021/10/26/generatebeanname/"/>
      <url>/2021/10/26/generatebeanname/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在Spring中需要对每一个BeanDefinition(Bean对应储存的信息)生成唯一的name在BeanDefinitionRegistry中</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>对每个BeanDefinitionName默认使用类名/父类名/工厂名作为基础+分割符’#’ + 类对应hashCode(只有inner内部类存在) +加数字，由于使用类名作为基础名必然会出现重名  当重名时registry.containsBeanDefinition(id)，数字++。  </p><pre><code>String prefix = beanName + GENERATED_BEAN_NAME_SEPARATOR;        // registry.containsBeanDefinition(id) 只要重复(不是唯一) 就while执行 count++        while(counter == -1 || registry.containsBeanDefinition(id))        {            counter++;            id = prefix + counter;        }</code></pre><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code>/**     * 分隔符，为了是同名的class name or parent name唯一     * 添加‘#1’，‘#2’至到唯一     */    public static final String GENERATED_BEAN_NAME_SEPARATOR =            BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR;    /**     * 生成的名称在给定的bean factory中是唯一的,具体实现在     * {@link #generateBeanName(BeanDefinition, BeanDefinitionRegistry)}     * @param beanDefinition     * @param registry     * @return     */    public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)    {        return generateBeanName(beanDefinition,registry,false);    }    /**     *     * 如果是内部类，则添加hashCode确保唯一性，当没有类型，父类，工厂则报错     * @param beanDefinition the bean definition for generate a bean name     * @param registry 为了查看这个beanDefinition是否在注册表中     * the bean factory that the definition is going to be registered     * @param isInnerBean 当一个bean仅被用作另一个bean的属性     * @return     */    private static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry, boolean isInnerBean)    {        String generatedBeanName = beanDefinition.getBeanClassName();        if(generatedBeanName == null)        {            if (beanDefinition.getParentName() != null)            {                generatedBeanName = beanDefinition.getParentName();            }            else if (beanDefinition.getFactoryBeanName() != null)            {                generatedBeanName = beanDefinition.getFactoryBeanName();            }        }        if(!StringUtils.hasText(generatedBeanName))        {            throw new BeanDefinitionStoreException("Unnamed bean" +                    "definition specified neither 'class' nor 'parent' not 'factory-bean' - can't generate bean name");        }        if(isInnerBean) // 如果是内部类，则加上#hashCode,确保唯一性        {            return generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR                    + ObjectUtils.getIdentityHexString(beanDefinition);        }        return uniqueBeanName(generatedBeanName,registry);    }    /**     * 确保beanName唯一，只要{@code while(注册表中存在) {counter++ id = prefix + counter}}     * @param beanName the original bean name     * @param registry the Bean factory that the definition is gonging to be registered     * @return the unique bean name     */    private static String uniqueBeanName(String beanName, BeanDefinitionRegistry registry)    {        String id = beanName;        int counter = -1;        String prefix = beanName + GENERATED_BEAN_NAME_SEPARATOR;        // registry.containsBeanDefinition(id) 只要重复(不是唯一) 就while执行 count++        while(counter == -1 || registry.containsBeanDefinition(id))        {            counter++;            id = prefix + counter;        }        return id;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> com.springboot.beans.factory.support </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DefaultSingletonBeanRegistry</title>
      <link href="/2021/10/26/defaultsingletonbeanregistry/"/>
      <url>/2021/10/26/defaultsingletonbeanregistry/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这个类DefaultSingletonBeanRegistry提供了单例注册管理操作<br>这里单例<strong>处于某种状态，使用容器(数据结构)中显示</strong>，比如处于需要销毁，则存放在disposableBeans中<br>主要对几个容器进行说明</p><h3 id="singletonObjects"><a href="#singletonObjects" class="headerlink" title="singletonObjects"></a><strong>singletonObjects</strong></h3><p>保存现在有实例的单例名称与对象 Map&lt;String,Object&gt; = new ConcurrentHashMap&lt;&gt;(256) 支持并发操作</p><h3 id="singletonFactorys"><a href="#singletonFactorys" class="headerlink" title="singletonFactorys"></a><strong>singletonFactorys</strong></h3><p>单例工厂，用于创建单例，每当生成单例对象时，就从单例工厂中删除，因为是单例，所以只能有一个实例<br>添加单例工厂不在DefaultSingletonBeanRegistry中管理</p><h3 id="earlySingletonObjects"><a href="#earlySingletonObjects" class="headerlink" title="earlySingletonObjects"></a><strong>earlySingletonObjects</strong></h3><p>临时存放单例对象，当单例创建完后，从中删除。<br>例如：当需要获取单例对象时需要从<strong>某个容器获取对象</strong>，由于单例正在创建中，所以singletonObjects还没有对象，需要从单例工厂先取出单例对象保存在earlySingletonObjects中。<br>如果直接存放在singletonObjects中，在单例创建完后会发生冲突。</p><h3 id="registeredSingletons"><a href="#registeredSingletons" class="headerlink" title="registeredSingletons"></a><strong>registeredSingletons</strong></h3><p>单例注册表<br>当单例注册完成后，需要删除单例工厂与临时单例对象中对象的单例。<br><strong>registeredSingletons中的所有单例，不一定都有对象(有可能不在singletonObjects中)，当只添加单例工厂时，自动注册到单例注册表中，然而这里还没产生单例对象</strong></p><h3 id="disposableBeans"><a href="#disposableBeans" class="headerlink" title="disposableBeans"></a><strong>disposableBeans</strong></h3><p>需要销毁的单例<br>把单例添加到销毁单例中，不在DefaultSingletonBeanRegistry中管理</p><h3 id="containedBeanMap"><a href="#containedBeanMap" class="headerlink" title="containedBeanMap"></a><strong>containedBeanMap</strong></h3><p>保存bean之间包含关系Map&lt;String containingBeanName, Set<string containedbeanname="">&gt;<br>Set中的containedBeanName依赖于containingBeanName , containingBeanName包含containedBeanName<br>注册包含关系，不在DefaultSingletonBeanRegistry中管理.</string></p><h3 id="dependentBeanMap"><a href="#dependentBeanMap" class="headerlink" title="dependentBeanMap"></a><strong>dependentBeanMap</strong></h3><p>保存bean之间的依赖关系Map&lt;String beanName, Set<string dependentbeanname="">&gt;<br>注册依赖关系，不在DefaultSingletonBeanRegistry中管理.  </string></p><h3 id="dependenciesForBeanMap"><a href="#dependenciesForBeanMap" class="headerlink" title="dependenciesForBeanMap"></a><strong>dependenciesForBeanMap</strong></h3><p>与dependentBeanMap相反 {@code Map&lt;dependentBeanName,Set<beanname>}  </beanname></p><h3 id="查找依赖关系的方式"><a href="#查找依赖关系的方式" class="headerlink" title="查找依赖关系的方式"></a>查找依赖关系的方式</h3><p><strong>问题说明：</strong><br>    每个bean都可能依赖其他的bean，要高效搜索某个bean是否依赖另一个bean？<br>    DefaultSingletonBeanRegistry里面使用isDependent判断，三个参数，<br>    <strong>beanName, dependentBeanName</strong> : 判断beanName 是否依赖于dependentBeanName,<br>    第三个参数<strong>alreadySeen</strong> 表示搜索查看过bean, 搜索的Bean != dependentBeanName.</p><h4 id="搜索思路"><a href="#搜索思路" class="headerlink" title="搜索思路"></a>搜索思路</h4><p>首先查找beanName在依赖关系映射表dependentBeanMap中对应哪些依赖dependentBeans，查看dependentBeanName是否在dependentBeans中，如果在则return true,否则在查找dependentBeans中元素所对应的dependentBeans，至到查找到或者<br>所对应的dependentBeans为空(null)，没有依赖。这里设置<strong>alreadySeen</strong>记录查找过所对应依赖集(dependentBeanName)不含有<br>dependentBeanName的bean，由于bean之间的相互依赖关系含有重叠，两个不同的bean的依赖集含有多个相同的元素，这样查找第一个依赖集时，可以忽略哪些第一次出现过的元素。非常节省时间。</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><pre><code>private boolean isDependent(String beanName, String dependentBeanName, @Nullable Set&lt;String&gt; alreadySeen)    {        // 由于bean可能在多个层，搜索的按照一层一层，这样可以跳过在其他层所搜索过的bean的依赖集        if(alreadySeen != null &amp;&amp; alreadySeen.contains(beanName))        {            return false;        }        String canonicalName = canonicalName(beanName); // 找出对应的真是bean注册名，beanName 可能是别名        // 获取该bean的依赖        Set&lt;String&gt; dependentBeans = this.dependentBeanMap.get(canonicalName);        if(dependentBeans == null)        {            return false;        }        // 搜索依赖集中是否含有dependentBeanName        if(dependentBeans.contains(dependentBeanName))        {            return true;        }        /**         * 每次调用需要搜索的dependentBeanName不变，一个层(依赖集)一层搜索，         * &lt;p&gt;每一次的元素都是一个bean，每个bean都有自己的依赖集，每次查看依赖集是否拥有dependentBeanName         * alreadySeen记录搜索过的bean，因为bean可以被不同的层bean所依赖         * 如果到搜索的bean在alreadySeen，则跳过节省时间&lt;/p&gt;         */        for(String transitiveDependency : dependentBeans)        {            // 局部对象，函数返回后销毁            if(alreadySeen == null)            {                alreadySeen = new HashSet&lt;&gt;();            }            alreadySeen.add(beanName);            if(isDependent(transitiveDependency, dependentBeanName,alreadySeen))            {                return true;            }        }        return false;    }</code></pre><h4 id="DefaultSingletonBeanRegistry-源码"><a href="#DefaultSingletonBeanRegistry-源码" class="headerlink" title="DefaultSingletonBeanRegistry 源码"></a>DefaultSingletonBeanRegistry 源码</h4><pre><code>/** * 管理单例注册，不提供具体的bean创建过程 */public class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry{    /** 被抑制的异常最大数量,超过后不会添加到抑制异常Set */    private static final int SUPPRESSED_EXCEPTIONS_LIMIT = 100;    /**     * 被抑制的异常的容器     */    @Nullable    private Set&lt;Exception&gt; suppressedExceptions;    /**     * 保存创建后的单例实例 singletonFactory -&gt; earlySingletonObject -&gt; singlenObject     * &lt;p&gt;ConcurrentHashMap多于16个线程会被阻塞，     * {@code Map&lt;beanName,beanInstance}     * final : 表示singletonObjects不可以改变指向其他的类     */    private final Map&lt;String, Object&gt; singletonObjects =            new ConcurrentHashMap&lt;&gt;(256);    /**     * 单例工厂，用于创建单例，每当生成单例对象时，就从单例工厂中删除，因为是单例，所以只能有一个实例     * 添加单例工厂不在DefaultSingletonBeanRegistry中管理     */    private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactorys =            new HashMap&lt;&gt;(16);    /**     * 临时存放单例对象     * 当需要获取单例对象时需要从某个容器获取对象，由于单例正在创建中，所以singletonObjects还没有对象，需要从单例工厂先取出单例对象保存在earlySingletonObjects中。     * 如果直接存放在singletonObjects中，在单例创建完后会发生冲突     */    private final Map&lt;String,Object&gt; earlySingletonObjects =            new ConcurrentHashMap&lt;&gt;(16);    /**     * 单例注册表     * &lt;br&gt;LinkedHashSet ： 对数据操作后会排在末尾，上面的元素都是用的少，适合做缓存     * 当单例注册完成后，需要删除单例工厂与临时单例对象中对象的单例。     * registeredSingletons中的所有单例，不一定都有对象(有可能不在singletonObjects中)，     * 当只添加单例工厂时，自动注册到单例注册表中，然而这里还没产生单例对象     */    private final Set&lt;String&gt; registeredSingletons =            new LinkedHashSet&lt;&gt;(256);    /**     * 容器作为状态表示正在创建的bean     * {@code newSetFromMap(Map&lt;E, Boolean&gt; map) = map.keySet()}     * @see #beforeSingletonCreation(String beanName)     * @see #afterSingletonCreation(String beanName)     */    private final Set&lt;String&gt; singletonsCurrentlyInCreation =            Collections.newSetFromMap(new ConcurrentHashMap&lt;&gt;(16));    /**     * 不是正在创建的bean，在这个Set中     * @see #beforeSingletonCreation(String beanName)     * @see #afterSingletonCreation(String beanName)     */    private final Set&lt;String&gt; inCreationCheckExclusions =            Collections.newSetFromMap(new ConcurrentHashMap&lt;&gt;(16));    /** 需要销毁的bean */    private final Map&lt;String, Object&gt; disposableBeans =             new LinkedHashMap&lt;&gt;();    /**     * 保存bean之间包含关系Map&lt;String containingBeanName, Set&lt;String containedBeanName&gt;&gt;     * Set中的containedBeanName依赖于containingBeanName , containingBeanName包含containedBeanName     * 注册包含关系，不在DefaultSingletonBeanRegistry中管理.     */    private final Map&lt;String, Set&lt;String&gt;&gt; containedBeanMap =             new ConcurrentHashMap&lt;&gt;(16);    /** bean依赖关系映射 {@code Map&lt;String beanName, Set&lt;String dependentBeanName&gt;&gt;     * 注册依赖关系，不在DefaultSingletonBeanRegistry中管理.     */    private final Map&lt;String, Set&lt;String&gt;&gt; dependentBeanMap =             new ConcurrentHashMap&lt;&gt;(64);    /**     * 被依赖表     * 与dependentBeanMap相反 {@code Map&lt;dependentBeanName,Set&lt;beanName&gt;}     */    private final Map&lt;String, Set&lt;String&gt;&gt; dependenciesForBeanMap =            new ConcurrentHashMap&lt;&gt;(64);    /** 正在销毁单例 */    private boolean singletonsCurrentlyInDestruction = false;    /**     * 注册单例     * @param beanName the name of the bean     * @param singletonObject the existing singleton object     */    @Override    public void registerSingleton(String beanName, Object singletonObject)    {        Assert.notNull(beanName,"Bean name must not be null");        Assert.notNull(singletonObject,"Singleton object must not be null");        synchronized (this.singletonObjects)        {            Object oldObject = this.singletonObjects.get(beanName);            if(oldObject != null) // 存在value            {                throw new IllegalStateException("Could not register object ["                + singletonObject + "] under bean name '" + beanName + "': there is aleady object ["                + oldObject + "] bound");            }            // 添加到映射集            addSingleton(beanName,singletonObject);        }    }    /**     * 添加到单例注册表，单例对象     * &lt;p&gt;删除单例工厂，之前的单例对象     * @param beanName     * @param singletonObject     */    private void addSingleton(String beanName, Object singletonObject)    {        synchronized (this.singletonObjects)        {            this.singletonObjects.put(beanName,singletonObject); // 保存单例对象            this.singletonFactorys.remove(beanName); // 删除单例工厂            this.earlySingletonObjects.remove(beanName); // 删除之前的单例            this.registeredSingletons.add(beanName); // 添加单例到单例注册表        }    }    /**     * 如果beanName没有保存在singletonObjects，     * 添加到工厂，注册表，并从早期单例对象中移除     * @param beanName     * @param singletonFactory     */    protected void addSingletonFactory(String beanName, ObjectFactory&lt;?&gt; singletonFactory)    {        Assert.notNull(singletonFactory,"Singleton factory must not be null");        synchronized (this.singletonObjects)        {            if(!this.singletonObjects.containsKey(beanName))            {                this.singletonFactorys.put(beanName,singletonFactory);                this.earlySingletonObjects.remove(beanName);                this.registeredSingletons.add(beanName);            }        }    }    /**     * 获得单例     * @param beanName the name of the bean to look for     * @return     */    @Override    @Nullable    public Object getSingleton(String beanName)    {        return getSingleton(beanName,true);    }    /**     * 返回保存的单例 如果没有则-&gt; 早期单例(需要allowEarlyReference = true) -&gt; (需要allowEarlyReference = true)单例工厂     * @param beanName     * @param allowEarlyReference     * @return     */    private Object getSingleton(String beanName, boolean allowEarlyReference)    {        Object singletonObject = this.singletonObjects.get(beanName);        // 单例正在创建中        if(singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName))        {            // 之前的单例            singletonObject = this.earlySingletonObjects.get(beanName);            if(singletonObject == null &amp;&amp; allowEarlyReference)            {                synchronized (this.singletonObjects)                {                    singletonObject = this.singletonObjects.get(beanName);                    if(singletonObject == null)                    {                        singletonObject = this.earlySingletonObjects.get(beanName);                        if(singletonObject == null)                        {                            // 获得单例工厂                            ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactorys.get(beanName);                            if(singletonFactory != null)                            {                                singletonObject = singletonFactory.getObject();                                this.earlySingletonObjects.put(beanName,singletonObject); // 放在之前的单例中                                this.singletonFactorys.remove(beanName); // 从单例工场移除                            }                        }                    }                }            }        }        // 返回的是保存的单例，或者早期单例，或者单例工厂中的单例        return singletonObject;    }    /**     * 从给定的单例工厂中创建单例     * &lt;br&gt;如果创建失败，从单例注册表创建，并添加失败原因抛出throw异常     * @param beanName     * @param singletonFactory     * @return     */    public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)    {        Assert.notNull(beanName,"Bean name must not be null");        synchronized (this.singletonObjects)        {            Object singletonObject = this.singletonObjects.get(beanName);            if(singletonObject == null) // 如果需要创建的单例还没注册            {                // 如果正在destroySingletons()销毁单例                if(this.singletonsCurrentlyInDestruction)                {                    throw  new BeanCreationNotAllowedException(beanName,                            "Singleton bean creation not allowed while singletons of this factory are in destruction "                            + "(Do not request a bean from a BeanFactory in a destroy method implementation!)"                    );                }                // 正在创建单例                if(logger.isDebugEnabled())                {                    logger.debug("Creating shared instance of singleton bean '"+ beanName + "'");                }                beforeSingletonCreation(beanName); // 添加到正在创建的单例列表中                boolean newSingleton = false; // 新单例是否创建完毕标志                boolean recordSuppressedExceptions = (this.suppressedExceptions == null); //如果还没有异常                if(recordSuppressedExceptions) // 因为可能抛出 不能创建单例异常                {                    this.suppressedExceptions = new LinkedHashSet&lt;&gt;();                }                try                {                    // 从传入的单例工厂获得单例，并设置完成标志位true                    singletonObject = singletonFactory.getObject();                    newSingleton = true;                }                catch (IllegalStateException e) // 如果抛出异常则，从注册表得到单例                {                    singletonObject = this.singletonObjects.get(beanName);                    if(singletonObject == null)                    {                        throw e;                    }                }                catch (BeanCreationException e)                {                    if(recordSuppressedExceptions)                    {                        for(Exception suppressedException : this.suppressedExceptions)                        {                            // 添加创建失败的原因                            e.addRelatedCause(suppressedException);                        }                    }                    throw e;                }                finally                {                    // 清空抑制异常容器                    if(recordSuppressedExceptions)                    {                        this.suppressedExceptions = null;                    }                    afterSingletonCreation(beanName); // 标记为不是正在创建的单例                }                if(newSingleton)                {                    // 新创建的单例，标准操作                    addSingleton(beanName,singletonObject);                }            }            return singletonObject;        }    }    /**     * beanName是否正在创建     * @param beanName     * @return     */    private boolean isSingletonCurrentlyInCreation(String beanName)    {        return this.singletonsCurrentlyInCreation.contains(beanName);    }    /**     * 如果bean正在创建(inCreation = true)，添加到检查排除，否则移除     * @param beanName     * @param inCreation     */    public void setCurrentlyInCreation(String beanName, boolean inCreation)    {        Assert.notNull(beanName,"Bean name must not be null");        if(!inCreation) // 如果正在创建，添加到检查排除        {            this.inCreationCheckExclusions.add(beanName);        }        else        {            this.inCreationCheckExclusions.remove(beanName);        }    }    /**     * 判断是否bean正在创建     * @param beanName     * @return     */    public boolean isCurrentlyInCreation(String beanName)    {        Assert.notNull(beanName,"Bean name must not be null");        return (!this.inCreationCheckExclusions.contains(beanName)                &amp;&amp; isActuallyInCreation(beanName));    }    /**     * 是否正在创建的单例     * @param beanName     * @return     */    private boolean isActuallyInCreation(String beanName)    {        return isSingletonCurrentlyInCreation(beanName);    }    /**     * 创建单例前的回调     * &lt;p&gt;默认实现将单例注册为当前正在创建的&lt;/p&gt;     * &lt;p&gt;如果bean即不在&lt;b&gt;正在创建的单例中&lt;/b&gt;，也不在&lt;b&gt;不在创建创建的单例中&lt;/b&gt;&lt;/p&gt;     * 抛出BeanCurrentlyInCreationException异常     * @param beanName     */    protected void beforeSingletonCreation(String beanName)    {        if(!this.inCreationCheckExclusions.contains(beanName)                // add 已经含有的元素，返回false        &amp;&amp; !this.singletonsCurrentlyInCreation.add(beanName))        {            throw new BeanCurrentlyInCreationException(beanName);        }    }    /**     * 创建单例后回调。     * &lt;p&gt;默认实现将单例标记为非正在创建。     * &lt;p&gt;如果bean即不在&lt;b&gt;正在创建的单例中&lt;/b&gt;，也不在&lt;b&gt;不在创建创建的单例中&lt;/b&gt;&lt;/p&gt;     * @param beanName     */    protected void afterSingletonCreation(String beanName)    {        if(!this.inCreationCheckExclusions.contains(beanName)                // if Set not contain beanName returun false        &amp;&amp; !this.singletonsCurrentlyInCreation.remove(beanName))        {            throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation");        }    }    /**     * singletonObjects 是否含有beanName     * @param beanName the name of the bean to look for     * @return     */    @Override    public boolean containsSingleton(String beanName)    {        return this.singletonObjects.containsKey(beanName);    }    /**     * 注册表中的beanName {@code Set&lt;String&gt; to String[]}     * @return     */    @Override    public String[] getSingletonNames()    {        synchronized (this.singletonObjects)        {            return StringUtils.toStringArray(this.registeredSingletons);        }    }    /**     * 单例注册表的数量size     * @return     */    @Override    public int getSingletonCount()    {        synchronized (this.singletonObjects)        {            return this.registeredSingletons.size();        }    }    /**     * 获得单例的内部锁，避免在延迟初始化发生死锁     * @return     */    @Override    public Object getSingletonMutex()    {        return this.singletonObjects;    }    /**     * 移除单例，从单例对象，单例工厂，早期单例对象，单例注册表中删除     * @param beanName     */    protected void removeSingleton(String beanName)    {        synchronized (this.singletonObjects)        {            this.singletonObjects.remove(beanName);            this.singletonFactorys.remove(beanName);            this.earlySingletonObjects.remove(beanName);            this.registeredSingletons.remove(beanName);        }    }    /**     * 添加到销毁列表     * @param beanName     * @param bean     */    public void registerDisposableBean(String beanName, DisposableBean bean)    {        synchronized (this.disposableBeans)        {            this.disposableBeans.put(beanName, bean);        }    }    /**     * 注册包含关系 {@code containedBeanMap&lt;containingBeanName, containedBeanName&gt;}     * 也注册依赖关系     * @see #registerDependentBean (contained = beanName, dependent = containing)     * @param containedBeanName     * @param containingBeanName     */    public void registerContainedBean(String containedBeanName, String containingBeanName)    {        synchronized (this.containedBeanMap)        {            Set&lt;String&gt; containedBeans =                     // computedIfAbsent if value = null no key                     this.containedBeanMap.computeIfAbsent(containingBeanName,k -&gt; new LinkedHashSet&lt;&gt;(8));            if(!containedBeans.add(containedBeanName))            {                return;            }        }        registerDependentBean(containedBeanName, containingBeanName);    }    /**     * 注册依赖关系,被registerContainedBean调用，&lt;canonicalName(containedBeanName),containingBeanName(dependentBeanName)     * &lt;p&gt;dependentBeanMap,dependenciedForBeanMap&lt;/p&gt;     * @see #registerContainedBean(String containedBeanName, String containingBeanName)     * @param containedBeanName     * @param dependentBeanName     */    private void registerDependentBean(String containedBeanName, String dependentBeanName)    {        // 获取原始注册名        String canonicalName = canonicalName(containedBeanName);        synchronized (this.dependentBeanMap)        {            Set&lt;String&gt; dependentBeans =                    // value = LinkedHashSet 视图可以删除                    this.dependentBeanMap.computeIfAbsent(canonicalName, k -&gt; new LinkedHashSet&lt;&gt;(8));            if(!dependentBeans.add(dependentBeanName))            {                return; // 如果添加失败，就不执行dependenciedForBeanMap            }        }        synchronized (this.dependenciesForBeanMap)        {            Set&lt;String&gt; dependenciesForBean =                    this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -&gt;new LinkedHashSet&lt;&gt;(8));            dependenciesForBean.add(canonicalName);        }    }    /**     * 判断beanName是否依赖于dependentBeanName     * @see #isDependent(String, String, Set)      * @param beanName     * @param dependentBeanName     * @return     */    protected boolean isDependent(String beanName, String dependentBeanName)    {        synchronized (this.dependentBeanMap)        {            return isDependent(beanName,dependentBeanName,null);        }    }    /**     * 判断beanName是否依赖于dependentBeanName     * &lt;p&gt;每次调用需要搜索的dependentBeanName不变，一个层(依赖集)一层搜索，     * &lt;p&gt;每一次的元素都是一个bean，每个bean都有自己的依赖集，每次查看依赖集是否拥有dependentBeanName     * alreadySeen记录搜索过的bean，因为bean可以被不同的层bean所依赖     * 如果到搜索的bean在alreadySeen，则跳过节省时间&lt;/p&gt;     * @param beanName     * @param dependentBeanName     * @param alreadySeen     * @return     */    private boolean isDependent(String beanName, String dependentBeanName, @Nullable Set&lt;String&gt; alreadySeen)    {        // 由于bean可能在多个层，搜索的按照一层一层，这样可以跳过在其他层所搜索过的bean的依赖集        if(alreadySeen != null &amp;&amp; alreadySeen.contains(beanName))        {            return false;        }        String canonicalName = canonicalName(beanName); // 找出对应的真是bean注册名，beanName 可能是别名        // 获取该bean的依赖        Set&lt;String&gt; dependentBeans = this.dependentBeanMap.get(canonicalName);        if(dependentBeans == null)        {            return false;        }        // 搜索依赖集中是否含有dependentBeanName        if(dependentBeans.contains(dependentBeanName))        {            return true;        }        /**         * 每次调用需要搜索的dependentBeanName不变，一个层(依赖集)一层搜索，         * &lt;p&gt;每一次的元素都是一个bean，每个bean都有自己的依赖集，每次查看依赖集是否拥有dependentBeanName         * alreadySeen记录搜索过的bean，因为bean可以被不同的层bean所依赖         * 如果到搜索的bean在alreadySeen，则跳过节省时间&lt;/p&gt;         */        for(String transitiveDependency : dependentBeans)        {            // 局部对象，函数返回后销毁            if(alreadySeen == null)            {                alreadySeen = new HashSet&lt;&gt;();            }            alreadySeen.add(beanName);            if(isDependent(transitiveDependency, dependentBeanName,alreadySeen))            {                return true;            }        }        return false;    }    /**     * 依赖映射容器中是否有beanName对应的依赖     * @param beanName     * @return     */    protected boolean hasDependentBean(String beanName)    {        return this.dependentBeanMap.containsKey(beanName);    }    /**     * 返回String[]形式的依赖集     * &lt;b&gt;如果没有则返回空数组String[0]&lt;/b&gt;     * @param beanName     * @return     */    public String[] getDependentBeans(String beanName)    {        Set&lt;String&gt; dependentBeans = this.dependentBeanMap.get(beanName);        if(dependentBeans == null)        {            return new String[0];        }        synchronized (this.dependentBeanMap)        {            return StringUtils.toStringArray(dependentBeans);        }    }    /**     * 返回依赖于此beanName的所有bean名称     * @param beanName     * @return     */    public String[] getDependenciesForBean(String beanName)    {        Set&lt;String&gt; dependenciesForBean = this.dependenciesForBeanMap.get(beanName);        if(dependenciesForBean == null)        {            return new String[0];        }        synchronized (this.dependenciesForBeanMap)        {            return StringUtils.toStringArray(dependenciesForBean);        }    }    /**     * 销毁废弃单例列表中单例     * 设置正在销毁单例标志，将销毁委托给destroySingleton(String)     * 清空 所有表     */    public void destroySingletons()    {        if(logger.isTraceEnabled())        {            // log4j规定了默认的几个级别：trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal等。            // 如果 设置error 则 error 和 fatal级别会输出            logger.trace("Destroying singletons in " + this);        }        synchronized (this.singletonObjects)        {            this.singletonsCurrentlyInDestruction = true;        }        String[] disposableBeanNames;        synchronized (disposableBeans)        {            disposableBeanNames = StringUtils.toStringArray(disposableBeans.keySet());        }        for(int i = disposableBeanNames.length -1; i &gt;= 0; i--)        {            destroySingleton(disposableBeanNames[i]);        }        this.containedBeanMap.clear();        this.dependentBeanMap.clear();        this.dependenciesForBeanMap.clear();        clearSingletonCache();    }    /**     * 清空缓存,单例注册表，并设置销毁标志位 = false     */    private void clearSingletonCache()    {        synchronized (this.singletonObjects)        {            this.singletonObjects.clear();            this.singletonFactorys.clear();            this.earlySingletonObjects.clear();            this.registeredSingletons.clear();            this.singletonsCurrentlyInDestruction = false;        }    }    /**     * 在注册表中删除bean，在不同管理bean方式中销毁bean实例     * @param disposableBeanName     */    private void destroySingleton(String disposableBeanName)    {        removeSingleton(disposableBeanName);        // 为了在不同容器中销毁bean而设置的接口        DisposableBean disposableBean;        synchronized (this.disposableBeans)        {            // remove 返回删除key对应的value            disposableBean = (DisposableBean) this.disposableBeans.remove(disposableBeanName);        }        destroyBean(disposableBeanName,disposableBean);    }    private void destroyBean(String dispoableBeanName,@Nullable DisposableBean bean)    {        Set&lt;String&gt; dependencies;        synchronized (this.dependentBeanMap)        {            dependencies = this.dependentBeanMap.remove(dispoableBeanName);        }        // 如果销毁成功，则销毁依赖项的bean        if(dependencies != null)        {            if(logger.isTraceEnabled())            {                logger.trace("Retrieved dependent beans for bean '" + dispoableBeanName +dependencies);            }            for(String dependentBeanName : dependencies)            {                // 销毁依赖项注册表                destroySingleton(dependentBeanName);            }        }        // 销毁bean实例        if(bean != null)        {            try            {                bean.destroy();            }            catch (Throwable e)            {                if(logger.isWarnEnabled())                {                    logger.warn("Destruction of bean with name '" + dispoableBeanName + "' threw an exception",e);                }            }        }        // 在注册表中删除含有bean的bean，极其依赖        Set&lt;String&gt; containedBeans;        synchronized (this.containedBeanMap)        {            containedBeans = this.containedBeanMap.remove(dispoableBeanName);        }        if(containedBeans != null)        {            for(String containedBeanName : containedBeans)            {                destroySingleton(containedBeanName);            }        }        // 从其他bean的依赖项中删除已销毁的bean。        synchronized (this.dependentBeanMap)        {            // entrySet 返回的是视图，看作引用            for(Iterator&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;&gt; it = this.dependentBeanMap.entrySet().iterator(); it.hasNext();)            {                Map.Entry&lt;String,Set&lt;String&gt;&gt; entry = it.next();                // 依赖项注册表，在实现Entry接口中返回的是 引用，不是clone                Set&lt;String&gt; dependenciesToClean = entry.getValue();                // 在依赖项中删除此bean                dependenciesToClean.remove(dispoableBeanName);                // 如果此依赖关系中，所有的依赖都没了，则删除此条依赖关系                if(dependenciesToClean.isEmpty())                {                    it.remove(); // 删除此次的entry                }            }        }        // 删除已销毁bean的准备依赖项信息。        this.dependenciesForBeanMap.remove(dispoableBeanName);    }    /**     * 捕获异常到 抑制异常容器     * @param e     */    protected void onSuppressedException(Exception e)    {        synchronized (this.singletonObjects)        {            if(this.suppressedExceptions != null &amp;&amp; this.suppressedExceptions.size() &lt; SUPPRESSED_EXCEPTIONS_LIMIT)            {                this.suppressedExceptions.add(e);            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> com.springboot.beans.factory.support </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/26/constructor-string/"/>
      <url>/2021/10/26/constructor-string/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AccessController.doPrivileged到JAAS</title>
      <link href="/2021/10/26/accesscontroller.doprivileged-jaas/"/>
      <url>/2021/10/26/accesscontroller.doprivileged-jaas/</url>
      
        <content type="html"><![CDATA[<p>JAAS - Java Authentication and Authorization Service(Java认证与授权服务)</p><h1 id="写完SpringIOc-and-AOP-后可以按照"><a href="#写完SpringIOc-and-AOP-后可以按照" class="headerlink" title="写完SpringIOc and AOP 后可以按照"></a>写完SpringIOc and AOP 后可以按照</h1><p><a href="https://www.cnblogs.com/davidwang456/p/3801642.html">java授权</a>顺序写一遍java.security</p><h3 id="权限Permission"><a href="#权限Permission" class="headerlink" title="权限Permission"></a>权限Permission</h3><p>权限，通常一个Permission包含一个目标(对谁执行)和一个操作(执行什么操作)例如 perm1 = new FilePermission(p1,”read”); 对目标文件pi执行读操作。<br>里面有个重要的函数<code>implies</code>表示隐含的权限，例如读取目录/temp 这个权限隐含了，读取 /temp/aFile权限，必须显示的在<code>implies</code>这个方法中，每个<code>Permission</code>只有一个<code>implies</code>方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAAS </tag>
            
            <tag> Spring </tag>
            
            <tag> com.springboot.beans.factory.support </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串替换</title>
      <link href="/2021/06/13/stringutils-zhong-replace/"/>
      <url>/2021/06/13/stringutils-zhong-replace/</url>
      
        <content type="html"><![CDATA[<h3 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h3><p>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。<br>即URL必须能够定位到资源。</p><h3 id="org-springframework-core-io-AbstractResource-getURI"><a href="#org-springframework-core-io-AbstractResource-getURI" class="headerlink" title="org.springframework.core.io.AbstractResource#getURI()"></a>org.springframework.core.io.AbstractResource#getURI()</h3><p>在Spring中默认是由ResourceUtils类getURI()函数实现<code>new URI(StringUtils.replace(location, " ", "%20"));</code><br>只是将空格替换为网页中的转义空格，看来默认资源来自网页。  </p><h3 id="替换字符串中的字节"><a href="#替换字符串中的字节" class="headerlink" title="替换字符串中的字节"></a>替换字符串中的字节</h3><h4 id="首先检查条件："><a href="#首先检查条件：" class="headerlink" title="首先检查条件："></a>首先检查条件：</h4><p>原字符串或被替换的字符只要存在为空，或者新字符 = null 返回原字符串。<br>很好理解：</p><ul><li>如果原字符串为空，则表示没有字符串可替换。</li><li>如果需要被替换的字符为空，则表示没有需要替换的字符，不用改变原字符串。</li><li>如果替换的新字符串为<code>null</code>表示没有给出替换的字符串。<br>这是检测字符串是否为空<code>str != null &amp;&amp; !str.isEmpty()</code>，没有只是isEmpty()是因为如果字符串==<code>null</code>会抛出异常，这样的话只是会返回<code>false</code>但不会抛出异常，<code>isEmpty()</code>只是检测字节的长度<code>return value.length == 0;</code>value是byte数组类型<code>private final byte[] value;</code>虽然<code>isEmpty()</code>函数没有检测空指针的功能，但是当<strong>调用空指针的成员函数时JVM会调用</strong><code>Thread</code>类中的<code>dispatchUncaughtException</code>函数会调用<code>uncaughtException</code>中<pre><code>else if (!(e instanceof ThreadDeath)) { // e: "java.lang.NullPointException"              System.err.print("Exception in thread \""                               + t.getName() + "\" ");              e.printStackTrace(System.err);</code></pre>所以会抛出异常。<strong>关于虚拟机是怎么检测空指针我没有查到，猜测是JVM会标记值是null的对象</strong></li></ul><h4 id="替换准备"><a href="#替换准备" class="headerlink" title="替换准备"></a>替换准备</h4><ul><li>index，获取需要被替换的字节在原字符串中的位置下标–&gt;用于标记从哪里开始赋值不变字节(原字符串中不需要替换的字节)还是替换后的字节</li><li>sb，新字符串–&gt;由StringBuilder初始化</li><li>patlen， 需要替换字节长度–&gt;用于确定每次起始搜索位置</li><li>pos ，指定每次搜索出现未知的起始位置，默认0</li></ul><p><strong>变量说明</strong><br>String inString = 原字符串, String oldPattern == 需要被替换的字节, @Nullable String newPattern == 新字节  </p><p>这里只说下index和sb。<br><strong>index</strong><br>使用<a href="indexOf.md">index</a>函数获取<code>int index = inString.indexOf(oldPattern)</code><br><strong>sb</strong><br>如果oldPattern字节数 &gt; newPattern字节数，则<code>inString.length + 16</code>作为<a href="StringBuilder%E4%B8%AD%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.md">StringBuilder的构造参数</a>。</p><h4 id="while替换"><a href="#while替换" class="headerlink" title="while替换"></a>while替换</h4><p>非常巧妙的替换方法：每次将原字符串不变字符和newPattern交替赋值到新字符串sb中，并且更新起始搜索位置，再次检测是否还由需要替换的字节。当标志index == -1时，没有需要替换的字节，这时如果需要替换的字符不在末尾，则还有原字符串的剩余部分需要赋给新字符串。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code>public static String replace(String inString, String oldPattern, @Nullable String newPattern)    {        // 如果字符串或被替换的字符其中为空，新字符 = null 返回原字符串        if(!hasLength(inString) || !hasLength(oldPattern) || newPattern == null)        {            return inString;        }        int index = inString.indexOf(oldPattern);        if(index == -1) //没有需要替换的字符        {            return inString;        }        int capacity = inString.length();        if(newPattern.length() &gt; oldPattern.length())        {            // 由于StringBuilder 默认使用StringUTF16所以 + 16，而且append会保证容量            // AbstractStringBuilder#ensureCapacityInternal            capacity += 16;        }        StringBuilder sb = new StringBuilder(capacity);        int pos = 0; //原字符的位置，用于fromIndex        int patlen = oldPattern.length();        // 将原字符串不变字符 和 新字符 交替赋值到新字符串        while(index &gt;= 0) // 当index = -1 没有需要替换的字符时结束        {            /**             * 是赋值             * @see AbstractStringBuilder#append(char c) {@code val[j++] = (byte)c;}             */            sb.append(inString,pos,index); // 将原字符串中非替换字符赋值到新字符串            sb.append(newPattern); // 替换字符            pos = index + patlen;            index = inString.indexOf(oldPattern,pos);        }        // 如果需要替换的字符不在末尾，则还有原字符串的末尾需要赋给新字符串        sb.append(inString,pos,inString.length());        return sb.toString();    }</code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong><a href="append_StringBuilder.md">StringBuilder.append</a></strong>  </p>]]></content>
      
      
      <categories>
          
          <category> -Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录学习博客</title>
      <link href="/2021/06/13/ji-lu-xue-xi-bo-ke/"/>
      <url>/2021/06/13/ji-lu-xue-xi-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h3><p>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。<br>即URL必须能够定位到资源。</p><h3 id="org-springframework-core-io-AbstractResource-getURI"><a href="#org-springframework-core-io-AbstractResource-getURI" class="headerlink" title="org.springframework.core.io.AbstractResource#getURI()"></a>org.springframework.core.io.AbstractResource#getURI()</h3><p>在Spring中默认是由ResourceUtils类getURI()函数实现<code>new URI(StringUtils.replace(location, " ", "%20"));</code><br>只是将空格替换为网页中的转义空格</p>]]></content>
      
      
      <categories>
          
          <category> -Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2021/06/12/article-title/"/>
      <url>/2021/06/12/article-title/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Blog-Open-Source/blog-demo1.gif" alt="演示Demo"></p><h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/">https://shw2018.github.io</a>，博客演示：<a href="https://sunhwee.com/">sunhwee.com</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><p> <strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p><ul><li>修改了原主题的一些很多<code>bug</code>   2019.08.05</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</li><li>增加<code>留言板</code>功能          2019.08.05</li><li>在关于板块,加入<code>简历</code>功能页   2019.08.05</li><li>增加视听[视觉听觉影音]板块       2019.08.10</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</li><li>增加网站运行时间显示  2019.08.10</li><li>增加<code>动漫模型</code>     2019.08.10</li><li>整体替换Banner图片和文章特色图片   2019.08.10</li><li>增加分类<code>相册</code>功能         2019.08.29</li><li>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</li><li>修改了一些控件的参数   2019.09.01</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</li><li>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</li><li>添加页面樱花飘落动效            2019.09.09</li><li>添加鼠标点击烟花爆炸动效   2019.09.09</li><li>加入天气接口控件   2019.09.09</li><li>加入鼠标点击文字特效   2019.09.10</li><li>添加页面雪花飘落动效            2019.09.10</li><li> 添加在线聊天插件            2019.09.12</li><li> 持续更新…</li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads">Git</a>, 安装<a href="https://nodejs.org/en/">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong><br><escape></escape></p><table>  <tbody><tr>    <td><img width="100" src="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
