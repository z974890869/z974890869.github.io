<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>First Hexo Blog</title>
  
  <subtitle>Zhang Fata&#39;s Blog</subtitle>
  <link href="https://z974890869.com/atom.xml" rel="self"/>
  
  <link href="https://z974890869.com/"/>
  <updated>2021-06-13T02:21:51.924Z</updated>
  <id>https://z974890869.com/</id>
  
  <author>
    <name>张诗博</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录学习博客</title>
    <link href="https://z974890869.com/2021/06/13/ji-lu-xue-xi-bo-ke/"/>
    <id>https://z974890869.com/2021/06/13/ji-lu-xue-xi-bo-ke/</id>
    <published>2021-06-13T00:41:32.000Z</published>
    <updated>2021-06-13T02:21:51.924Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;简短介绍&quot;&gt;&lt;a href=&quot;#简短介绍&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="https://z974890869.com/2021/06/12/article-title/"/>
    <id>https://z974890869.com/2021/06/12/article-title/</id>
    <published>2021-06-12T02:37:52.000Z</published>
    <updated>2021-06-12T02:37:52.064Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://z974890869.com/2021/06/12/hello-world/"/>
    <id>https://z974890869.com/2021/06/12/hello-world/</id>
    <published>2021-06-12T01:23:37.037Z</published>
    <updated>2021-06-16T11:29:34.301Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BERT</title>
    <link href="https://z974890869.com/2021/05/30/bert/"/>
    <id>https://z974890869.com/2021/05/30/bert/</id>
    <published>2021-05-30T01:02:00.000Z</published>
    <updated>2021-06-19T09:04:33.105Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;首先使用bert获取词向量bert-as-service&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;安装Bert-as-Service&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;em&gt;pip install bert-serving-server &amp;nbsp;# server&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;br&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;pip install bert-serving-client &amp;nbsp;#
client, independent of `bert-serving-server&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;下载Bert预训练模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanxiao/bert-as-service&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;bert_uncased_L-12_H-768_A-12.zip&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;strong&gt;开启服务&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Anaconda 的cmd中启用&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;bert-serving-start -model_dir C:\Users\Administrator\Desktop\&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;自然语言处理&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;\uncased_L-12_H-768_A-12 -num_worker=1&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;其中，-model_dir 是预训练模型的路径，-num_worker 是线程数，表示同时可以处理多少个并发请求&lt;/span&gt;&lt;/li&gt;

&lt;/ul&gt;





&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;strong&gt;加载句向量&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;转到pycharm，创建一个py文件然后输入如下代码，如果产生了向量矩阵则说明配置成功&lt;/span&gt;&lt;/li&gt;

&lt;/ul&gt;



&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;from&lt;/span&gt; bert_serving.client &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BertClient

bc &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; BertClient()

vec &lt;/span&gt;= bc.encode([&lt;span style=&quot;color: #800000;&quot;&gt;&quot;yan&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;low&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(vec)&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;应用&lt;/h2&gt;
&lt;pre&gt;&lt;br&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;由于使用&lt;span lang=&quot;EN-US&quot;&gt;bert的预训练模型&lt;span lang=&quot;EN-US&quot;&gt;768维的输出不可改变，我们可以改变上述三个模型中&lt;span lang=&quot;EN-US&quot;&gt;LSTM，&lt;strong&gt;&lt;em&gt;&lt;span lang=&quot;EN-US&quot;&gt;self&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;span lang=&quot;EN-US&quot;&gt;.lstm = nn.LSTM(&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;span lang=&quot;EN-US&quot;&gt;input_size&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;span lang=&quot;EN-US&quot;&gt;=config.words_dim, # 768&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;用BERT替换gloVe 300&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;使用GloVe部分&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; os.path.isfile(args.vector_cache): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; vector_cache(存储器) = &quot;data/sq_glove300d.pt&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; stoi 序号对应的词{&#39;,&#39;: 0, &#39;.&#39;: 1, &#39;the&#39;: 2，...，&#39;sábato&#39;: 52282} vector = torch.Size([52283, 300]) dim = 300&lt;/span&gt;
    stoi, vectors, dim =&lt;span style=&quot;color: #000000;&quot;&gt; torch.load(args.vector_cache)
    TEXT.vocab.vectors &lt;/span&gt;= torch.Tensor(len(TEXT.vocab), dim) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 矩阵&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i, token &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; enumerate(TEXT.vocab.itos): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; itos token&lt;/span&gt;
        wv_index =&lt;span style=&quot;color: #000000;&quot;&gt; stoi.get(token, None)
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; if TEXT in glove300&lt;/span&gt;
        &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; wv_index &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; None:
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 则 token to vector like the weights (转换因子)&lt;/span&gt;
            TEXT.vocab.vectors[i] =&lt;span style=&quot;color: #000000;&quot;&gt; vectors[wv_index]
            match_embedding &lt;/span&gt;+= 1
        &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;随机生成 (-0.25,0.25)之间数值 dim个float&lt;/span&gt;
            TEXT.vocab.vectors[i] = torch.FloatTensor(dim).uniform_(-0.25, 0.25) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; _表示修改本身数据&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Error: Need word embedding pt file&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    exit(&lt;/span&gt;1)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;替换后&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;bc =&lt;span style=&quot;color: #000000;&quot;&gt; BertClient()
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; bc:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i, token &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; enumerate(TEXT.vocab.itos):  &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; itos token&lt;/span&gt;
        &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; bc.encode(token.split()).any():
            TEXT.vocab.vectors[i] &lt;/span&gt;= torch.tensor(bc.encode(token.split())) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;list 会分成字母&lt;/span&gt;
            match_embedding += 1
        &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 随机生成 (-0.25,0.25)之间数值 dim个float&lt;/span&gt;
            TEXT.vocab.vectors[i] = torch.FloatTensor(dim).uniform_(-0.25, 0.25)  &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; _表示修改本身数据&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Error: Need word embedding pt file&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    exit(&lt;/span&gt;1)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;if &lt;/span&gt;os.path.isfile(args.vector_cache): &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# vector_cache(&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;存储器&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;) = &quot;data/sq_glove300d.pt&quot;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;    # stoi &lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;序号对应的词&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;{&#39;,&#39;: 0, &#39;.&#39;: 1, &#39;the&#39;: 2&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;&#39;sábato&#39;: 52282} vector = torch.Size([52283, 300]) dim = 300&lt;br&gt;&lt;/span&gt;stoi, vectors, dim = torch.load(args.vector_cache)&lt;br&gt;    TEXT.vocab.vectors = torch.Tensor(&lt;span style=&quot;color: #000080;&quot;&gt;len&lt;/span&gt;(TEXT.vocab), dim) &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;矩阵&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;for &lt;/span&gt;i, token &lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;in &lt;/span&gt;&lt;span style=&quot;color: #000080;&quot;&gt;enumerate&lt;/span&gt;(TEXT.vocab.itos): &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# itos token&lt;br&gt;&lt;/span&gt;wv_index = stoi.get(token, &lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;None&lt;/span&gt;)&lt;br&gt;        &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# if TEXT in glove300&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;if &lt;/span&gt;wv_index &lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;is not None&lt;/span&gt;:&lt;br&gt;            &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;则&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt; token to vector like the weights (&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;转换因子&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;)&lt;br&gt;&lt;/span&gt;TEXT.vocab.vectors[i] = vectors[wv_index]&lt;br&gt;            match_embedding += &lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;else&lt;/span&gt;:&lt;br&gt;            &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;随机生成&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt; (-0.25,0.25)&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;之间数值&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt; dim&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;个&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;float&lt;br&gt;&lt;/span&gt;TEXT.vocab.vectors[i] = torch.FloatTensor(dim).uniform_(-&lt;span style=&quot;color: #0000ff;&quot;&gt;0.25&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;0.25&lt;/span&gt;) &lt;span style=&quot;color: #0c8818; font-style: italic;&quot;&gt;# _&lt;/span&gt;&lt;span style=&quot;color: #0c8818; font-style: italic; font-family: &#39;宋体&#39;,monospace;&quot;&gt;表示修改本身数据&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: #000080; font-weight: bold;&quot;&gt;else&lt;/span&gt;:&lt;br&gt;    &lt;span style=&quot;color: #000080;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #008080; font-weight: bold;&quot;&gt;&quot;Error: Need word embedding pt file&quot;&lt;/span&gt;)&lt;br&gt;    &lt;span style=&quot;color: #000080;&quot;&gt;exit&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;)&lt;/pre&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Knowledge Graph Embedding Based Question Answering</title>
    <link href="https://z974890869.com/2021/05/27/knowledge-graph-embedding-based-question-answering/"/>
    <id>https://z974890869.com/2021/05/27/knowledge-graph-embedding-based-question-answering/</id>
    <published>2021-05-27T11:57:00.000Z</published>
    <updated>2021-06-19T09:04:33.131Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;记录下学习过NLP，就是个作业草稿&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;本次选取论文&lt;sup&gt;[1]&lt;/sup&gt;《Knowledge Graph Embedding Based Question Answering》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;论文代码网址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/xhuang31/KEQA_WSDM19&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;概念介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Simple Question：If a natural language question only involves a single head entity and a single predicate in the knowledge graph, and takes their tail entity/entities as the answer, then this question is referred as a simple question&amp;nbsp; (只有一个主语，一个谓语的问题)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;下列概念均来自&lt;sup&gt;[2]&lt;/sup&gt; ：基于知识图谱的问答系统研究与应用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;知识图谱&lt;/strong&gt;：是一种新兴的数据存储方式，主要特征为使用 RDF 三元组格式进行存储。相比于文本知识，知识图谱具有更丰富的语义表达、更精确的数据内容、更高效的检索方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;实体识别：是指从非结构化的文本中识别出具有特定意义或者指代性强的实体，例如人名、地名、组织机构名、日期时间、专有名词等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;实体连接&lt;/strong&gt;：通过实体识别模块识别出问句中的实体信息后，需要将识别出的实体信息正确地指向到知识图谱中目标实体上去。一般实体链接系统会分别采用候选实体生成和实体消歧两个模块解决。候选实体生成模块的输入是上一节实体识别模块识别出的实体提及（Entity Mention），输出是知识图谱中与该提及相关的实体。该过程要求系统尽可能多的返回实体，提升系统召回率。候选实体生成模块通常采用词表匹配的方法。构造出的词表通常包含同义词信息、缩写全称映射信息与别名信息等。实体消歧模块的输入为候选实体生成模块产生的候选实体集和用户输入问句，输出是候选实体集中与问句最相关的实体，或者是经过排序后的候选实体集。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;关系检测（Relation Detection）&lt;/strong&gt;：是将用户输入映射到知识图谱某一关系的过程。通过实体链接步骤后，我们可以将问答范围缩小至该实体所在的知识图谱局部范围内。使用关系检测技术确定用户所提及的关系后，结合实体链接搜索出的实体，构造出（实体，关系）对，就可以完成单关系简单问题的回答。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;评价指标：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;精确度（Precision）&lt;/strong&gt;：代表了系统正确识别出的实体占全部识别出的实体中的比例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;召回率(Recall)&lt;/strong&gt;：指正确识别出的实体占数据集中全部实体的比例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;仅使用精确度和召回率无法全面的评价系统的好坏，使用 F-score 来平衡这两个指标的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这里简单介绍以下&lt;strong&gt;词向量&lt;/strong&gt;：想要详细了解可以参考《自然语言处理实战》Manning出版社的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194637780-645823523.png&quot; alt=&quot;&quot; width=&quot;558&quot; height=&quot;701&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;词向量可以看作一个权重列表，列表中每个权重都对应这个词在某个特定维度的含义。比如玛丽居里可以由五个维度(和平，有人情味，动物，概念化，女性)表示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;WordVector[‘Marie_Curie’] = [-0.46(placeness); 0.35(peopleness); 0.17(animalness);-0.32(conceptness); 0.26(femaleness)]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;词向量可以做数学运算，再把得到的结果向量转成词&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;数据集介绍&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;数据集使用 Freebase 的子集 FB2M和FB5M作为支撑知识图谱，问句总数达到了 10 万规模。FB2M 共包含 6701个关系类别。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;相比于其他的数据集，Simple Questions 一定程度上弥补了训练集无法覆盖知识图谱的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194726612-719447068.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;SimpleQuestions 数据集使用实体编号来代替实体名称 “/location/location/time_zones”用于表示知识图谱中的关系名称。&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;大纲图&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194738344-1224389446.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;从图中可以看出首先将知识图谱(KG)嵌入成两个低维vector, Predicates(谓语)，Entities(名词)，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;再根据数据集训练Predicate and Head Entity Model,详细的说这两个model的input都是question，输出分别为&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194900783-1258182983.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194916011-755921665.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;通过给定的函数计算&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194924008-432646579.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;，最后通过精心设计的评价函数，得到最符合fact作为answer。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Knowledge Graph Embedding&lt;/span&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;嵌入部分是用低维向量尽可能的表示原始数据。我们学习样本为使用TransE和TrainsR训练得到的知识图谱的嵌入空间。&lt;br&gt;下载网址：&lt;em&gt;&lt;a href=&quot;https://www.dropbox.com/s/o5hd8lnr5c0l6hj/KGembed.zip&quot;&gt;https://www.dropbox.com/s/o5hd8lnr5c0l6hj/KGembed.zip&lt;/a&gt;&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;里面的 entities_emb.bin, predicates_emb.bin是我们需要学习的嵌入空间&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Predicate and Head Entity Learning Models&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这是模型双向LSTM和Attention , LSTM 是为了考虑一个question中词的顺序，Attention考虑了每个词对于理解这个问题的重要程度不同。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527194942105-439915938.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;从上图可以看出首先将问题嵌入成带顺序的词向量&amp;nbsp;,j = 1-L, L为问题的单词词数量。这里应用的嵌入模型是GloVe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;args.vector_cache = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;data/sq_glove300d.pt&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; 

&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; os.path.isfile(args.vector_cache):&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果glove文件存在&lt;/span&gt;

    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; stoi : [3 &#39;the&#39;: 2，...，&#39;sábato&#39;: 52282]  词和对应的序号&lt;/span&gt;

    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; vector = torch.Size([52283, 300]) 每个词的向量表示 &lt;/span&gt;

    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; dim = 300 用dim个元素表示一个词&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    stoi, vectors, words_dim &lt;/span&gt;= torch.load(args.vector_cache) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载文件&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果文件不存在 报错并退出&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Error: Need word embedding pt file&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)

    exit(&lt;/span&gt;1&lt;span style=&quot;color: #000000;&quot;&gt;)
match_embedding &lt;/span&gt;= 0 &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 嵌入词的个数&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
TEXT.vocab.vectors &lt;/span&gt;= torch.Tensor(len(TEXT.vocab), words_dim) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 定义待数据集，申请内存空间&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i, token &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; enumerate(TEXT.vocab.itos): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 读取数据集中的词&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    wv_index &lt;/span&gt;= stoi.get(token, None) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果数据集中的词在GloVe中存在，则取下标&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; wv_index &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;not&lt;/span&gt; None: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果wv_index存在&lt;/span&gt;

        &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 将使用GloVe中的向量替换该词，并储存在待训练数据集中&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
        TEXT.vocab.vectors[i] &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; vectors[wv_index]

        match_embedding &lt;/span&gt;+= 1 &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 能在GloVe中找到的词个数+1&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 使用随机生成的向量代替在GloVe找不到对应的词&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
        TEXT.vocab.vectors[i] &lt;/span&gt;= torch.FloatTensor(words_dim).uniform_(-0.25, 0.25)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;为了在模型中应用将词向量矩阵移动到模型中&lt;strong&gt;&lt;em&gt;model.embed.weight.data.copy_(TEXT.vocab.vectors)&lt;/em&gt;&lt;/strong&gt;，&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;并且将文本变为，&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;x = self.embed(text)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;嵌入后的&amp;nbsp;通过双向LSTM得到&amp;nbsp;= [正向:反向]&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;outputs, (ht, ct) = self.lstm(x) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 通过双向LSTM的hj&lt;/span&gt;
其中self.lstm = nn.LSTM(input_size=&lt;span style=&quot;color: #000000;&quot;&gt;config.words_dim,

                       hidden_size&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;config.hidden_size,

                       num_layers&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;config.num_layer,

                       dropout&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;config.rnn_dropout,

                       bidirectional&lt;/span&gt;=True)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;再经过注意力机制&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195014809-1370897664.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;注意力机制由两部分组成，非线性部分&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;x = x.view(-1, words_dim) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 为了连接output进行view改变形状&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
attn_weights &lt;/span&gt;= F.softmax(self.attn(torch.cat((x, outputs), 1)), dim=0) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; alpha = softmax(q)&lt;/span&gt;
这里的self.attn =&lt;span style=&quot;color: #000000;&quot;&gt; nn.Sequential(

   nn.Linear(config.hidden_size &lt;/span&gt;* 2 + config.words_dim, config.hidden_size), &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; W&#39;[x:h] + bq&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
   self.nonlinear, &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; q = tanh(W&#39;[x:h] + bq)&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
   nn.Linear(config.hidden_size, &lt;/span&gt;1) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;变成1维输出为了softmax输入&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
)&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;和softmax分类部分&lt;strong&gt;&lt;em&gt;&lt;br&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;attn_applied = torch.bmm(torch.diag(attn_weights[:, 0]).unsqueeze(0), outputs.unsqueeze(0)) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;  alpha * h&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
outputs &lt;/span&gt;= torch.cat((x, attn_applied.squeeze(0)), 1) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; sj = [x:alpha * h]&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;分数最后由各个数据流经过注意力的均值预测谓语&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195025590-1779421976.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;scores = nn.functional.normalize(torch.mean(tags, dim=0), dim=1) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; p^ = mean(r)&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;将预测值与实际嵌入谓语之间使用MSE损失函数&lt;strong&gt;&lt;em&gt;criterion = nn.MSELoss()&lt;/em&gt;&lt;/strong&gt;差值反向传播训练模型。&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;loss =&lt;span style=&quot;color: #000000;&quot;&gt; criterion(model(batch), predicates_emb[batch.mid, :])

loss.backward() &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;反向传播&lt;/span&gt;

&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; clip the gradient：设置梯度阈值，防止梯度爆炸&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
torch.nn.utils.clip_grad_norm_(model.parameters(), args.clip_gradient)

optimizer.step() &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 梯度优化&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;经过训练多次模型的准确度不在提升，则此时为最好的模型：&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; update model&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; curr_accu &amp;gt; best_accu:  &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果精确度提升&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    best_accu &lt;/span&gt;= curr_accu &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 此时精确度为最好的精确度&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    best_loss &lt;/span&gt;= total_loss &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 记录loss&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    iters_not_improved &lt;/span&gt;= 0 &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 模型不在提升的次数刷新为0&lt;/span&gt;

    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; save model, delete previous &#39;best_snapshot&#39; files&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    torch.save(model, os.path.join(args.output, args.best_prefix &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;_best_model.pt&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;))

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果精确度没有提升&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    iters_not_improved &lt;/span&gt;+= 1 &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 模型不提升次数+1&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; iters_not_improved &amp;gt; patience: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果不提升次数达到设置次数&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
        early_stop &lt;/span&gt;= True &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 停止训练模型&lt;/span&gt;

        &lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527200301117-1866966072.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Head Entity Detection Model&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;由于&amp;nbsp;对应许多head entities,所以我们需要减少候选数量，这就是Head Entity Detection Model的作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195050324-274470610.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这是个简单的双向LSTM+softmax分类模型，这是模型是为了将所有的token(question 的分词)分为Entity Name Token （label = “I”）or Non Entity Name Token(label = “O”)即，该词是entity or non entity。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;我们先介绍两个数据文件&lt;strong&gt;&quot;annotated_fb_data_train&quot; and &#39;names.trimmed.txt&#39;&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&quot;annotated_fb_data_train&quot;&lt;/strong&gt;&lt;strong&gt;是&lt;/strong&gt;&lt;em&gt;SimpleQuestions&lt;/em&gt;数据集中data含有的文件每行含有四部分&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;我们忽略其中的网址，它代表freebase数据集。&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;我们把这四部分分为item[0],item[1],item[2],item[3]&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;item[0] 是主语；item[1] 是谓语；item[2] 是宾语；item[3] 是问题&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;其中主语和宾语是由他们对应的编号代替，例如：drum的编号为m.0f9rv4n&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&#39;names.trimmed.txt&#39;&lt;/strong&gt;是经过处理的数据，每一行是实体和他们对应的实体编号， 例如第一行&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;m.0f8vjgd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; skyshaper&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;关于&lt;strong&gt;&#39;names.trimmed.txt&#39;&lt;/strong&gt;经过怎样处理我们先不谈，现在只需要知道是处理SimpleQuestions 数据集中FB5M.names.txt文件得到。&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;首先将&lt;strong&gt;&#39;names.trimmed.txt&#39;&lt;/strong&gt;读入到程序中，并且储存为字典格式，方便实体和实体编号之间的联系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;names_map = [3&lt;span style=&quot;color: #000000;&quot;&gt;]

with open(os.path.join(args.output, &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;names.trimmed.txt&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;), &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) as f:

     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i, line &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; enumerate(f):

         items &lt;/span&gt;= line.strip().split(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\t&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
 
entity &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; items[0]

literal &lt;/span&gt;= items[1&lt;span style=&quot;color: #000000;&quot;&gt;].strip()

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; names_map.get(entity) &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt; None: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果entity在dict中还没有&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    names_map[entity] &lt;/span&gt;= [(literal)] &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 创建字典[2]&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果已经存在，添加value (&#39;m.0f9x06p&#39;, [&#39;long , long journey&#39;])&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    names_map[entity].append(literal)&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;该行问题中主语对应的实体名称保存到 &lt;strong&gt;&lt;em&gt;cand_entity_names&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; names_map.get(subject) &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; None:

    cand_entity_names &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; None

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; if subject in names_map to can_entity_names = names&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    cand_entity_names &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; names_map[subject]
该行问题中没有主语的情况，对应名称用&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&lt;unk&gt;&lt;/unk&gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;填充，并且label = O*&lt;span style=&quot;color: #000000;&quot;&gt;num of tokens

tokens &lt;/span&gt;= sent.split() &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 将question分词&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
label &lt;/span&gt;= [&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;O&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;] * len(tokens) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 先标记全不是entity&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
text_attention_indices &lt;/span&gt;= None &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 判断question中是否有subject&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
exact_match &lt;/span&gt;= False &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 是否精确匹配&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; text_candidate &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt; None &lt;span style=&quot;color: #0000ff;&quot;&gt;or&lt;/span&gt; len(text_candidate) == 0:&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果该行没有主语，label全为O&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&lt;unk&gt;&lt;/unk&gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;.join(label), exact_match&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;如果该行问题中有主语，则将主语在该问题中对应位置label设置为“I”&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;text_attention_indices = get_indices(tokens, text.split()) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; get_indices 返回text在tokens中的下标范围&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; text_attention_indices !=&lt;span style=&quot;color: #000000;&quot;&gt; None:

    exact_match &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; True

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; text_attention_indices:

        label[i] &lt;/span&gt;= &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;如果该行问题中有主语，但是该主语在数据集中没有找到，则使用fuzzy找出最相似的一个主语代替，如果找不到，则对应名称用&lt;strong&gt;&lt;em&gt;&#39;&lt;unk&gt;&#39;&lt;/unk&gt;&lt;/em&gt;&lt;/strong&gt;填充，并且&lt;strong&gt;&lt;em&gt;label = O*num of tokens&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; if no match&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; process.extractOne 提取匹配度最大的结果&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
        v, score &lt;/span&gt;= process.extractOne(sent, text_candidate, scorer=&lt;span style=&quot;color: #000000;&quot;&gt;fuzz.partial_ratio)

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;except&lt;/span&gt;: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; if no find&lt;/span&gt;

        &lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Extraction Error with FuzzyWuzzy : [2] || [2]&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.format(sent, text_candidate))

        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&lt;unk&gt;&lt;/unk&gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;.join(label), exact_match&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这样完成了标签的标记。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;为了消除噪音，删除不存在主语的问题，即删除掉全是O的question，并保存在dete_train.txt中&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;outfile = open(os.path.join(args.output, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;dete_train.txt&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;), &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;w&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; open(os.path.join(args.output, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;train.txt&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;), &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;):

    items &lt;/span&gt;= line.strip().split(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\t&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)

    tokens &lt;/span&gt;= items[6].split() &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;items[6] = train.label&lt;/span&gt;

    &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 因为question首字母是疑问词(what how where等)一定不是entity&lt;/span&gt;

    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; any(token != tokens[0] &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; token &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; tokens): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; (False False False False True False)&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
        outfile.write(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;{}\t{}\n&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;.format(items[5], items[6&lt;span style=&quot;color: #000000;&quot;&gt;]))

outfile.close()&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;到这里就完成对数据集的处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;此时的模型input是question，output是该问题中所有主语的位置为“I“，其他为”O“的Label。&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Joint Search on Embedding Spaces&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;到目前为止，我们已经对一个问题进行了预测谓词,主语和question中分词的标签，即（,label）。我们的目标是找出最匹配的fact（一个回答由主语谓语宾语组成）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;我们把Label为“I“对应的主语叫做candidate head entities(候选主语)，把含有候选主语的fact叫做candidate fact（候选语料）。由于主语和谓语相同的语料不一定只有一个，为了选择出最符合的一个fact。该论文中提出了Joint distance metric，利用知识图谱的特点:&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195152691-889583595.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195114934-137707424.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;前两项代表预测主语和谓语的偏差，第三项代表公式计算出与实际宾语的偏差，后两项表示Label是否正确标记了主语和非主语。可以看出该函数就是对上述三个模型的损失函数的最小值。也就是最符合的fact。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;我们来看一下完成的算法流程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195214506-1758985307.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;前1-9行可以同时进行训练，以减少时间。10-12行对一个new dataset应用之前的模型进行训练，得到&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195254297-1600655122.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; load pred model&lt;/span&gt;
model = torch.load(args.pred_model, map_location=&lt;span style=&quot;color: #0000ff;&quot;&gt;lambda&lt;/span&gt; storage, loc: storage.cuda(args.gpu)) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载Pred_model到GPU&lt;/span&gt;
scores = model(data_batch).cpu().data.numpy() &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 预测并保存为numpy类型，为了进行计算&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; range(batch_size):

    pred_emb[baseidx &lt;/span&gt;+ i] = scores[i] &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 保存到pred_emb&lt;/span&gt;
baseidx = baseidx + batch_size &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 下一次小批次&lt;/span&gt;
 
&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; load dete model&lt;/span&gt;
model = torch.load(args.dete_model, map_location=&lt;span style=&quot;color: #0000ff;&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; storage, loc: 
storage.cuda(args.gpu)) &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; load detemodel to GPU&lt;/span&gt;
answer = torch.max(model(data_batch), 1)[1].view(data_batch.ed.size()) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 预测并转变成与torchtext处理后的数据集相同大小&lt;/span&gt;
answer = np.transpose(answer.cpu().data.numpy()) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 转置&lt;/span&gt;
dete_result.extend(answer) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 存放在dete_result列表&lt;/span&gt;
 
&lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; load entity model&lt;/span&gt;
model = torch.load(args.entity_model, map_location=&lt;span style=&quot;color: #0000ff;&quot;&gt;lambda&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; storage, loc: storage.cuda(args.gpu))
scores &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; model(data_batch).cpu().data.numpy() 

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; range(batch_size): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 变成一行，每个元素是list(scores[i])&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
    head_emb[baseidx &lt;/span&gt;+ i] = scores[i] &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 保存到head_emb&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
baseidx &lt;/span&gt;= baseidx + batch_size &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 下一次小批次&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;13-14行是HED模型结果上找出最优fact&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; beta1, beta2, beta3,bete4 = .39, .43, .003, .017
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; head_mid_idx = {匹配的编号：name} + {不匹配编号：None}&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; i, head_ids &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; enumerate(head_mid_idx): &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 基于HEDmodel的结果寻找符合的fact集合C&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; i % 1000 == 1: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 处理进度&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;progress:  {}&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;.format(i / total_num), end=&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\r&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     answers =&lt;span style=&quot;color: #000000;&quot;&gt; []
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (head_id, name) &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; head_ids: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; dict遍历&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195323443-984576088.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;# &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;公式中的第二项&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;entity_score = np.sqrt(np.sum(np.power(entities_emb[mid_dic[head_id]] - head_emb[i], 2)))&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195337638-806945204.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;第四项&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt; name_score = -beta3 * fuzz.ratio(name, dete_tokens_list[i]) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; dete_tokens_list = 问题的文字形式&lt;/span&gt;

        &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (head_id, name) &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; tuple_topic: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果预测的主语是宾语，则减少分数&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;
            name_score &lt;/span&gt;-= .18

        &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; reach_dic.get(head_id) &lt;span style=&quot;color: #0000ff;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;not&lt;/span&gt; None: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 排除掉HEDnon的主语&lt;/span&gt;

            &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; pred_id &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; reach_dic[head_id]:  &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; reach_dic[head_id] = pred_id&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195345266-1747827227.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; #&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;最后一项&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp; filter_q = &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;数据集中从问题中提取的谓语（真实值）由于&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;pred_id &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;就是&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;Entitynon&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;部分&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt; pred_names = fuzz.ratio(pre_num_dic[pred_id].replace(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;).replace(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;_&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;), filter_q[i]) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; pre_num_dic = {pred_id:pred}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;br&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195355171-459928191.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;公式中的第一项&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;  pred_score = np.sqrt(np.sum(np.power(predicates_emb[pred_id] - pred_emb[i], 2)))&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202105/2092141-20210527195411953-1433789877.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; tai_score = np.sqrt(np.sum( &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 第三项&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt;                     np.power(predicates_emb[pred_id] + entities_emb[mid_dic[head_id]] - head_emb[i] - pred_emb[i], 2&lt;span style=&quot;color: #000000;&quot;&gt;)))
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt;                 joint_distance_metric = pred_score +  beta1 * entity_score + beta2 * tai_score + name_score - bete4 *&lt;span style=&quot;color: #000000;&quot;&gt;pred_names
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                answers.append((head_id, pred_id, joint_distance_metric ))
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; answers: &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 如果找到fact&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         answers.sort(key=&lt;span style=&quot;color: #0000ff;&quot;&gt;lambda&lt;/span&gt; x: x[2]) &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 以joint_distance_metric分数进行排序&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;         learned_head[i] = answers[0][0] &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 取分数最高的fact的主语&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         learned_pred[i] = answers[0][1] &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 取分数最高的fact的谓语&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         learned_fact[&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;.join([learned_head[i], pre_num_dic[learned_pred[i]]])] = i &lt;span style=&quot;color: #008000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 最合适的fact = head + pred&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这里的&lt;strong&gt;&lt;em&gt;head_mid_idx = {匹配的编号：name} + {不匹配编号：None}&lt;/em&gt;&lt;/strong&gt;是由HED模型结果dete_result，处理得到，所以是&lt;strong&gt;&lt;em&gt;Find the candidate fact set C from G, based on HEDentity;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;EndNoteBibliography&quot;&gt;&lt;!--[if supportFields]&gt;&lt;span
lang=EN-US style=&#39;font-size:14.0pt&#39;&gt;&lt;span style=&#39;mso-element:field-begin&#39;&gt;&lt;span
style=&#39;mso-spacerun:yes&#39;&gt; ADDIN EN.REFLIST &lt;span style=&#39;mso-element:
field-separator&#39;&gt;&lt;![endif]--&gt;&lt;span lang=&quot;EN-US&quot;&gt;[1] HUANG X, ZHANG J, LI D, 等&lt;span lang=&quot;EN-US&quot;&gt;. Knowledge Graph Embedding Based Question Answering[A]. Proceedings of the Twelfth ACM International Conference on Web Search and Data Mining[C]. 2019. 105-113.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;EndNoteBibliography&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[2] 乔振浩&lt;span lang=&quot;EN-US&quot;&gt;. 基于知识图谱的问答系统研究与应用&lt;span lang=&quot;EN-US&quot;&gt;[D]. 哈尔滨工业大学&lt;span lang=&quot;EN-US&quot;&gt;, 2020.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;EndNoteBibliography&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[3] 霍布森&lt;span lang=&quot;EN-US&quot;&gt;·莱恩、科尔&lt;span lang=&quot;EN-US&quot;&gt;·霍华德、汉纳斯·马克斯·哈普克、史亮、鲁骁、唐可欣、王斌&lt;span lang=&quot;EN-US&quot;&gt;. 《自然语言处理实战》&lt;span lang=&quot;EN-US&quot;&gt;[J]. 中文信息学报&lt;span lang=&quot;EN-US&quot;&gt;, 2020, v.34(10): 117-117.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;!--[if supportFields]&gt;&lt;span lang=EN-US style=&#39;font-size:14.0pt;font-family:
等线;mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&quot;Times New Roman&quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA&#39;&gt;&lt;span style=&#39;mso-element:field-end&#39;&gt;&lt;![endif]--&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Implementations</title>
    <link href="https://z974890869.com/2020/12/19/implementations/"/>
    <id>https://z974890869.com/2020/12/19/implementations/</id>
    <published>2020-12-19T07:32:00.000Z</published>
    <updated>2021-06-19T09:04:33.145Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  1&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  2&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Provision_26 : Postone variable definitions as long as possible
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  4&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;  5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果定义还没用就抛出异常 需要：构造+析构&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  6&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;  7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; AB() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  8&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; S
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  9&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 10&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 11&lt;/span&gt;         S() = &lt;span style=&quot;color: #0000ff;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 12&lt;/span&gt;         S(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; _i) :i(_i) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 13&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 14&lt;/span&gt;         std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; s;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 15&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 16&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 17&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; f(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 18&lt;/span&gt;     auto n = &lt;span style=&quot;color: #800080;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 19&lt;/span&gt;     S A;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;method A: 1 构造 + 1 析构 + n 赋值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 20&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;i &amp;lt; n;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 21&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 22&lt;/span&gt;         A =&lt;span style=&quot;color: #000000;&quot;&gt; S(i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 23&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 24&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;method B : n 构造 + n 析构&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 25&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;i &amp;lt; n;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        S B(f(i));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 28&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 30&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当 构造 + 析构  &amp;lt; 赋值 ：using B 变量A作用域也大
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 31&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 32&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Provision_27 Minimize casting
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 33&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;避免使用 dynamic_cast
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 34&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 35&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;问题：只有 base point 要执行 derived class member function
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 36&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决： 在base class 中  virtual derived member function&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 37&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 38&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Window
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 39&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 40&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 41&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; blink() = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;闪烁&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 42&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 43&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; SpecialWindow :&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Window
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 45&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 46&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; blink() &lt;span style=&quot;color: #0000ff;&quot;&gt;override&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 47&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 48&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;....&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 49&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 51&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 52&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Provision_31: Minimize compilation dependencies between files
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 53&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;问题：class private成员往往依赖头文件(#include&quot;Tree_Note.h&quot;) 若头文件修改则导致所有依赖该头文件的实现(Tree_Note type)都重新编译
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 54&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决1 ：(Handle classes)point to imolementation :将对象实现细节隐藏于一个指针背后
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 55&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 56&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Person.h&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 57&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 58&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 59&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 60&lt;/span&gt; #include&lt;memory&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 61&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 62&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; PersonImpl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 63&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Date;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 64&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Address;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 65&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 66&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Person
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 67&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 68&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 69&lt;/span&gt;     Person(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 70&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 71&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 72&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 73&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 74&lt;/span&gt;     std::shared_ptr&lt;personimpl&gt;&lt;span style=&quot;color: #000000;&quot;&gt; pImpl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 75&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 76&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 77&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Person.cpp&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 78&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 79&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;person.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 80&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PersonImpl.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 81&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 82&lt;/span&gt; Person::Person(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 83&lt;/span&gt;     :pImpl(std::make_shared&lt;personimpl&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(name, birthday, addr)) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 84&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; Person::name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 85&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 86&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; pImpl-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;name();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 87&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 88&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; Person::birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 89&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 90&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; pImpl-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;birthday();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 91&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 92&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; Person::address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 93&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 94&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; pImpl-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;address();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 95&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 96&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 97&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;PersonImpl.h&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 98&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 99&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt;100&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;101&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Date.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;102&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Address.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;103&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; PersonImpl
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;104&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;105&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;106&lt;/span&gt;     PersonImpl(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;107&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        :theName(name), theBirthday(birthday), theAddress(addr) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;108&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;109&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;110&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;111&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;112&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theName;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;113&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Date theBirthday;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;114&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Address theAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;115&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;116&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;117&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;118&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;PersonImpl.cpp&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;119&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;120&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PersonImpl.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;121&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;122&lt;/span&gt; PersonImpl::name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theName; }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;123&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;124&lt;/span&gt; PersonImpl::birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theBirthday.date(); }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;125&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;126&lt;/span&gt; PersonImpl::address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theAddress.addr(); }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;127&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;128&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;129&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决2: (Interface class)abstract base 接口在Person 细节在class RealPerson :public Person private
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;130&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;使用：auto pp(Person::create(name,birthday,addr))
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;131&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;132&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;person.h&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;133&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;134&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Person
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;135&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;136&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;137&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; ~&lt;span style=&quot;color: #000000;&quot;&gt;Person() {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;138&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;139&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;140&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; =&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;141&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;142&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; std::shared_ptr&lt;person&gt; create(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;143&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;144&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;145&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;146&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;person,cpp&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;147&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;148&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Person.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;149&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;RealPerson.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;150&lt;/span&gt; std::shared_ptr&lt;person&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;151&lt;/span&gt; Person::create(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;152&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;153&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; std::make_shared&lt;person&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(RealPerson(name, birthday, addr));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;154&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;155&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;156&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;157&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;RealPerson&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;158&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;159&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt;160&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;person.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;161&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;162&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Date.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;163&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Address.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;164&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;165&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; RealPerson :&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Person
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;166&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;167&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;168&lt;/span&gt;     RealPerson(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; name, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Date&amp;amp; birthday, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Address&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; addr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;169&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        :theName(name), theBirthday(birthday), theAddress(addr) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;170&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;virtual&lt;/span&gt; ~&lt;span style=&quot;color: #000000;&quot;&gt;RealPerson() {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;171&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;172&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;173&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;174&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;175&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theName;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;176&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Date theBirthday;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;177&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Address theAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;178&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;179&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;180&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;181&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;RealPerson.cpp&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;182&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;183&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PersonImpl.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;184&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;185&lt;/span&gt; PersonImpl::name() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theName; }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;186&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;187&lt;/span&gt; PersonImpl::birthday() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; theBirthday.date(); }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;188&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;189&lt;/span&gt; PersonImpl::address() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; theAddress.addr(); }&lt;/person&gt;&lt;/person&gt;&lt;/person&gt;&lt;/personimpl&gt;&lt;/personimpl&gt;&lt;/memory&gt;&lt;/vector&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Designs and Declarations</title>
    <link href="https://z974890869.com/2020/12/19/designs-and-declarations/"/>
    <id>https://z974890869.com/2020/12/19/designs-and-declarations/</id>
    <published>2020-12-19T02:35:00.000Z</published>
    <updated>2021-06-19T09:04:33.162Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  1&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;provision_21: Don&#39;t try to return a reference when you must return an object
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  2&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;static :不能比较&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  3&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Rational
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  5&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  6&lt;/span&gt;     friend &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;  7&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;*(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp; lhs, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  8&lt;/span&gt;     friend &lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  9&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;==(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp; lhs, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 11&lt;/span&gt;     Rational(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; _n = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; _d = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) :n(_n), d(_d) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 12&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 13&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; n,d;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 15&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 16&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp; 
&lt;span style=&quot;color: #008080;&quot;&gt; 17&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;*(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp; lhs, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 19&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; Rational result; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;只在第一个作用&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 20&lt;/span&gt;     result.n = lhs.n *&lt;span style=&quot;color: #000000;&quot;&gt; rhs.n;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 21&lt;/span&gt;     result.d = lhs.d *&lt;span style=&quot;color: #000000;&quot;&gt; rhs.d;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 22&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;  result;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 23&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 24&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;==(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp; lhs, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Rational&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; ((lhs.n == rhs.n) &amp;amp;&amp;amp; (lhs.d == rhs.d)) ? &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt; : &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 28&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 30&lt;/span&gt;     Rational a, b(&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;), c(&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;4&lt;/span&gt;), d(&lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 31&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; ((a * b) == (c * d)) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;返回的都是 staic result 的引用： if( static Rational&amp;amp; == static Rational&amp;amp;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 32&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;换句话说：在operator==(l,r) 时比较的都是最后一次operator*(a,b)的result 而(c*d)存放的值被(a*b)替换 &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 33&lt;/span&gt;         std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;always true&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 34&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 35&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 36&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 37&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Provision_24 Declare non-member functions when type conversions should apply to all parameters
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 38&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当不涉及template 时，如果可以避免friend 函数就该避免&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 39&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Ration
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 41&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 42&lt;/span&gt;     Ration(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; _n = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; _d = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) :n(_n), d(_d) {}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 43&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; nf() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; n; } &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;const 指针 只能绑定 const this*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 44&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; df() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; d; }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 45&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 46&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; n;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 47&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; d;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 48&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 49&lt;/span&gt; inline &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Ration 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 50&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;*(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Ration&amp;amp; lhs, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Ration&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 52&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Ration(lhs.nf() * rhs.nf(), lhs.df() *&lt;span style=&quot;color: #000000;&quot;&gt; rhs.df());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 53&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 54&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 55&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Provision_25 Consider support for a non-throwing swap&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 56&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; WidgetImpl &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;针对Widget数据设计的class&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 57&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 58&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 59&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 60&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 61&lt;/span&gt;     std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; vd;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 62&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 63&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 64&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Widget
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 65&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 66&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 67&lt;/span&gt;     Widget&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 68&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 69&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;...其他数据&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 70&lt;/span&gt;         *pImpl = *&lt;span style=&quot;color: #000000;&quot;&gt;(rhs.pImpl);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 71&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 72&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 73&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap(Widget&amp;amp; other) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;因为使用private member 所以是成员函数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 74&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 75&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; std::swap; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;若没有自定义swap 使用 std::swap&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 76&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        swap(pImpl, other.pImpl);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 77&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 78&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 79&lt;/span&gt;     WidgetImpl*&lt;span style=&quot;color: #000000;&quot;&gt; pImpl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 80&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 81&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 82&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 83&lt;/span&gt;     template&amp;lt;&amp;gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;只是特例化 Widget &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 84&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap&lt;widget&gt;(Widget&amp;amp; a, Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; b)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 85&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 86&lt;/span&gt;         a.swap(b);&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;调用 swap成员函数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 87&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 88&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 89&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 90&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果Widget&lt;t&gt;&lt;/t&gt;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 91&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt; WidgetStuff &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;不能改变std::swap&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 92&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 93&lt;/span&gt;     template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 94&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; WidgetImpl
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 95&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 96&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 97&lt;/span&gt;         std::vector&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; v;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 98&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 99&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;100&lt;/span&gt;     template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;101&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Widget
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;102&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;103&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;104&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap(Widget&amp;amp; other) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;因为使用private member 所以是成员函数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;105&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;106&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; std::swap; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;若没有自定义swap 使用 std::swap&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;107&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            swap(pImpl, other.pImpl);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;108&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;109&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;110&lt;/span&gt;         WidgetImpl&lt;t&gt;*&lt;span style=&quot;color: #000000;&quot;&gt; pImpl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;111&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;112&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;113&lt;/span&gt;     template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;114&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap(Widget&lt;t&gt;&amp;amp; a, Widget&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; b)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;115&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;116&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        a.swap(b);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;117&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;118&lt;/span&gt; }&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/widget&gt;&lt;/vector&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Constructors_Destructor_and_Assignment_Operators</title>
    <link href="https://z974890869.com/2020/12/17/constructors-destructor-and-assignment-operators/"/>
    <id>https://z974890869.com/2020/12/17/constructors-destructor-and-assignment-operators/</id>
    <published>2020-12-17T01:47:00.000Z</published>
    <updated>2021-06-19T09:04:33.166Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  1&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;provision_7:Declare destructors virtal in polymorphic base classes&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  2&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;只有当class 内含有至少一个virtual function 才为它声明virtual destructor
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  4&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;不声明 virtual:derived 成分没被销毁
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;没有虚函数时声明 virtual :增加对象体积
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  6&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  7&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;  8&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;provision_8:Prevent exceptions from leaving destructors&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; DBConnection
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 12&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; DBConnection create();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 13&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; close();&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;关闭联机&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 15&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 16&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 17&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; DBConn &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;这个class用来管理DBConnection&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 19&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 20&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; close()&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;供用户选择&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 21&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        db.close();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 23&lt;/span&gt;         closed = &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 25&lt;/span&gt;     ~&lt;span style=&quot;color: #000000;&quot;&gt;DBConn()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 27&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (!closed)&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果客户不怎么做&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 28&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 29&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 30&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 31&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                db.close();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 32&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 33&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;catch&lt;/span&gt; (...)&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;捕获所有异常&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 34&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 35&lt;/span&gt;                 &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;记录 并结束程序 或吞下异常&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 36&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 37&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 38&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 39&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    DBConnection db;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 41&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; closed;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 42&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 43&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 44&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;provision_10 Have assignment operators return a reference to *this
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 45&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;避免连锁赋值开销&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 46&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 47&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 48&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Str
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 49&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 50&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 51&lt;/span&gt;     Str(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;amp; _s = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;shuai&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;) :i(&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;), s(_s) 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    { 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 53&lt;/span&gt;         std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;default constructor &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl; 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 54&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 55&lt;/span&gt;     Str(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Str&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs) :i(rhs.i), s(rhs.s)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 56&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 57&lt;/span&gt;         std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;copy constructor&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 58&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 59&lt;/span&gt;     Str&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Str&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 60&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 61&lt;/span&gt;         i =&lt;span style=&quot;color: #000000;&quot;&gt; rhs.i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 62&lt;/span&gt;         s =&lt;span style=&quot;color: #000000;&quot;&gt; rhs.s;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 63&lt;/span&gt;         std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;copy &amp;amp; &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 64&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 65&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 66&lt;/span&gt;     
&lt;span style=&quot;color: #008080;&quot;&gt; 67&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Str operator=(const Str&amp;amp; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 68&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 69&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        i = rhs.i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 70&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        s = rhs.s;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 71&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        std::cout &amp;lt;&amp;lt; &quot;copy no &amp;amp; &quot; &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 72&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        return *this;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 73&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 74&lt;/span&gt;     
&lt;span style=&quot;color: #008080;&quot;&gt; 75&lt;/span&gt;     ~&lt;span style=&quot;color: #000000;&quot;&gt;Str()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 76&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 77&lt;/span&gt;         std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;destructor&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 78&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 79&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; auto&amp;amp; si() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i; }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 80&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; auto&amp;amp; ss() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; s; }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 81&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 82&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 83&lt;/span&gt;     std::&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; s;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 84&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 85&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 86&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 87&lt;/span&gt;     Str s1,s2(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;789&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;),s3(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;dui&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 88&lt;/span&gt;     s1 = s2 =&lt;span style=&quot;color: #000000;&quot;&gt; s3;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 89&lt;/span&gt;     std::cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;s2: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&amp;lt;&lt;s2.ss() &lt;&lt;&lt;span=&quot;&quot; style=&quot;color: #800000;&quot;&gt;&quot;&lt;/s2.ss()&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;s1: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt; s1.ss() &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 90&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;operator=返回的no_reference 通过 copy constructor 给临时量
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 91&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;但是临时量怎么给S2(临时量是s2产生的副本（猜测）)的：或者返回给S2但是产生了一个临时量
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 92&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;产生多余的copy constructor 和 destructor（临时量）&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 93&lt;/span&gt;     (s1 = s2) = s3;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;这时s3 赋值给operator=（s1= s3） 所返回的临时量(返回类型时副本)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 94&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 95&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 96&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 97&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;provision_11 Handle assignment to self in operator=
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 98&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;问题：this,rhs 指向同一对象delete this会删除rhs所指向对象&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 99&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bitmap {};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;100&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Widget {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;101&lt;/span&gt;     friend &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap(Widget&amp;amp;, Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;102&lt;/span&gt;     Widget&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;103&lt;/span&gt;     Widget&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;(Widget rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;104&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;105&lt;/span&gt;     Bitmap*&lt;span style=&quot;color: #000000;&quot;&gt; pb;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;106&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;107&lt;/span&gt; Widget&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;108&lt;/span&gt; Widget::&lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;109&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;110&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;delete&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; pb; 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;111&lt;/span&gt;     pb = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Bitmap(*rhs.pb);&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;rhs.pb所指对象已经被delete&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;112&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;113&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;114&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;115&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;116&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;method one(identity test): 仍然存在潜在问题：Bitmao copy constructor exception&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;117&lt;/span&gt; Widget&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;118&lt;/span&gt; Widget::&lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;119&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;120&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt; == &amp;amp;rhs) &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;121&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;delete&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; pb;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;122&lt;/span&gt;     pb = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Bitmap(*rhs.pb);&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;rhs.pb所指对象已经被delete&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;123&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;124&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;125&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;126&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;method two:high cost but opereator= 用到次数少&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;127&lt;/span&gt; Widget&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;128&lt;/span&gt; Widget::&lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;129&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;130&lt;/span&gt;     auto temp =&lt;span style=&quot;color: #000000;&quot;&gt; pb;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;131&lt;/span&gt;     pb = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Bitmap(*&lt;span style=&quot;color: #000000;&quot;&gt;rhs.pb);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;132&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;delete&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; temp;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;133&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;134&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;135&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;136&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;method three(swap) swap:常用来优化代码 并且：如果成员含有子类会调用子类的swap&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;137&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;inline 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;138&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; swap(Widget &amp;amp;lhs,Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;139&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;140&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当传递类类型的对象时，除了在常规的作用域查找外还会查找实参类所属的命名空间&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;141&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std::swap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;142&lt;/span&gt;     swap(lhs.pb, rhs.pb);&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;自定义的swap匹配优先级更高&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;143&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;144&lt;/span&gt; Widget&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;145&lt;/span&gt; Widget::&lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Widget&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; rhs)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;146&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;147&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    auto temp(rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;148&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; std::swap; &lt;span style=&quot;color: #008000;&quot;&gt;//
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;149&lt;/span&gt;     swap(*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, temp);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;150&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;151&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;152&lt;/span&gt; Widget&amp;amp;
&lt;span style=&quot;color: #008080;&quot;&gt;153&lt;/span&gt; Widget::&lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;=(Widget rhs)&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;&quot;copy 动作&quot;从函数本体移至“函数参数构造阶段” &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;154&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;155&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;  std::swap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;156&lt;/span&gt;     swap(*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,rhs);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;157&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; *&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;158&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;159&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;160&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;161&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;copy assignment and copy constructor 不要相互调用：构造：不存在对象， 赋值：对一个已经存在的对象
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;162&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; assignment call construct 对一个已经存在的对象进行构造（创建）
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;163&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; cosntructor call assignment 对一个还为构造（不存在）的对象进行赋值
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;164&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Accustoming_Yourself_to_C++</title>
    <link href="https://z974890869.com/2020/12/16/accustoming-yourself-to-c/"/>
    <id>https://z974890869.com/2020/12/16/accustoming-yourself-to-c/</id>
    <published>2020-12-16T01:56:00.000Z</published>
    <updated>2021-06-19T09:04:33.173Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;条款1 用const,enum,inline 替换#define

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;1 const 替换 #define 常量&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
* 对于浮点数，const double 代码小
* 在class内不能提供封装性
* #defien函数用 
* template&lt;typename&gt;
* inline dectltype(auto) function 替换
&lt;/typename&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;cstring&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; CTextBlock
{
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    size_t length() &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;char&lt;/span&gt;*&lt;span style=&quot;color: #000000;&quot;&gt; pText;
    mutable size_t textLength;
    mutable &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; lengthIsValid;
};

size_t CTextBlock::length() &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (!&lt;span style=&quot;color: #000000;&quot;&gt;lengthIsValid)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;function const 由于正在通过常量对象访问“textLength”，因此无法对其进行修改    
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决：mutable&lt;/span&gt;
        textLength =&lt;span style=&quot;color: #000000;&quot;&gt; std::strlen(pText);
        lengthIsValid &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; textLength;
}
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;解决 代码只有返回类型的重复问题：令non-const function 调用另一个 const-function&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TextBlock
{
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;char&lt;/span&gt;&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;[](std::size_t position) &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
    {
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;bounds chexking
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;log access data
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;verify data integrity&lt;/span&gt;
        &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; text[position];
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;char&lt;/span&gt;&amp;amp; &lt;span style=&quot;color: #0000ff;&quot;&gt;operator&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;[](std::size_t position)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
            const_cast&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;char&lt;/span&gt;&amp;amp;&amp;gt;(&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;去掉 返回值的const &lt;/span&gt;
                static_cast&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; TextBlock&amp;amp;&amp;gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;调用 operator[]()const &lt;/span&gt;
                (*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)[position]);
    }
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    std::&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; text;
};
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;因为为 const 成员函数承若绝不改变其对象的逻辑状态，So don&#39;t const function call non-const function

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;条款四：Make sure that objects are initialized before they&#39;re used&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
*在构造函数中使用()初始化：减少一次copy

问题：如果某编译单元(cpp)内的某个non-local static对象的初始化
      使用了另一个编译单元(cpp)的non-local static对象

c++对“定义于不同编译单元内的non-local static对象”的初始化次序并无明确定义

解决：用local static 替换 non-local static(已经被未命名空间取代)

c++保证：函数内的local static 对象会在“该函数被调用期间”“首次遇上该对象的定义”时被初始化
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; FileSystem
{
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    std::size_t numDisks() &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
};
inline FileSystem&lt;/span&gt;&amp;amp; tfs() &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;tfs:the file system&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; FileSystem fs;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; fs;
}
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Directory
{
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    Directory() &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    Directory(std::&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
};
Directory::Directory(std::&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
{
    std::size_t disks &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; tfs().numDisks();
}
inline Directory&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; tempDir()
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Directory td;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; td;
}
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
}&lt;/span&gt;&lt;/cstring&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Red_Black_Tree C++</title>
    <link href="https://z974890869.com/2020/11/22/red-black-tree-c/"/>
    <id>https://z974890869.com/2020/11/22/red-black-tree-c/</id>
    <published>2020-11-22T14:31:00.000Z</published>
    <updated>2021-06-19T09:04:33.187Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;红黑树&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;总的来说 掌握思想就好：细节没记住&lt;/p&gt;
&lt;p&gt;//算法导论书中的else表示case3要改成具体情况：还有不存在的情况要跳过&lt;br&gt;//例如：else = else if(z == z.p.left)&lt;/p&gt;
&lt;p&gt;知识点：&lt;/p&gt;
&lt;p&gt;1、指针比较地址 ：z-&amp;gt;right == nil&amp;nbsp; &amp;nbsp; &amp;nbsp;*（z-&amp;gt;right )== *nil 报错：没有定义 operator==&amp;nbsp; &amp;nbsp; &amp;nbsp; 因为：RBT_note_type&lt;t&gt; right 是类类型&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 所以 加一个bool nil 成员处理 或者定义 operator==&lt;/p&gt;
&lt;p&gt;&amp;nbsp;2、auto 需要初始化 ：静态成员初始化要常量 而这里是&lt;t&gt; 不可以&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;c++14 中 auto可以作为返回类型，需要注意auto remove const and &amp;amp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、constexpr:如果传递给一个constexpr function 的实参在编译期已知，结果也是在编译期已知&lt;/p&gt;
&lt;p&gt;例如 ：《Effective Modern C++》&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Point
{
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    constexpr Point(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; xVal = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; yVal = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) noexcept
        :x(xVal), y(yVal) {}
    constexpr &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; xValue() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; noexcept { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x; }
    constexpr &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; yValue() &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; noexcept { &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; y; }

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setX(&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; newX) noexcept { x =&lt;span style=&quot;color: #000000;&quot;&gt; newX; }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setY(&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt; newY) noexcept { y =&lt;span style=&quot;color: #000000;&quot;&gt; newY; }
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;double&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; y;
};

constexpr
Point midpoint(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Point&amp;amp; p1, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; Point&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; p2) noexcept
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; { (p1.xValue() + p2.xValue()) / &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,
        (p1.yValue() &lt;/span&gt;+ p2.yValue()) / &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
}

constexpr auto mid &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; midpoint(p1, p2);
&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;static_cast&lt;int&gt;(mid.xValue()*10) 可用于模板形参&lt;/int&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;红黑树是每个节点都带有&lt;em&gt;颜色&lt;/em&gt;属性的&lt;a title=&quot;二叉搜索树&quot; href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&quot;&gt;二叉查找树&lt;/a&gt;，颜色为&lt;em&gt;红色&lt;/em&gt;或&lt;em&gt;黑色&lt;/em&gt;。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点是红色或黑色。&lt;/li&gt;
&lt;li&gt;根是黑色。&lt;/li&gt;
&lt;li&gt;所有叶子都是黑色（叶子是NIL节点）。&lt;/li&gt;
&lt;li&gt;每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）&lt;/li&gt;
&lt;li&gt;从任一节点到其每个叶子的所有&lt;a title=&quot;道路 (图论)&quot; href=&quot;https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA)&quot;&gt;简单路径&lt;/a&gt;都包含相同数目的黑色节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个具体的红黑树的图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202011/2092141-20201122222248190-1465512193.png&quot; alt=&quot;&quot; width=&quot;896&quot; height=&quot;431&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的&lt;a class=&quot;mw-redirect&quot; title=&quot;二叉查找树&quot; href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91&quot;&gt;二叉查找树&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。&lt;/p&gt;
&lt;p&gt;在很多树数据结构的表示中，一个节点有可能只有一个子节点，而叶子节点包含数据。用这种范例表示红黑树是可能的，但是这会改变一些性质并使算法复杂。为此，本文中我们使用&quot;nil叶子&quot;或&quot;空（null）叶子&quot;，如上图所示，它不包含数据而只充当树在此结束的指示。这些节点在绘图中经常被省略，导致了这些树好像同上述原则相矛盾，而实际上不是这样。与此有关的结论是所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子。&lt;/p&gt;
&lt;p&gt;#RED_BLACK_TREE_NOTE.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;memory&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;iostream&gt;

&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;优先选用限定作用域的enum
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 降低空间污染
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;不会隐式转换

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;color&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;enum&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; color
{
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;默认const int不能默认转换&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;    red,black
};

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;友元所需声明&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Red_Black_Tree;
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Red_Black_Tree_Note;
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;using 声明&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; RBT_note_type = std::shared_ptr&lt;red_black_tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Right_Rotate(Red_Black_Tree&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;Tree
    , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; y);
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Left_Rotate(Red_Black_Tree&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;Tree,
    RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Transplant(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; Tree
    , RBT_note_type&lt;/span&gt;&lt;t&gt; &amp;amp;u, RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;v);

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;Note&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Red_Black_Tree_Note
{
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; Red_Black_Tree&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Left_Rotate&lt;t&gt;(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;
        , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Right_Rotate&lt;t&gt;(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;
        , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Transplant&lt;t&gt;(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; Tree
        , RBT_note_type&lt;/span&gt;&lt;t&gt; &amp;amp;u, RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;v);
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    Red_Black_Tree_Note(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; _key =&lt;span style=&quot;color: #000000;&quot;&gt; T())
        :key(_key),left(std::make_shared&lt;/span&gt;&lt;red_black_tree_note&lt;t&gt;&amp;gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)),
        right(std::make_shared&lt;/span&gt;&lt;red_black_tree_note&lt;t&gt;&amp;gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;)), p(nullptr),tree_color(color::black),nil(&lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {}
    Red_Black_Tree_Note(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;char&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        :key(T()),left(nullptr), right(nullptr), p(nullptr), tree_color(color::black),nil(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {}

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    T key;
    RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; left;
    RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; right;
    RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; p;
    color tree_color;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; nil;
};
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;左旋&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Left_Rotate(Red_Black_Tree&lt;t&gt; &amp;amp;Tree, RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
{
    auto y(x&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
    x&lt;/span&gt;-&amp;gt;right = y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;left-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        y&lt;/span&gt;-&amp;gt;left-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; x;
    y&lt;/span&gt;-&amp;gt;p = x-&amp;gt;p;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x-&amp;gt;p-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        Tree.root &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; y;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x == x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
        x&lt;/span&gt;-&amp;gt;p-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; y;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        x&lt;/span&gt;-&amp;gt;p-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; y;
    y&lt;/span&gt;-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; x;
    x&lt;/span&gt;-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
}
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;右旋&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Right_Rotate(Red_Black_Tree&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;Tree
    , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; y)
{
    auto x(y&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
    y&lt;/span&gt;-&amp;gt;left = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x-&amp;gt;right-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        x&lt;/span&gt;-&amp;gt;right-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
    x&lt;/span&gt;-&amp;gt;p = y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;p-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;C2232“-&amp;gt;Red_Black_Tree&lt;int&gt;::root”: 左操作数有“class”类型，使用“.”&lt;/int&gt;&lt;/span&gt;
        Tree.root =&lt;span style=&quot;color: #000000;&quot;&gt; x;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y == y-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
        y&lt;/span&gt;-&amp;gt;p-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; x;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        y&lt;/span&gt;-&amp;gt;p-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; x;
    x&lt;/span&gt;-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; y;
    y&lt;/span&gt;-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; x;
}
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;移植&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Transplant(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; Tree
    ,RBT_note_type&lt;/span&gt;&lt;t&gt; &amp;amp;u,RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;v)
{
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;u-&amp;gt;p 不存在
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;    if (u-&amp;gt;p == Tree.nil)&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(u-&amp;gt;p-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        Tree.root &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; v;
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;报错：读取访问权限冲突：解决把函数放在Tree类 private&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (u == u-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
        u&lt;/span&gt;-&amp;gt;p-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; v;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        u&lt;/span&gt;-&amp;gt;p-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; v;
    v&lt;/span&gt;-&amp;gt;p = u-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
}&lt;/span&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/typename&gt;&lt;/typename&gt;&lt;/typename&gt;&lt;/iostream&gt;&lt;/memory&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;#RED_BLACK_TREE.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;算法导论书中的else表示case3要改成具体情况：还有不存在的情况要跳过
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;例如：else = else if(z == z.p.left)&lt;/span&gt;
#include&lt;iostream&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;functional&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;less&lt;/span&gt;
#include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;RED_BLACK_TREE_NOTE.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;

template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Red_Black_Tree
{
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Left_Rotate&lt;t&gt;(Red_Black_Tree&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;Tree
        , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Right_Rotate&lt;t&gt;(Red_Black_Tree&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;Tree
        , RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
    friend &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Transplant&lt;t&gt;(Red_Black_Tree&lt;t&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; Tree
        , RBT_note_type&lt;/span&gt;&lt;t&gt; &amp;amp;u, RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;v);
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    Red_Black_Tree() :nil(std::make_shared&lt;/span&gt;&lt;red_black_tree_note&lt;t&gt;&amp;gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;)),root(std::make_shared&lt;red_black_tree_note&lt;t&gt;&amp;gt;(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)) {}
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;中序遍历&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Iorder_Tree_Walk(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;x);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Iorder_Tree_Walk() { Iorder_Tree_Walk(root); }
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;迭代查找 迭代改变要搜索的x 不能引用&amp;amp;x
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;c++14 中 auto可以作为返回类型，需要注意auto remove const and &amp;amp;
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;若要完成版 则：decltype(auto) return std::forward&lt;t&gt;(x); forward 处理右值情况&lt;/t&gt;&lt;/span&gt;
    auto Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key, RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt; Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
    {
        auto p &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Iterative_Tree_Search(key, root);
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (p != nullptr &amp;amp;&amp;amp; p-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
            &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最小值 : 迭代搜索 不能 &amp;amp;x ,不能返回引用：p是局部变量程序&lt;/span&gt;
    RBT_note_type&lt;t&gt; Tree_Minimum(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
    T Tree_Minimum()
    {
        auto p &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Tree_Minimum(root);
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;插入&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_INSERT(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;z);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Insert(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
    {
        auto z &lt;/span&gt;= std::make_shared&lt;red_black_tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(key);
        RB_INSERT(z);
    }
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;删除 &lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_DELETE(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; z);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_Delete(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
    {
        auto z &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Iterative_Tree_Search(key, root);
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z == nullptr || z-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
            std::cerr &lt;/span&gt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;nodata!&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
            RB_DELETE(z);
    }

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
    RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; root;
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;非静态成员不能使用auto 
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;静态成员初始化要用常量 这里是模板&lt;t&gt;&lt;/t&gt;&lt;/span&gt;
    RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; nil;

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_INSERT_FIXUP(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; z);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; RB_DELETE_FIXUP(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; z);
};
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;中序遍历中nil的key值要排除&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
inline &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Red_Black_Tree&lt;t&gt;::Iorder_Tree_Walk(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;x)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x != nullptr&amp;amp;&amp;amp;x-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    {
        Iorder_Tree_Walk(x&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
        std::cout &lt;/span&gt;&amp;lt;&amp;lt; x-&amp;gt;key &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
        Iorder_Tree_Walk(x&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
    }
}
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
inline auto Red_Black_Tree&lt;/span&gt;&lt;t&gt;::Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key, RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x != nullptr &amp;amp;&amp;amp; x-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; key != x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (key &amp;lt; x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;        if(std::less&lt;t&gt;(key,x-&amp;gt;key)) &lt;/t&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;const key 无法转换&lt;/span&gt;
            x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
            x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
}
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最小值&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
RBT_note_type&lt;/span&gt;&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
Red_Black_Tree&lt;/span&gt;&lt;t&gt;::Tree_Minimum(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x-&amp;gt;left != nullptr &amp;amp;&amp;amp; x-&amp;gt;left-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
}

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;插入&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Red_Black_Tree&lt;t&gt;::RB_INSERT_FIXUP(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; z)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (z-&amp;gt;p-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::red)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;p == z-&amp;gt;p-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
        {
            auto y(z&lt;/span&gt;-&amp;gt;p-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::red)
            {
                z&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                y&lt;/span&gt;-&amp;gt; tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                z&lt;/span&gt;-&amp;gt; p-&amp;gt; p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                z &lt;/span&gt;= z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
            }
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z == z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
            {
                z &lt;/span&gt;= z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
                Left_Rotate&lt;/span&gt;&lt;t&gt;(*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, z);
            }
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z == z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
            {
                z&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                z&lt;/span&gt;-&amp;gt;p-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                Right_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
            }
        }
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;p == z-&amp;gt;p-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
        {
                auto y(z&lt;/span&gt;-&amp;gt;p-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case1&lt;/span&gt;
                &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::red)
                {
                    z&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                    y&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                    z&lt;/span&gt;-&amp;gt;p-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                    z &lt;/span&gt;= z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
                }
                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case2&lt;/span&gt;
                &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z == z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
                {
                    z &lt;/span&gt;= z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
                    Right_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, z);
                }
                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case3&lt;/span&gt;
                &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z == z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
                {
                    z&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在插入第三个数时，因为case1 z = z.p.p执行后z为root
                    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;则z.p.p为无效内存，不可访问会报错&lt;/span&gt;
                    z-&amp;gt;p-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                    Left_Rotate&lt;/span&gt;&lt;t&gt;(*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, z-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
                }
        }
            root&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
    }
}

template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Red_Black_Tree&lt;t&gt;::RB_INSERT(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; RBT_note_type&lt;t&gt; &amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt;z)
{
    auto y(nil);
    auto x(root);
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;不知道为什么 while(x != nil) 条件会通过 &lt;brt_note_type&gt; 没有 operator!=
    &lt;/brt_note_type&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; x = root = nil = (&#39;*&#39;)&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x-&amp;gt;nil != &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    {
        y &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; x;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
            x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
            x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
    }
    z&lt;/span&gt;-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
        root &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; z;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
        y&lt;/span&gt;-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; z;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        y&lt;/span&gt;-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; z;
    z&lt;/span&gt;-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; nil;
    z&lt;/span&gt;-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; nil;
    z&lt;/span&gt;-&amp;gt;tree_color = color::red;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果黑色必然违反规则：每条路上黑色结点数相同&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;    RB_INSERT_FIXUP(z);
}

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;删除&lt;/span&gt;
template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Red_Black_Tree&lt;t&gt;::RB_DELETE_FIXUP(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x != root &amp;amp;&amp;amp; x-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x == x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
        {
            auto w(x&lt;/span&gt;-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case1&lt;/span&gt;
            &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::red)
            {
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                x&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                Left_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
                w &lt;/span&gt;= x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
            }
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case2&lt;/span&gt;
            &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;left-&amp;gt;tree_color == color::black &amp;amp;&amp;amp; w-&amp;gt;right-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
            {
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
            }
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;case3&lt;/span&gt;
            &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;right-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
            {
                w&lt;/span&gt;-&amp;gt;left-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                Right_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, w);
                w &lt;/span&gt;= x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
            }
            w&lt;/span&gt;-&amp;gt;tree_color = x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;tree_color;
            x&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
            w&lt;/span&gt;-&amp;gt;right-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
            Left_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
            x &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; root;
        }
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x == x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
        {
            auto w(x&lt;/span&gt;-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::red)
            {
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                x&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                Right_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
                w &lt;/span&gt;= x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
            }
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;right-&amp;gt;tree_color == color::black &amp;amp;&amp;amp; w-&amp;gt;left-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
            {
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                x &lt;/span&gt;= x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p;
            }
            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (w-&amp;gt;left-&amp;gt;tree_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
            {
                w&lt;/span&gt;-&amp;gt;right-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
                w&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::red;
                Left_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, w);
                w &lt;/span&gt;= x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
            }
            w&lt;/span&gt;-&amp;gt;tree_color = x-&amp;gt;p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;tree_color;
            x&lt;/span&gt;-&amp;gt;p-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
            w&lt;/span&gt;-&amp;gt;left-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
            Right_Rotate(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;p);
            x &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; root;
        }
    }
    x&lt;/span&gt;-&amp;gt;tree_color =&lt;span style=&quot;color: #000000;&quot;&gt; color::black;
}
template&lt;/span&gt;&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Red_Black_Tree&lt;t&gt;::RB_DELETE(RBT_note_type&lt;t&gt;&lt;span style=&quot;color: #000000;&quot;&gt; z)
{
    auto y(z);
    auto x(nil);
    color y_original_color &lt;/span&gt;= y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;tree_color;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;left-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    {
        x&lt;/span&gt;=z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
        RB_Transplant(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, z, z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
    }
    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;else if (z-&amp;gt;right == nil || z-&amp;gt;right == nullptr) 会跳过&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;right-&amp;gt;nil == &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
    {
        x &lt;/span&gt;= z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
        RB_Transplant(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, z, z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
    {
        y &lt;/span&gt;= Tree_Minimum(z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
        y_original_color &lt;/span&gt;= y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;tree_color;
        x &lt;/span&gt;= y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;p ==&lt;span style=&quot;color: #000000;&quot;&gt; z)
            x&lt;/span&gt;-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        {
            RB_Transplant(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;, y, y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
            y&lt;/span&gt;-&amp;gt;right = z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
            y&lt;/span&gt;-&amp;gt;right-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
        }
        RB_Transplant(&lt;/span&gt;*&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, z, y);
        y&lt;/span&gt;-&amp;gt;left = z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
        y&lt;/span&gt;-&amp;gt;left-&amp;gt;p =&lt;span style=&quot;color: #000000;&quot;&gt; y;
        y&lt;/span&gt;-&amp;gt;tree_color = z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;tree_color;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y_original_color ==&lt;span style=&quot;color: #000000;&quot;&gt; color::black)
        RB_DELETE_FIXUP(x);
}&lt;/span&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/red_black_tree_note&lt;t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/functional&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;main.cpp&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;#include&lt;iostream&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;vector&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Binary_Seach_Tree.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;RED_BLACK_TREE.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;


&lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std;
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
void BSTree()
{
    vector&lt;int&gt; vi{ 1,2,5,8,6,9,6 };
    BST&lt;int&gt; t;
    //插入
    for (auto i = 0;i != vi.size();++i)
        t.Tree_Insert(vi[i]);
    cout &amp;lt;&amp;lt; &quot;中序遍历&quot; &amp;lt;&amp;lt; endl;
    t.Iorder_Tree_Walk();
    cout &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &quot;最大值&quot; &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; t.Tree_Maximum() &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &quot;最小值&quot; &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; t.Tree_Minimum() &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &quot;查找&quot; &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; t.Tree_Seach(8) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &quot;删除&quot; &amp;lt;&amp;lt; endl;
    t.Tree_Delete(8);
    cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; t.Iterative_Tree_Search(8) &amp;lt;&amp;lt; endl;
}
&lt;/int&gt;&lt;/int&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; RBT()
{
    vector&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; vi{ &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;99&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,-&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
    Red_Black_Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; t;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; auto&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; i : vi)
        t.RB_Insert(i);
    t.Iorder_Tree_Walk();
    cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
    t.RB_Delete(&lt;/span&gt;&lt;span style=&quot;color: #800080;&quot;&gt;99&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    t.Iorder_Tree_Walk();
    cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
    t.RB_Delete(&lt;/span&gt;&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    t.Iorder_Tree_Walk();
}
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
{
    RBT();
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; s1{ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;abc&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; s2{ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;acd&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (s1 &amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; s2)
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;66&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    auto y &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; i;
    y &lt;/span&gt;= &lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
}&lt;/span&gt;&lt;/vector&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Binary_Seach_Tree(BST)    C++</title>
    <link href="https://z974890869.com/2020/11/07/binary-seach-tree-bst-c/"/>
    <id>https://z974890869.com/2020/11/07/binary-seach-tree-bst-c/</id>
    <published>2020-11-07T04:51:00.000Z</published>
    <updated>2021-06-19T09:04:33.193Z</updated>
    
    
    <summary type="html">&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;：二叉查找树&lt;/strong&gt;（英语：&lt;span lang=&quot;en&quot;&gt;Binary Search Tree），也称为&lt;strong&gt;二叉搜索树&lt;/strong&gt;、&lt;strong&gt;有序二叉树&lt;/strong&gt;（&lt;span lang=&quot;en&quot;&gt;ordered binary tree）或&lt;strong&gt;排序二叉树&lt;/strong&gt;（&lt;span lang=&quot;en&quot;&gt;sorted binary tree），是指一棵空树或者具有下列性质的&lt;a title=&quot;二叉树&quot; href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91&quot;&gt;二叉树&lt;/a&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；&lt;/li&gt;
&lt;li&gt;若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；&lt;/li&gt;
&lt;li&gt;任意节点的左、右子树也分别为二叉查找树&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说：&lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;《c++ primr 5th》每次看都觉得厉害&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、shared_ptr 是真的香&lt;/p&gt;
&lt;p&gt;2、template 友元用的时候在看&lt;/p&gt;
&lt;p&gt;3、函数传递：指针形参属于传值（拷贝），shared_ptr引用传递 没必要：动态内存（猜测）&lt;/p&gt;
&lt;p&gt;4、cosnt 成员函数适用：不能把this指针 绑定到常量对象（如const double pi = 3.14）:return pi;&lt;/p&gt;
&lt;p&gt;具体学习到什么 看code注释&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt;  2&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;编译器需要掌握函数模板或模板成员函数的定义：成员函数定义 也在头文件中
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;成员函数定义在类外使用默认实参 报错：不允许使用默认参数（原因还未知）
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  4&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;原因：非静态数据成员不能作为默认实参：因为它的值本身属于对象的一部分，
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;这么做的结果是：无法真正提供一个对象以便从中获取成员的值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  6&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;  7&lt;/span&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;  8&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; 指针传递：形参是指针的拷贝，两个指针是不同的指针 但是可以间接修改所指向对象的值
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;  9&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; 尽量使用引用传递：避免拷贝的效率和空间
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 10&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; 尽量使用值初始化：避免多余默认初始化
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 11&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; type* &amp;amp; ：指向指针的引用 ：引用本身不是对象所以不能定义指向引用的指针
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 12&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; =运算符在结点上的意义是什么？ 指针之间的赋值操作：所以不需要定义赋值运算符不是类之间操作
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 13&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; 类的行为像指针：共享状态 最好的方法是使用shared_ptr
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 14&lt;/span&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 15&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 16&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 17&lt;/span&gt; #include&lt;memory&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;shared_ptr&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 18&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; BST;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;前置声明：友元所需要&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 19&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在Tree_Note类内：直接使用模板名而不提供实参：Tree_Note = Tree_Note&lt;t&gt;&lt;/t&gt;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 21&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Tree_Note
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 23&lt;/span&gt;     friend &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; BST&lt;t&gt;;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;每个Tree_Note实例将访问权限授予用相同类型实例化的BST&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 24&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 25&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;构造函数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 26&lt;/span&gt;     Tree_Note(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; _key =&lt;span style=&quot;color: #000000;&quot;&gt; T())
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        :left(nullptr), right(nullptr), parent(nullptr),key(_key){}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 28&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 29&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    stack overflow why??? 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 30&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    答：make_shared 调用Tree_Note构造函数则造成无线循环
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 31&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        而用内置已经存在构造函数的则不会 ：data(make_shared&lt;vector&lt;string&gt;&amp;gt;()):data = &quot;&quot;
&lt;/vector&lt;string&gt;&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 32&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        :left(std::make_shared&lt;tree_note&gt;()),
&lt;/tree_note&gt;&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 33&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        right(std::make_shared&lt;tree_note&gt;()), parent(std::make_shared&lt;tree_note&gt;()),key(_key) {}
&lt;/tree_note&gt;&lt;/tree_note&gt;&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 34&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 35&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 没用上拷贝构造
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 36&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    //为了与内置运算符一致：返回指向左侧运算对象的引用:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 37&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    decltype(auto) operator=(std::make_ptr&lt;tree_note&gt; right)
&lt;/tree_note&gt;&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 38&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    {//decltype(auto)详见：《Effective Modern C++》P31
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 39&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        key = right.key;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 40&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        return maked_shared&lt;tree_note&gt;(*this);
&lt;/tree_note&gt;&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 41&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 42&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 43&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    T key;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 45&lt;/span&gt;     std::shared_ptr&lt;tree_note&gt;&lt;span style=&quot;color: #000000;&quot;&gt; left;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 46&lt;/span&gt;     std::shared_ptr&lt;tree_note&gt;&lt;span style=&quot;color: #000000;&quot;&gt; right;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 47&lt;/span&gt;     std::shared_ptr&lt;tree_note&gt;&lt;span style=&quot;color: #000000;&quot;&gt; parent;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 48&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 49&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 50&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 51&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BST
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 53&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 54&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;若root(nullptr) 则：报错访问内存受限&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 55&lt;/span&gt;     BST() :root(nullptr) {} &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;若使用构造函数则 root.key = 0
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 56&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;中序遍历&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 57&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Iorder_Tree_Walk(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 58&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Iorder_Tree_Walk() {Iorder_Tree_Walk(root);}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 59&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;递归查找&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 60&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key,&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 61&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt; Tree_Seach(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 62&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 63&lt;/span&gt;         auto p =&lt;span style=&quot;color: #000000;&quot;&gt; Tree_Search(key, root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 64&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (p !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 65&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 66&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 67&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 68&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 69&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;迭代查找:对于大多数计算机，迭代版本的效率要高的多 ：调用函数开销&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 70&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key,std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 71&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;bool&lt;/span&gt; Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 72&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 73&lt;/span&gt;         auto p =&lt;span style=&quot;color: #000000;&quot;&gt; Iterative_Tree_Search(key, root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 74&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (p !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 75&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 76&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 77&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 78&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 79&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 80&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最小值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 81&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Tree_Minimum(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 82&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    T Tree_Minimum()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 83&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 84&lt;/span&gt;         auto p =&lt;span style=&quot;color: #000000;&quot;&gt; Tree_Minimum(root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 85&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 86&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 87&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最大值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 88&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Tree_Maximum(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 89&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    T Tree_Maximum() 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 90&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 91&lt;/span&gt;         auto p =&lt;span style=&quot;color: #000000;&quot;&gt; Tree_Maximum(root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 92&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; p-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 93&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 94&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 95&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;后继和前驱:最接近（大小）该节点的大、小节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 96&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Tree_Successor(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 97&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; Tree_Predecessor(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 98&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 99&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;插入和删除&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;100&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Tree_Insert(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; z); &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当为空树是z要赋值给root 而root不能是const,所以z不是const&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;101&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Tree_Insert(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;102&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;103&lt;/span&gt;         auto z = std::make_shared&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;(key);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;104&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Tree_Insert(z);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;105&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;106&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Tree_Delete(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; z);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;107&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Tree_Delete(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;108&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;109&lt;/span&gt;         auto z =&lt;span style=&quot;color: #000000;&quot;&gt; Iterative_Tree_Search(key, root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;110&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z ==&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;111&lt;/span&gt;             std::cerr &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;nodata!&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;112&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Tree_Delete(z);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;113&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;114&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;115&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; root;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;116&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;移植节点 :u = v(不包括左右孩子)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;117&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Transplant(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; u, std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; v)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;118&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;119&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;指针给指针赋值：右侧地址赋值给左侧地址（指针存储的是地址） &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;120&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (u-&amp;gt;parent == nullptr) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果u是根节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;121&lt;/span&gt;             root =&lt;span style=&quot;color: #000000;&quot;&gt; v;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;122&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;都用 v替代u了 u的父节点不也被替代了么?---属于指针的赋值而不是类所以不用定于赋值运算符&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;123&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (u == u-&amp;gt;parent-&amp;gt;left) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;如果U是左孩子&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;124&lt;/span&gt;             u-&amp;gt;parent-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; v;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;125&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;126&lt;/span&gt;             u-&amp;gt;parent-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; v;        
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;127&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (v-&amp;gt;parent !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;128&lt;/span&gt;             v-&amp;gt;parent = u-&amp;gt;parent;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;不改变被替换树的上层&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;129&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;130&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;};
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;131&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;132&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;成员函数定义在类外使用默认实参 报错：不允许使用默认参数
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;133&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;原因(P271 《c++ prime 5th》)：非静态数据成员不能作为默认实参：因为它的值本身属于对象的一部分，
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;134&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;这么做的结果是：无法真正提供一个对象以便从中获取成员的值
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;135&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;136&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;递归查找&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;137&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;138&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;139&lt;/span&gt; BST&lt;t&gt;::Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key,&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;140&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;141&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x == nullptr || key == x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;142&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;143&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (key &amp;lt; x-&amp;gt;key)&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在左侧子树&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;144&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Tree_Search(key,x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;145&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;右侧子树&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;146&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Tree_Search(key,x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;147&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;148&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;迭代查找:对于大多数计算机，迭代版本的效率要高的多 ：调用函数开销&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;149&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;150&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;151&lt;/span&gt; BST&lt;t&gt;::Iterative_Tree_Search(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; T&amp;amp; key,std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;152&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;153&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x != nullptr &amp;amp;&amp;amp; key != x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;154&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;155&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (key &amp;lt; x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;156&lt;/span&gt;             x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;157&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;158&lt;/span&gt;             x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;159&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;160&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;161&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;162&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;中序遍历&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;163&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;164&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; BST&lt;t&gt;::Iorder_Tree_Walk(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;165&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;166&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;167&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;168&lt;/span&gt;         Iorder_Tree_Walk(x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;169&lt;/span&gt;         std::cout &amp;lt;&amp;lt; x-&amp;gt;key &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;170&lt;/span&gt;         Iorder_Tree_Walk(x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;171&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;172&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;173&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最小值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;174&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;175&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;176&lt;/span&gt; BST&lt;t&gt;::Tree_Minimum(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;177&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;178&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x-&amp;gt;left !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;179&lt;/span&gt;         x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;180&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;181&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;182&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最大值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;183&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;184&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;185&lt;/span&gt; BST&lt;t&gt;::Tree_Maximum(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;186&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;187&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x-&amp;gt;right !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;188&lt;/span&gt;         x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;189&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; x;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;190&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;191&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;后继和前驱&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;192&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;193&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;194&lt;/span&gt; BST&lt;t&gt;::Tree_Successor(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;195&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;196&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x-&amp;gt;right != nullptr) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 对接近大于x的节点 处在右子树中最小值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;197&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Tree_Minimum(x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;198&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;从x开始向上寻找节点：该结点不是父节点的右孩子 （如果是右孩子则x.right不会为空）&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;199&lt;/span&gt;     auto y(x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;parent);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;200&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (y != nullptr &amp;amp;&amp;amp; x == y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;201&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;202&lt;/span&gt;         x =&lt;span style=&quot;color: #000000;&quot;&gt; y;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;203&lt;/span&gt;         y = y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;parent;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;204&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;205&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; y;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;第一个不是右孩子的节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;206&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;207&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;208&lt;/span&gt; std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;209&lt;/span&gt; BST&lt;t&gt;::Tree_Predecessor(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; x)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;210&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;211&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (x-&amp;gt;left !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;212&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Tree_Maximum(x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;213&lt;/span&gt;     auto y = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;parent;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;214&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (y != nullptr &amp;amp;&amp;amp; x == y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;215&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;216&lt;/span&gt;         x =&lt;span style=&quot;color: #000000;&quot;&gt; y;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;217&lt;/span&gt;         y = y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;parent;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;218&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;219&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; y;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;220&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;221&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;222&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;插入和删除&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;223&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;224&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; BST&lt;t&gt;::Tree_Insert(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; z)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;225&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;226&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;临时量用于确定z位置：不要调用make_shared 则不满足 !=nullptr 为空树时条件&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;227&lt;/span&gt;     std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt; y =&lt;span style=&quot;color: #000000;&quot;&gt; nullptr;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;228&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;    auto y = std::make_shared&lt;tree_note&lt;t&gt;&amp;gt;();&lt;/tree_note&lt;t&gt;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;229&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    auto x(root);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;230&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当x为空时，x就是待插入的位置&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;231&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (x !=&lt;span style=&quot;color: #000000;&quot;&gt; nullptr) 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;232&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;233&lt;/span&gt;         y =&lt;span style=&quot;color: #000000;&quot;&gt; x;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;234&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;235&lt;/span&gt;             x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;236&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;包括相等的情况 具有稳定性：后插入的在右边&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;237&lt;/span&gt;             x = x-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;238&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;239&lt;/span&gt;     z-&amp;gt;parent =&lt;span style=&quot;color: #000000;&quot;&gt; y;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;240&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y ==&lt;span style=&quot;color: #000000;&quot;&gt; nullptr)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;241&lt;/span&gt;         root =&lt;span style=&quot;color: #000000;&quot;&gt; z;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;242&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;key &amp;lt; y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;243&lt;/span&gt;         y-&amp;gt;left =&lt;span style=&quot;color: #000000;&quot;&gt; z;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;244&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;245&lt;/span&gt;         y-&amp;gt;right =&lt;span style=&quot;color: #000000;&quot;&gt; z;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;246&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;247&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;248&lt;/span&gt; template&lt;typename t=&quot;&quot;&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;249&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; BST&lt;t&gt;::Tree_Delete(std::shared_ptr&lt;tree_note&lt;t&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; z)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;250&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;251&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;left == nullptr) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;(a)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;252&lt;/span&gt;         Transplant(z, z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;253&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (z-&amp;gt;right == nullptr) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;(b)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;254&lt;/span&gt;         Transplant(z, z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;left);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;255&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;256&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;257&lt;/span&gt;         auto y = Tree_Minimum(z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;258&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (y-&amp;gt;parent != z) &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;(c):y不是z的右孩子 &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;259&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;260&lt;/span&gt;             Transplant(y, y-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;261&lt;/span&gt;             y-&amp;gt;right = z-&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;right;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;262&lt;/span&gt;             y-&amp;gt;right-&amp;gt;parent =&lt;span style=&quot;color: #000000;&quot;&gt; y;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;263&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;264&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;(d):y是z的右孩子 且y,left == nullptr 如果y的左孩子不是空则 y不是z的后继&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;265&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Transplant(z, y);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;266&lt;/span&gt;         y-&amp;gt;left = z-&amp;gt;left; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;y的左孩子（拼接）指向被删除点z的左孩子&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;267&lt;/span&gt;         y-&amp;gt;left-&amp;gt;parent = y; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;相当于 z = y&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;268&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;269&lt;/span&gt; }&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/tree_note&lt;t&gt;&lt;/typename&gt;&lt;/tree_note&gt;&lt;/tree_note&gt;&lt;/tree_note&gt;&lt;/t&gt;&lt;/typename&gt;&lt;/typename&gt;&lt;/memory&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;main&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Binary_Seach_Tree.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BSTree()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;     vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; vi{ &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;9&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     BST&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; t;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;插入&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (auto i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;i != vi.size();++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        t.Tree_Insert(vi[i]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;中序遍历&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    t.Iorder_Tree_Walk();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     cout &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;最大值&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;     cout &amp;lt;&amp;lt; t.Tree_Maximum() &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;最小值&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     cout &amp;lt;&amp;lt; t.Tree_Minimum() &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;查找&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; t.Tree_Seach(&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;) &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;删除&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     t.Tree_Delete(&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;     cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; t.Iterative_Tree_Search(&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;) &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    BSTree();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt; }&lt;/vector&gt;&lt;/iostream&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;删除：form 《算法导论》 P167&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202011/2092141-20201107120342901-1844958442.png&quot; alt=&quot;&quot; width=&quot;1158&quot; height=&quot;1337&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;关于其他操作请看&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2 vertical-middle&quot; href=&quot;https://www.cnblogs.com/skywang12345/p/3576373.html&quot;&gt;二叉查找树(二)之 C++的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>贪吃蛇小笔记</title>
    <link href="https://z974890869.com/2020/10/29/tan-chi-she-xiao-bi-ji/tan-chi-she-xiao-bi-ji/"/>
    <id>https://z974890869.com/2020/10/29/tan-chi-she-xiao-bi-ji/tan-chi-she-xiao-bi-ji/</id>
    <published>2020-10-29T08:26:00.000Z</published>
    <updated>2021-06-19T09:04:33.197Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;贪吃蛇greedysnake&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/silence1772/article/details/55005008&quot; target=&quot;_blank&quot;&gt;贪吃蛇GreedySnake&lt;/a&gt;（转载）&lt;/h1&gt;
&lt;p&gt;如果《c++ prime 5th》 课后程序都自己敲一遍：这个程序（没有继承）很好理解&lt;/p&gt;
&lt;p&gt;一些window API&amp;nbsp; 检测输入什么的 跳过也行&lt;/p&gt;
&lt;p&gt;用一个controller 类来总控制&amp;nbsp;&lt;/p&gt;
&lt;p&gt;：&lt;a href=&quot;https://blog.csdn.net/silence1772/article/details/55005008&quot; target=&quot;_blank&quot;&gt;整个游戏其实就是一个无穷的循环，直到退出游戏时退出循环。我们暂且将这个循环称为一级循环，这个循环包含游戏开始动画，游戏难度选择，游戏过程这三个子模块，其中游戏过程这个模块亦是一个循环，我们暂且将其称为二级循环&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; tmp = PlayGame();&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;开启游戏循环，当重新开始或退出游戏时，结束循环并返回值给tmp&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;动画就是一层一层的覆盖 和 刷新&lt;/p&gt;
&lt;p&gt;关于线程。。。。因该和同一层次的循环有关（不了解还没学）&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;总的来说：如果第一次编写小游戏还是有收获的（尤其是界面选择）&lt;/p&gt;
&lt;p&gt;有时间的话 折腾下 &lt;a href=&quot;https://stackoverflow.com/questions/18028808/remove-blinking-underscore-on-console-cmd-prompt&quot; target=&quot;_blank&quot;&gt;光标&lt;/a&gt;、输入按键、c++可替代部分&lt;/p&gt;
&lt;h1 id=&quot;articleContentId&quot; class=&quot;title-article&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/u013521296/article/details/77103697&quot; target=&quot;_blank&quot;&gt;C语言使用getch()读取方向键&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;articleContentId&quot; class=&quot;title-article&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/feilong911hao/article/details/42081967&quot; target=&quot;_blank&quot;&gt;关于键盘方向键的ASCII的问题解释&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Randomized_Select C++</title>
    <link href="https://z974890869.com/2020/10/24/randomized-select-c/"/>
    <id>https://z974890869.com/2020/10/24/randomized-select-c/</id>
    <published>2020-10-24T13:31:00.000Z</published>
    <updated>2021-06-19T09:04:33.203Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;快速选择的总体思路与&lt;a href=&quot;https://www.cnblogs.com/Z-s-c11/p/13828262.html&quot; target=&quot;_blank&quot;&gt;快速排序&lt;/a&gt;一致，选择一个元素作为基准来对元素进行分区，将小于和大于基准的元素分在基准左边和右边的两个区域。不同的是，快速选择并不递归访问双边，而是只递归进入一边的元素中继续寻找。这降低了平均时间复杂度，从O(&lt;em&gt;n&lt;/em&gt;&amp;nbsp;log&amp;nbsp;&lt;em&gt;n&lt;/em&gt;)至O(&lt;em&gt;n&lt;/em&gt;)，不过最坏情况仍然是O(&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;)。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201024212758252-13371777.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;code&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;random&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Partiton(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; p, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; r)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;int 有-1值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = p - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;A[r]是主元不参与划分数组 j != r&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; j = p;j != r;++&lt;span style=&quot;color: #000000;&quot;&gt;j)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[j] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[r])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;             ++&lt;span style=&quot;color: #000000;&quot;&gt;i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            std::swap(A[i], A[j]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     std::swap(A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;], A[r]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Randomized_Partition(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; p, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; r)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    std::default_random_engine e;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;     std::uniform_int_distribution&lt;unsigned&gt;&lt;span style=&quot;color: #000000;&quot;&gt; u(p, r);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i =&lt;span style=&quot;color: #000000;&quot;&gt; u(e);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    std::swap(A[r], A[i]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Partiton(A, p, r);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Randomized_Select(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; p, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; r, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (p ==&lt;span style=&quot;color: #000000;&quot;&gt; r)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; A[p];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; q =&lt;span style=&quot;color: #000000;&quot;&gt; Randomized_Partition(A, p, r);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; k = q - p + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (i == k)&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;i为第i小元素，k为A[p,q]元素个数（小于主元的L array）&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; A[q];&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;k i 也行？: 不行以0起始&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (i &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; k)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Randomized_Select(A, p, q - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Randomized_Select(A, q + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, r, i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Randomized_Select(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; r = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; Randomized_Select(A, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, r, i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt; }&lt;/unsigned&gt;&lt;/random&gt;&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MAX_MIN</title>
    <link href="https://z974890869.com/2020/10/24/max-min/"/>
    <id>https://z974890869.com/2020/10/24/max-min/</id>
    <published>2020-10-24T11:33:00.000Z</published>
    <updated>2021-06-19T09:04:33.207Z</updated>
    
    
    <summary type="html">&lt;p&gt;代码太烂：不简洁&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;事实上，我们只需要最多3 Ln/2」次比较就可以同时找到最小值和最大值。具体的方法是记
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;录已知的最小值和最大值。但我们并不是将每一个输入元素与当前的最小值和最大值进行比
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;团丑较这样做的代价是每个元素需要2次比较，而是对输入元素成对地进行处理。首先，我们将
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;一对输入元素相互进行比较，然后把较小的与当前最小值比较，把较大的与当前最大值进行比
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;较。这样，对每两个元素共需3 次比较。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;如何设定已知的最小值和最大值的初始值依赖千n是奇数还是偶数。如果n是奇数，我们就
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;将最小值和最大值的初值都设为第一个元素的值，然后成对地处理余下的元素。如果n是偶数，
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;就对前两个元素做一次比较，以决定最小值和最大值的初值，然后与n是奇数的情形一样，成对
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;地处理余下的元素。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; #include&lt;utility&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;pair&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; std::pair&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;,&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; max_min(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;奇数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A.size() &amp;amp; &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; max= A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;], min = A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;; i != A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i] &amp;lt; A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; min)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;                     min =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (max &amp;lt; A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;                     max = A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; min)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;                     min = A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (max &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[i])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                     max =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { min,max };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;偶数&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; min = A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;],max = A[&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;] &amp;lt; A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt;             min = A[&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;], max = A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;; i != A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i] &amp;lt; A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; min)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt;                     min =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;54&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (max &amp;lt; A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;55&lt;/span&gt;                     max = A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;56&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;57&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;58&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;59&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; min)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;60&lt;/span&gt;                     min = A[i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;61&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (max &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[i])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;62&lt;/span&gt;                     max =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;63&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;64&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;65&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; { min,max };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;66&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;67&lt;/span&gt; }&lt;/utility&gt;&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>#include&quot;RADIX_SORT_GET_WZ.h&quot;</title>
    <link href="https://z974890869.com/2020/10/22/include-radix-sort-get-wz-h/"/>
    <id>https://z974890869.com/2020/10/22/include-radix-sort-get-wz-h/</id>
    <published>2020-10-22T13:28:00.000Z</published>
    <updated>2021-06-19T09:04:33.212Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;vector&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;algorithm&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;sstream&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;stringstream&lt;/span&gt;
#include&lt;iomanip&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;setw setfill
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;内置变量pass-by-value more than pass-by-reference ? 
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;P12 --Effective C++(Chinese)

&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;d位数，A数字&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; get_d(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; max = *&lt;span style=&quot;color: #000000;&quot;&gt;std::max_element(A.cbegin(), A.cend());
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; d = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = max; i != &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;d++&lt;span style=&quot;color: #000000;&quot;&gt;)
    {
        i &lt;/span&gt;/= &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    }
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; d;
}

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; get_ws(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; j,&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ws)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; d =&lt;span style=&quot;color: #000000;&quot;&gt; get_d(A);
    auto s &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; std::to_string(A[j]);
    std::stringstream ss;
    ss &lt;/span&gt;&amp;lt;&amp;lt; std::left &amp;lt;&amp;lt; std::setfill(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;) &amp;lt;&amp;lt; std::setw(d + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; s;
    s &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; ss.str();
    ss &lt;/span&gt;&amp;lt;&amp;lt; std::right &amp;lt;&amp;lt; std::setfill(&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; k = s[ws] - &lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; k;
}
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;k:A数组中最大值，ws： 对A的的第几位排序 A[ws]&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Count_sort_wz(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ws)
{
&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;    ws = pow(10, ws);&lt;/span&gt;
    std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; c(&lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; j = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;j != A.size();++&lt;span style=&quot;color: #000000;&quot;&gt;j)
        &lt;/span&gt;++&lt;span style=&quot;color: #000000;&quot;&gt;c[get_ws(A,j,ws)];
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;i &amp;lt;= &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
        c[i] &lt;/span&gt;+= c[i - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
    std::vector&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; b(A.size());
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;i &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;--&lt;span style=&quot;color: #000000;&quot;&gt;i)
        b[&lt;/span&gt;--c[get_ws(A,i,ws)]] =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i != A.size();++&lt;span style=&quot;color: #000000;&quot;&gt;i)
        A[i] &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; b[i];
}


&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Radix_Sort(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
{
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; max = *&lt;span style=&quot;color: #000000;&quot;&gt;std::max_element(A.cbegin(), A.cend());
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; d =&lt;span style=&quot;color: #000000;&quot;&gt; get_d(A);
    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; ws = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;ws != d; ++&lt;span style=&quot;color: #000000;&quot;&gt;ws)
    {
        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;max 这时为0&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;        Count_sort_wz(A, ws);
    }
}&lt;/span&gt;&lt;/iomanip&gt;&lt;/sstream&gt;&lt;/algorithm&gt;&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hellowooorld/p/7810849.html&quot; target=&quot;_blank&quot;&gt;int转成string的同时加上前缀0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21270162/cannot-convert-a-character-string-to-int&quot; target=&quot;_blank&quot;&gt;convert char to int&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Radix_Sort C++</title>
    <link href="https://z974890869.com/2020/10/22/radix-sort-c/"/>
    <id>https://z974890869.com/2020/10/22/radix-sort-c/</id>
    <published>2020-10-22T13:23:00.000Z</published>
    <updated>2021-06-19T09:04:33.216Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;基数排序&lt;/strong&gt;&lt;/a&gt;（英语：&lt;span lang=&quot;en&quot;&gt;Radix sort）是一种非比较型&lt;a title=&quot;整数&quot; href=&quot;https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0&quot;&gt;整数&lt;/a&gt;&lt;a title=&quot;排序算法&quot; href=&quot;https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&quot;&gt;排序算法&lt;/a&gt;，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。基数排序的发明可以追溯到1887年&lt;a title=&quot;赫尔曼·何乐礼&quot; href=&quot;https://zh.wikipedia.org/wiki/%E8%B5%AB%E7%88%BE%E6%9B%BC%C2%B7%E4%BD%95%E6%A8%82%E7%A6%AE&quot;&gt;赫尔曼·何乐礼&lt;/a&gt;在&lt;a class=&quot;new&quot; title=&quot;打孔卡片制表机（页面不存在）&quot; href=&quot;https://zh.wikipedia.org/w/index.php?title=%E6%89%93%E5%AD%94%E5%8D%A1%E7%89%87%E5%88%B6%E8%A1%A8%E6%9C%BA&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;打孔卡片制表机&lt;/a&gt;（Tabulation Machine）上的贡献&lt;sup id=&quot;cite_ref-1&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201022175610056-2109717260.gif&quot; alt=&quot;&quot; loading=&quot;lazy&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201022175909934-947249499.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://www.programiz.com/dsa/radix-sort&quot; target=&quot;_blank&quot;&gt;process&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;对于取位数上的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: left;&quot;&gt;创建vector&lt;vector&lt;int&gt;&amp;gt; 处理A 变为 A[值][位数值] ：例如：A[6] = 789, A[6][1] = 8&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 需要内存多 而且效率低 但是模块化&amp;nbsp;&lt;/vector&lt;int&gt;&lt;/li&gt;
&lt;li style=&quot;text-align: left;&quot;&gt;将 vector&lt;int&gt; 变为str 在用str的下标得到位数值 转变int ：stoi(to_string(A[i])[ws]) : 会超出索引。 例如最大值为3位 而其中一个位1位数，当A[i][1] 为‘\0’空字符 &lt;a href=&quot;https://www.cnblogs.com/Z-s-c11/p/13861138.html&quot; target=&quot;_blank&quot;&gt;需要另外处理&lt;/a&gt;&lt;/int&gt;&lt;/li&gt;
&lt;li style=&quot;text-align: left;&quot;&gt;/ %这个方法： 看起来不c++ 但确实好用
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;(A[i] / ws) % &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;CODE C++&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;algorithm&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; #include&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;内置变量pass-by-value more than pass-by-reference ? 
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;P12 --Effective C++(Chinese)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;k:A数组中最大值，ws： 对A的的第几位排序 A[ws]&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Count_sort_wz(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A,&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ws)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;     ws = pow(&lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, ws);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;     std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; c(&lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; j = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;j != A.size();++&lt;span style=&quot;color: #000000;&quot;&gt;j)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;++c[(A[i] / ws) % 10]
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;cant stoi(char)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;++c[(std::to_string(A[j])[ws])-&#39;0&#39;];&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;         ++c[(A[j] / ws) % &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;i != &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         c[i] += c[i - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; b(A.size());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;i &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;--&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         b[--c[(A[i] / ws) % &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;]] =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i != A.size();++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         A[i] =&lt;span style=&quot;color: #000000;&quot;&gt; b[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;d位数，A数字&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Radix_Sort(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; max = *&lt;span style=&quot;color: #000000;&quot;&gt;std::max_element(A.cbegin(), A.cend());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; d = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = max; i !=&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;d++&lt;span style=&quot;color: #000000;&quot;&gt; )
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;         i /= &lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; ws = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;ws != d; ++&lt;span style=&quot;color: #000000;&quot;&gt;ws)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;max 这时为0&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Count_sort_wz(A, ws);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; }&lt;/algorithm&gt;&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Count_sort C++</title>
    <link href="https://z974890869.com/2020/10/18/count-sort-c/"/>
    <id>https://z974890869.com/2020/10/18/count-sort-c/</id>
    <published>2020-10-18T13:25:00.000Z</published>
    <updated>2021-06-19T09:04:33.222Z</updated>
    
    
    <summary type="html">&lt;p style=&quot;text-align: left;&quot;&gt;简介：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通俗地理解，例如有10个年龄不同的人，统计出有8个人的年龄比A小，那A的年龄就排在第9位，用这个方法可以得到其他每个人的位置，也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去1。算法的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找出待排序的数组中最大和最小的元素&lt;/li&gt;
&lt;li&gt;统计数组中每个值为&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle i}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/add78d8608ad86e54951b8c8bd6c8d8416533d20&quot; alt=&quot;i&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;的元素出现的次数，存入数组&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle C}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/4fc55753007cd3c18576f7933f6f089196732029&quot; alt=&quot; C &quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;的第&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle i}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/add78d8608ad86e54951b8c8bd6c8d8416533d20&quot; alt=&quot;i&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;项&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;对所有的计数累加（从&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle C}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/4fc55753007cd3c18576f7933f6f089196732029&quot; alt=&quot; C &quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;中的第一个元素开始，每一项和前一项相加）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;反向填充目标数组：将每个元素&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle i}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/add78d8608ad86e54951b8c8bd6c8d8416533d20&quot; alt=&quot;i&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;放在新数组的第&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle C[i]}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/d9e670bd48c5b92b5228727d2a35097581cc85a6&quot; alt=&quot;{\displaystyle C[i]}&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;项，每放一个元素就将&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;{\displaystyle C[i]}&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/d9e670bd48c5b92b5228727d2a35097581cc85a6&quot; alt=&quot;{\displaystyle C[i]}&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;减去1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;计数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201018211257389-1786086949.png&quot; alt=&quot;&quot; width=&quot;731&quot; height=&quot;365&quot; loading=&quot;lazy&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;加总&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201018211507923-461663628.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201018211535057-1729796635.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;//对每个A[i]值来说，C[A[i]]就是A[i]在输出数组中的最终正确位置（从1起）&lt;br&gt;		//因为有相等元素，所以C[A[i]]的值减1：所以具有稳定性&lt;br&gt;		//稳定性：对两个相同的数来说，在输入数组中先出现的数，在输出数组中也在前面&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://www.programiz.com/dsa/counting-sort&quot; target=&quot;_blank&quot;&gt;这个图片更直观些&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201018211952816-2067026309.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&amp;nbsp;c++ code&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;当k = O(n)时，采用计数排序，运行时间theta(n)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;theta(k)+theta(n)+theta(k)+theta(n)=theta(n)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; Count_sort(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; k)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;     std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; c(k + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;计数:theta(k)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; j = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;j != A.size(); ++&lt;span style=&quot;color: #000000;&quot;&gt;j)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         ++&lt;span style=&quot;color: #000000;&quot;&gt;c[A[j]];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;加总:theta(n)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;;i &amp;lt;= k;++&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;         c[i] += c[i - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;布置:theta(k)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; b(A.size());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;:theta(n)&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = A.size()-&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;--&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;对每个A[i]值来说，C[A[i]]就是A[i]在输出数组中的最终正确位置（从1起）
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;因为有相等元素，所以C[A[i]]的值减1：所以具有稳定性
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;稳定性：对两个相同的数来说，在输入数组中先出现的数，在输出数组中也在前面&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         b[--c[A[i]]] =&lt;span style=&quot;color: #000000;&quot;&gt; A[i];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; b;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; }&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;main.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;algorithm&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;iterator&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;ostream_iterator&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;COUNTING_SORT.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; print(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; v)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;     ostream_iterator&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; out_iter(cout, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    copy(v.cbegin(), v.cend(), out_iter);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;     cout &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; CountingSort()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; v = { &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    print(v);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     print(Count_sort(v, *&lt;span style=&quot;color: #000000;&quot;&gt;max_element(v.cbegin(), v.cend())));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    CountingSort();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; }&lt;/iterator&gt;&lt;/algorithm&gt;&lt;/iostream&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Priority_Queue C++</title>
    <link href="https://z974890869.com/2020/10/18/priority-queue-c/"/>
    <id>https://z974890869.com/2020/10/18/priority-queue-c/</id>
    <published>2020-10-18T10:20:00.000Z</published>
    <updated>2021-06-19T09:04:33.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%84%AA%E5%85%88%E4%BD%87%E5%88%97&quot; target=&quot;_blank&quot;&gt;优先队列&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是&lt;a title=&quot;计算机科学&quot; href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6&quot;&gt;计算机科学&lt;/a&gt;中的一类&lt;a class=&quot;mw-redirect&quot; title=&quot;抽象数据类型&quot; href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B&quot;&gt;抽象数据类型&lt;/a&gt;。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用&lt;strong&gt;&lt;a class=&quot;mw-redirect&quot; title=&quot;堆 (数据结构)&quot; href=&quot;https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)&quot;&gt;堆&lt;/a&gt;&lt;/strong&gt;来实现。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;stdexcept&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;runtime_error&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;a href=&quot;https://www.cnblogs.com/Z-s-c11/p/13832703.html&quot; target=&quot;_blank&quot;&gt;#include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;HEAPSORT.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;/a&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Heap_Maximum(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取最大值并删除&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; Heap_Extract_Max(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     heap_size = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Build_Max_Heap(A);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    try
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        if (heap_size &amp;lt; 0)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;            throw std::runtime_error(&quot;heap underflow&quot;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    catch (std::runtime_error err)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        std::cout &amp;lt;&amp;lt; err.what()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;            &amp;lt;&amp;lt; &quot;\n Try Again? Enter y or n&quot; &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        char c;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        std::cin &amp;gt;&amp;gt; c;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;        if (!std::cin || c == &#39;n&#39;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;            return -1;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (heap_size &amp;lt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; std::runtime_error(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;heap underflow&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; max = A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;     A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;] =&lt;span style=&quot;color: #000000;&quot;&gt; A[heap_size];
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;     --&lt;span style=&quot;color: #000000;&quot;&gt;heap_size;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;     Max_Heapify(A, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; max;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;改变(变大)节点里面的值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Heap_Increase_Key(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp; i, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (key &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[i])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; std::runtime_error(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;new key is small than current key&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt;     A[i] =&lt;span style=&quot;color: #000000;&quot;&gt; key;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;保持最大堆&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt; (i &amp;gt; &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; A[parent(i)] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[i])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        std::swap(A[i], A[parent(i)]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt;         i =&lt;span style=&quot;color: #000000;&quot;&gt; parent(i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;54&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;55&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在末尾处插入键值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;56&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Max_Heap_Insert(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; key)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;57&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;58&lt;/span&gt;     ++&lt;span style=&quot;color: #000000;&quot;&gt;heap_size;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;59&lt;/span&gt;     A[heap_size] =&lt;span style=&quot;color: #000000;&quot;&gt; INT_MIN;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;60&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Heap_Increase_Key(A, heap_size, key);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;61&lt;/span&gt; }&lt;/iostream&gt;&lt;/stdexcept&gt;&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;main.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; #include&lt;iostream&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;iterator&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;ostream_iterator&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; #include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PRIORITY_QUEUE.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; print(vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; v)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;     ostream_iterator&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; out_iter(cout, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    copy(v.begin(), v.end(), out_iter);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Priority_Queue()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;     vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; v = { &lt;span style=&quot;color: #800080;&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;16&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;9&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;14&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; };
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    print(v);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     cout &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     cout &amp;lt;&amp;lt; Heap_Extract_Max(v) &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     Max_Heap_Insert(v, &lt;span style=&quot;color: #800080;&quot;&gt;15&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;     cout&amp;lt;&lt;heap_maximum(v) &lt;&lt;&lt;span=&quot;&quot; style=&quot;color: #000000;&quot;&gt; endl;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    HeapSort(v);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    print(v);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Priority_Queue();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; }&lt;/heap_maximum(v)&gt;&lt;/iterator&gt;&lt;/iostream&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>static全局变量与普通的全局变量（转载）</title>
    <link href="https://z974890869.com/2020/10/18/static-quan-ju-bian-liang-yu-pu-tong-de-quan-ju-bian-liang-zhuan-zai/static-quan-ju-bian-liang-yu-pu-tong-de-quan-ju-bian-liang-zhuan-zai/"/>
    <id>https://z974890869.com/2020/10/18/static-quan-ju-bian-liang-yu-pu-tong-de-quan-ju-bian-liang-zhuan-zai/static-quan-ju-bian-liang-yu-pu-tong-de-quan-ju-bian-liang-zhuan-zai/</id>
    <published>2020-10-18T07:08:00.000Z</published>
    <updated>2021-06-19T09:04:33.230Z</updated>
    
    
    <summary type="html">&lt;p align=&quot;left&quot;&gt;https://blog.csdn.net/weiyuefei/article/details/51563890&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;写的清楚 就是不知道出处在哪 看到全是转载也不贴原址&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;一、程序的内存分配&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;一个由C/C++编译的程序占用的内存分为以下几个部分：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1、栈区（stack）—&amp;nbsp;由编译器自动分配释放&amp;nbsp;，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2、堆区（heap）&amp;nbsp;—&amp;nbsp;一般由程序员分配释放，&amp;nbsp;若程序员不释放，程序结束时可能由OS回收&amp;nbsp;。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3、全局区（静态区）（static）— 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，&amp;nbsp;未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后有系统释放&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;4、文字常量区&amp;nbsp;—&amp;nbsp;常量字符串就是放在这里的。&amp;nbsp;程序结束后由系统释放。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;5、程序代码区 —&amp;nbsp;存放函数体的二进制代码。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;二、例子程序&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;//main.cpp&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;int a = 0;&amp;nbsp;全局初始化区&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;char *p1;&amp;nbsp;全局未初始化区&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;main()&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;{&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;int b;//&amp;nbsp;栈&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;char s[] = &quot;abc&quot;; //栈&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;char *p2; //栈&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;char *p3 = &quot;123456&quot;; 123456\0&quot;;//在常量区，p3在栈上。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;static int c =0；&amp;nbsp;//全局（静态）初始化区&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;p1 = (char *)malloc(10);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;p2 = (char *)malloc(20);&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;//分配得来得10和20字节的区域就在堆区。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;strcpy(p1, &quot;123456&quot;); //123456\0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成一个地方。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&amp;nbsp;}&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;三、从作用域看：&lt;br&gt;&lt;br&gt;全局变量具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用extern 关键字再次声明这个全局变量。&lt;br&gt;&lt;br&gt;局部变量也只有局部作用域，它是自动对象（auto），它在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被撤销，其所占用的内存也被收回。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;静态局部变量具有局部作用域，它只被初始化一次，自从第一次被初始化直到程序运行结束都一直存在，它和全局变量的区别在于全局变量对所有的函数都是可见的，而静态局部变量只对定义自己的函数体始终可见。&lt;br&gt;&lt;br&gt;静态全局变量也具有全局作用域，它与全局变量的区别在于如果程序包含多个文件的话，它作用于定义它的文件里，不能作用到其它文件里，即被static关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。&lt;br&gt;&lt;br&gt;从分配内存空间看：&lt;br&gt;全局变量，静态局部变量，静态全局变量都在静态存储区分配空间，而局部变量在栈里分配空间。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域，限制了它的使用范围。因此static&amp;nbsp;这个说明符在不同的地方所起的作用是不同的。&lt;br&gt;&lt;br&gt;四、总的来说就是：&lt;br&gt;&lt;br&gt;1、生存周期不同&lt;br&gt;2、作用范围不同&lt;br&gt;3、分配方式不同&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;----------------------------------------------&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;再来看下堆和栈的不同：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1、分配方式不同；&lt;br&gt;2、空间大小不同；&lt;br&gt;3、分配效率不同；&lt;br&gt;4、能否产生碎片不同；&lt;br&gt;5、生长方向不同；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1、分配方式不同&lt;/p&gt;
&lt;p&gt;栈:&lt;br&gt;由系统自动分配。 例如，声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空间&lt;br&gt;堆:&lt;br&gt;需要程序员自己申请，并指明大小，在c中malloc函数&lt;br&gt;如p1 = (char *)malloc(10);&lt;br&gt;在C++中用new运算符&lt;br&gt;如p2 = (char *)new(10);&lt;br&gt;但是注意p1、p2本身是在栈中的。&amp;nbsp;&lt;br&gt;&lt;br&gt;2、&amp;nbsp;空间大小不同&lt;br&gt;&lt;br&gt;一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M。&lt;br&gt;&lt;br&gt;3、分配效率&lt;br&gt;&lt;br&gt;栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执 行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考 数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。&lt;br&gt;&lt;br&gt;4、碎片问题&lt;br&gt;&lt;br&gt;栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。&amp;nbsp;&lt;br&gt;堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，&amp;nbsp;&lt;br&gt;会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。&amp;nbsp;&lt;br&gt;&lt;br&gt;对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出。&lt;br&gt;&lt;br&gt;5、生长方向&amp;nbsp;&lt;br&gt;&lt;br&gt;对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;br&gt;堆和栈相比，由于大量new/delete的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1&gt;&lt;a name=&quot;t0&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ask-title &quot;&gt;static函数与普通函数有什么区别&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;　用static修饰的函数，本限定在本源码文件中，不能被本源码文件以外的代码文件调用。而普通的函数，默认是extern的，也就是说，可以被其它代码文件调用该函数。&lt;br&gt;　　在函数的返回类型前加上关键字static，函数就被定义成为静态函数。普通 函数的定义和声明默认情况下是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。因此定义静态函数有以下好处：&lt;br&gt;　　&amp;lt;1&amp;gt; 其他文件中可以定义相同名字的函数，不会发生冲突。&lt;br&gt;　　&amp;lt;2&amp;gt; 静态函数不能被其他文件所用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;static全局变量与普通的全局变量有什么区别？static局部变量和普通局部变量有什么区别？static函数与普通函数有什么区别？ 　　&lt;br&gt;答:&lt;br&gt;1) 全局变量(外部变量)的说明之前再冠以static 就构成了静态的全局变量。全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别在于非静态全局变量的作用域是整个源程序， 当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 而静态全局变量则限制了其作用域， 即只在定义该变量的源文件内有效， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用， 因此可以避免在其它源文件中引起错误。 　　&lt;br&gt;2) 从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域，限制了它的使用范围。　　&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;3) static函数与普通函数作用域不同,仅在本文件。只在当前源文件中使用的函数应该说明为内部函数(static)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件 　　&lt;br&gt;综上所述:&lt;br&gt;static全局变量与普通的全局变量有什么区别：&lt;br&gt;static全局变量只初使化一次，防止在其他文件单元中被引用; 　　&lt;br&gt;static局部变量和普通局部变量有什么区别：&lt;br&gt;static局部变量只被初始化一次，下一次依据上一次结果值； 　　&lt;br&gt;static函数与普通函数有什么区别：&lt;br&gt;static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HeapSort C++</title>
    <link href="https://z974890869.com/2020/10/17/heapsort-c/"/>
    <id>https://z974890869.com/2020/10/17/heapsort-c/</id>
    <published>2020-10-17T13:55:00.000Z</published>
    <updated>2021-06-19T09:04:33.236Z</updated>
    
    
    <summary type="html">&lt;h2&gt;&lt;span class=&quot;mw-headline&quot; style=&quot;color: #000000;&quot;&gt;from Wiki&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span id=&quot;概述&quot; class=&quot;mw-headline&quot; style=&quot;color: #000000;&quot;&gt;概述&lt;span class=&quot;mw-editsection&quot;&gt;&lt;span class=&quot;mw-editsection-bracket&quot;&gt;&lt;span class=&quot;mw-editsection-bracket&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;若以升序排序说明，把&lt;a class=&quot;mw-redirect&quot; title=&quot;数组&quot; href=&quot;https://zh.wikipedia.org/wiki/%E9%99%A3%E5%88%97&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;数组&lt;/span&gt;&lt;/a&gt;转换成&lt;a title=&quot;最大—最小堆&quot; href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E2%80%94%E6%9C%80%E5%B0%8F%E5%A0%86&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;最大堆&lt;/span&gt;&lt;/a&gt;(Max-Heap Heap)，这是一种满足最大堆性质(Max-Heap Property)的&lt;a class=&quot;mw-redirect&quot; title=&quot;二叉树&quot; href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%A8%B9&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;二叉树&lt;/span&gt;&lt;/a&gt;：对于除了根之外的每个节点i, A[parent(i)] ≥ A[i]。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;重复从最大堆取出数值最大的结点(把根结点和最后一个结点交换，把交换后的最后一个结点移出堆)，并让残余的&lt;a title=&quot;堆&quot; href=&quot;https://zh.wikipedia.org/wiki/%E5%A0%86%E7%A9%8D&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;堆&lt;/span&gt;&lt;/a&gt;维持最大堆性质。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;-.7Bzh-cn:.E5.A0.86.3Bzh-tw:.E5.A0.86.E7.A9.8D.3Bzh-hk:.E5.A0.86.E7.A9.8D.3B.7D-.E7.AF.80.E9.BB.9E.E7.9A.84.E8.A8.AA.E5.95.8F&quot; style=&quot;color: #000000;&quot;&gt;&lt;span id=&quot;-{zh-cn:堆;zh-tw:堆積;zh-hk:堆積;}-節點的訪問&quot; class=&quot;mw-headline&quot;&gt;堆节点的访问&lt;span class=&quot;mw-editsection&quot;&gt;&lt;span class=&quot;mw-editsection-bracket&quot;&gt;&lt;span class=&quot;mw-editsection-bracket&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;通常堆是通过一维&lt;a title=&quot;数组&quot; href=&quot;https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;数组&lt;/span&gt;&lt;/a&gt;来实现的。在数组起始位置为0的情形中：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color: #000000;&quot;&gt;父节点i的左子节点在位置&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/3bff8f7d580269fe6c1e35648032bf2b93354088&quot; alt=&quot;{\displaystyle (2i+1)}&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #000000;&quot;&gt;父节点i的右子节点在位置&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/e14787fdbf6c5580fcd2cf9f63c21dbeb8d82f5e&quot; alt=&quot;{\displaystyle (2i+2)}&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #000000;&quot;&gt;子节点i的父节点在位置&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/f38b28cfa0a788a6d767061ab7481da190b339b6&quot; alt=&quot;{\displaystyle floor((i-1)/2)}&quot; class=&quot;mwe-math-fallback-image-inline&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;



&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;a href=&quot;https://www.programiz.com/dsa/heap-sort&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;Max_Heapify&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201017214936454-1159612428.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;max-heap&quot;&gt;Build max-heap&lt;/h2&gt;
&lt;p&gt;算法导论 P89&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201017215232892-1158735924.png&quot; alt=&quot;&quot; width=&quot;706&quot; height=&quot;290&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2092141/202010/2092141-20201017215259916-1425206893.png&quot; alt=&quot;&quot; width=&quot;740&quot; height=&quot;345&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;#include&quot;HEAPSORT&quot;.h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;#pragma&lt;/span&gt; once
&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt; #include&lt;vector&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;全局静态变量
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;它与全局变量的区别在于如果程序包含多个文件的话，
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;它作用于定义它的文件里，不能作用到其它文件里，
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;即被static关键字修饰过的变量具有文件作用域。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; heap_size;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;近似完全二叉树：节点i的父节点、左孩子、右孩子
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;默认向偶数(向下）取整 ----《深入理解计算机系统》
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;以0起始数组&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; parent(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; (i - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;) / &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; left(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt; * i + &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; right(&lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt; * i + &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;化为最大堆：父节点&amp;gt;左孩子&amp;gt;右孩子   i为父节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Max_Heapify(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; A, &lt;span style=&quot;color: #0000ff;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; l =&lt;span style=&quot;color: #000000;&quot;&gt; left(i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; r =&lt;span style=&quot;color: #000000;&quot;&gt; right(i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; largest;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;寻找该节点结构(父、左、右)中最大值&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (l &amp;lt;= heap_size &amp;amp;&amp;amp; A[i] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[l])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;         largest =&lt;span style=&quot;color: #000000;&quot;&gt; l;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;         largest =&lt;span style=&quot;color: #000000;&quot;&gt; i;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (r &amp;lt;= heap_size &amp;amp;&amp;amp; A[largest] &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; A[r])
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;         largest =&lt;span style=&quot;color: #000000;&quot;&gt; r;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;使最大值为父节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (largest !=&lt;span style=&quot;color: #000000;&quot;&gt; i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        std::swap(A[i], A[largest]);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;使被交换的结点结构也是最大堆&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Max_Heapify(A, largest);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;建堆:从下到上&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Build_Max_Heap(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; A[n/2]+1+...+n都是含有孩子的父节点&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = (A.size()-1) / &lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;--&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        Max_Heapify(A, i);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;}
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;54&lt;/span&gt; 
&lt;span style=&quot;color: #008080;&quot;&gt;55&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; HeapSort(std::vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; A)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;56&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;{
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;57&lt;/span&gt;     heap_size = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;58&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    Build_Max_Heap(A);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;59&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;倒数第二个最大堆化：这时就剩下根节点A[0]和该节点i 再次进行最大堆后顺序已定&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;60&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = A.size() - &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;; i != &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;;--&lt;span style=&quot;color: #000000;&quot;&gt;i)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;61&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;62&lt;/span&gt;         std::swap(A[&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;], A[i]);&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;最大堆化后A[i]为最大值 :排在末尾 &lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;63&lt;/span&gt;         --&lt;span style=&quot;color: #000000;&quot;&gt;heap_size;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;64&lt;/span&gt;         Max_Heapify(A, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;65&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;66&lt;/span&gt; }&lt;/vector&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;main.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;#include&lt;iostream&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
#include&lt;/span&gt;&lt;iterator&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;ostream_iterator&lt;/span&gt;
#include&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;HEAPSORT.h&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;using&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;namespace&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; std;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; print(vector&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; v)
{
    ostream_iterator&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; out_iter(cout, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
    copy(v.begin(), v.end(), out_iter);
}
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HeapSort()
{
    vector&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&amp;gt; v = {&lt;span style=&quot;color: #800080;&quot;&gt;4&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;3&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;16&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;9&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;10&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;14&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;8&lt;/span&gt;,&lt;span style=&quot;color: #800080;&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;};
    print(v);
    cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
    HeapSort(v);
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;heap_soted: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt; endl;
    print(v);
}
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; main()
{
    HeapSort();
}&lt;/span&gt;&lt;/iterator&gt;&lt;/iostream&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
